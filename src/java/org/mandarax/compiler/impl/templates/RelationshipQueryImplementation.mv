package @{packageName};
@foreach{imp:context.importDeclarations} 
@{imp}
@end{}
import org.mandarax.rt.*;

/**
 * Interface for queries for relationship <strong>@{rel.name}</strong>.
 * @version @{timestamp} 
 */
public class @{rel.name}@{ext}Instances {
	// object references
	@foreach{obj:context.objectDeclarations} 
	public static @{obj.type} @{obj.name} = @{obj.defaultValueDeclaration};
	@end{}
	
	// fields representing annotations
	@foreach{rule:rel.rules}
	// rule: @{rule}
	private final static java.util.Properties _annotations_@{rule.id} = new java.util.Properties();
	@end{}
	
	// initialise annotations
	static {@foreach{rule:rel.rules}
		// relationship annotations for rule  @{rule}
		@foreach{annotation:rel.annotations}_annotations_@{rule.id}.put("@{org.apache.commons.lang.StringEscapeUtils.escapeJava(annotation.key)}","@{org.apache.commons.lang.StringEscapeUtils.escapeJava(annotation.value)}");
		@end{}
		// rule annotations for rule  @{rule}
		@foreach{annotation:rule.annotations}_annotations_@{rule.id}.put("@{org.apache.commons.lang.StringEscapeUtils.escapeJava(annotation.key)}","@{org.apache.commons.lang.StringEscapeUtils.escapeJava(annotation.value)}");
		@end{}
		
	@end{}}
		
	

	// interface generated for queries	
	@foreach{query:rel.getQueries()} 
	public ResultSet<@{rel.name}@{ext}> @{query.name} ( @foreach{param:query.parameterNames} @{rel.getTypeNameForSlot(param)} @{param} @end{", "} ) {
		DerivationController _derivation = new DefaultDerivationController();
		return new ResultSet<@{rel.name}@{ext}>(@{query.name} ( _derivation @if{query.hasParameters()},@end{} @foreach{param:query.parameterNames} @{param} @end{", "}),_derivation);
	} 
	@end{}
	
	// implementations - these methods are referenced by code generated from other rules in this package
	// and therefore kept static 
	@foreach{query:rel.getQueries()} 
	static ResourceIterator<@{rel.name}@{ext}> @{query.name} ( final DerivationController _derivation @if{query.hasParameters()},@end{} @foreach{param:query.parameterNames} final @{rel.getTypeNameForSlot(param)} @{param} @end{", "} ) {
		final int _derivationlevel = _derivation.size();
		return new IteratorChain<@{rel.name}@{ext}>(@{rel.rules.size()}) {
			
			public ResourceIterator<@{rel.name}@{ext}> getNextIterator(int pos) {
			switch (pos) {
				@foreach{index:ruleIndices}
                		case @{index}: {
                			return @{query.name}_@{index}(_derivation.pop(_derivationlevel) @if{query.hasParameters()},@end{} @foreach{param:query.parameterNames} @{param} @end{", "});
                		}
				@end{}
				default: return EmptyIterator.DEFAULT;
			}}
		};
	} 
	@end{}
	
	
	// private methods - each method represents the invocation of a single rule for a certain query
	@foreach{query:rel.queries}// query: @{query.name}
	@foreach{index:ruleIndices}// rule: @{rel.rules.get(index)}
	private static ResourceIterator<@{rel.name}@{ext}> @{query.name}_@{index} (final DerivationController _derivation @if{query.hasParameters()},@end{} @foreach{param:query.parameterNames} final @{rel.getTypeNameForSlot(param)} @{param} @end{", "}) {
		@code{rule=rel.getRules().get(index)}
		_derivation.log("@{rel.name}.@{rule.id}", DerivationController.RULE, _annotations_@{rule.id});
		
		@if{rule.fact}@includeNamed{'FactInvocation'}
		@else{}@includeNamed{'RuleInvocation'}
		@end{}
	}
	@end{}@end{}
	
}

