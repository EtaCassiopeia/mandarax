	@code{import org.mandarax.dsl.*;import org.mandarax.compiler.impl.*;}
	@code{ctrl=new VariableBindings(context,(rel.name)+ext+'Instances');scheduler=new Scheduler(resolver,rule,query);rule=scheduler.rule;head=rule.head;body=scheduler.prerequisites;hterms=head.parameters;counter=new Counter();lastPrereq=null;ctrl.bind(head,query);}
		
		// utility class used to keep track of variables bindings
		class _Bindings {
		@foreach{v:rule.variables}	private @{v.typeName} @{v.name} = @{ctrl.getBinding(v)}; // term @{v}
		@end{}}
		final _Bindings _bindings = new _Bindings();
		

		@foreach{prereq:body} @code{index=counter.next;}
		// apply prerequisite @{prereq.expression}
		@if{prereq.firstRelation}final ResourceIterator<@{prereq.rel.name}@{ext}> iterator@{index} = @{prereq.rel.name}@{ext}Instances.@{prereq.query.name}(@{prereq.printBoundParams('_bindings','_derivation.push()')});
		@code{lastPrereq=prereq;}
		
		@else{prereq.definedByRelationship}final ResourceIterator<@{prereq.rel.name}@{ext}> iterator@{index} =  new NestedIterator<@{prereq.rel.name}@{ext}, @{prereq.previous.rel.name}@{ext}>(iterator@{index-1}) {
                	public ResourceIterator<@{prereq.previous.rel.name}@{ext}> getNextIterator(@{prereq.rel.name}@{ext} _object) {
                				// bind parameters from @{prereq.previousRelPrereq.expression}
						@foreach{v:prereq.previous.newlyBoundVariables}_bindings.@{v} = _object.@{prereq.previous.getSlot(v)};
						@end{}
									return @{prereq.rel.name}@{ext}Instances.@{prereq.query.name}(@{prereq.printBoundParams('_bindings','_derivation.push()')});
                	}
            	};
		@code{lastPrereq=prereq;}
		@else{prereq.hasPreviousRelPrereq()} 
					com.google.common.base.Predicate<Object> _filter@{index} = new com.google.common.base.Predicate<Object>() {
						public boolean apply(Object _o) {
								return @{prereq.printScoped('_bindings')};
							}
					};
					final ResourceIterator iterator@{index} =  new FilteredIterator(iterator@{index-1},_filter@{index});
		@else{} 
					if (!(@{prereq.printScoped('_bindings')})) {return EmptyIterator.DEFAULT;} 
		@end{}@end{}
		
		// rule head
		@if{lastPrereq!=null}return new NestedIterator<@{lastPrereq.rel.name}@{ext}, @{rel.name}@{ext}>(iterator@{index}) {
                	public ResourceIterator<@{rel.name}@{ext}> getNextIterator(@{lastPrereq.rel.name}@{ext} _object) {
						// bind parameters from @{lastPrereq.expression}
						@foreach{v:lastPrereq.newlyBoundVariables}_bindings.@{v} = _object.@{lastPrereq.getSlot(v)};
						@end{}
                    				return new SingletonIterator(new @{rel.name}@{ext}(@{ctrl.printSlots(rel.slotDeclarations,'_bindings')}));
                	}
        	};
        @else{}return new SingletonIterator(new @{rel.name}@{ext}(@{ctrl.printSlots(rel.slotDeclarations,'_bindings')}));
        @end{}
		
		
		
	