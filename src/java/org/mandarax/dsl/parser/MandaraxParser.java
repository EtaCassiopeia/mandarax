// $ANTLR 3.2 Sep 23, 2009 12:02:23 /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g 2010-10-28 21:15:28
 
/*
 * Copyright 2010 Jens Dietrich 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
 * Unless required by applicable law or agreed to in writing, software distributed under the 
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
 * either express or implied. See the License for the specific language governing permissions 
 * and limitations under the License.
 */
 
/**
 * Parser generated by ANTLR. The grammar is based on fragements taken from the Java 1.5 developed 
 * by Terence Parr and released under the BSD license. See http://www.antlr.org/grammar/1152141644268/Java.g
 * for details.
 * @author jens dietrich
 */ 
package org.mandarax.dsl.parser;
import org.mandarax.dsl.*;
import static org.mandarax.dsl.Utils.*;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class MandaraxParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NEWLINE", "Identifier", "StringLiteral", "HexLiteral", "OctalLiteral", "DecimalLiteral", "HexDigit", "IntegerTypeSuffix", "Exponent", "FloatTypeSuffix", "FloatingPointLiteral", "EscapeSequence", "CharacterLiteral", "UnicodeEscape", "OctalEscape", "Letter", "JavaIDDigit", "WS", "COMMENT", "LINE_COMMENT", "'import'", "'static'", "'.'", "'*'", "';'", "'package'", "':'", "'->'", "'@'", "'='", "'relationship'", "'rel'", "'('", "')'", "'extends'", "'queries'", "'{'", "'}'", "','", "'public'", "'private'", "'['", "']'", "'boolean'", "'char'", "'byte'", "'short'", "'int'", "'long'", "'float'", "'double'", "'true'", "'false'", "'&'", "'?'", "'|'", "'=='", "'!='", "'instanceof'", "'<='", "'>='", "'<'", "'>'", "'+'", "'-'", "'/'", "'%'", "'~'", "'!'", "'null'", "'new'"
    };
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__29=29;
    public static final int T__65=65;
    public static final int T__28=28;
    public static final int T__27=27;
    public static final int T__62=62;
    public static final int T__26=26;
    public static final int T__63=63;
    public static final int FloatTypeSuffix=13;
    public static final int T__25=25;
    public static final int OctalLiteral=8;
    public static final int T__24=24;
    public static final int CharacterLiteral=16;
    public static final int Exponent=12;
    public static final int T__61=61;
    public static final int EOF=-1;
    public static final int T__60=60;
    public static final int HexDigit=10;
    public static final int Identifier=5;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__59=59;
    public static final int COMMENT=22;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int HexLiteral=7;
    public static final int T__43=43;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int LINE_COMMENT=23;
    public static final int IntegerTypeSuffix=11;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int DecimalLiteral=9;
    public static final int StringLiteral=6;
    public static final int T__30=30;
    public static final int T__31=31;
    public static final int T__32=32;
    public static final int WS=21;
    public static final int T__71=71;
    public static final int T__33=33;
    public static final int T__72=72;
    public static final int T__34=34;
    public static final int NEWLINE=4;
    public static final int T__35=35;
    public static final int T__70=70;
    public static final int T__36=36;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int UnicodeEscape=17;
    public static final int FloatingPointLiteral=14;
    public static final int JavaIDDigit=20;
    public static final int T__74=74;
    public static final int Letter=19;
    public static final int OctalEscape=18;
    public static final int EscapeSequence=15;
    public static final int T__73=73;

    // delegates
    // delegators


        public MandaraxParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public MandaraxParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[145+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return MandaraxParser.tokenNames; }
    public String getGrammarFileName() { return "/Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g"; }


      private Context context = new Context(); 
      protected ErrorReporter errorHandler = new ErrorReporter();
      
      private Position pos(Token token) {
      	return new Position(token.getLine(),token.getCharPositionInLine());
      }
      private Position pos(ASTNode expression) {
      	return expression.getPosition().clone();
      }
      public void displayRecognitionError(String[] tokenNames,RecognitionException e) {
      	String msg = getErrorMessage(e, tokenNames);
      	errorHandler.handleError(msg,e);
      }



    public static class compilationUnit_return extends ParserRuleReturnScope {
        public CompilationUnit value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilationUnit"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:76:1: compilationUnit returns [CompilationUnit value] : ( NEWLINE )* p= packageDeclaration NEWLINE ( NEWLINE | importDeclaration )* ( NEWLINE | (obj= objectDeclaration ) | (rel= relationshipDefinition ) )+ ;
    public final MandaraxParser.compilationUnit_return compilationUnit() throws RecognitionException {
        MandaraxParser.compilationUnit_return retval = new MandaraxParser.compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NEWLINE1=null;
        Token NEWLINE2=null;
        Token NEWLINE3=null;
        Token NEWLINE5=null;
        MandaraxParser.packageDeclaration_return p = null;

        MandaraxParser.objectDeclaration_return obj = null;

        MandaraxParser.relationshipDefinition_return rel = null;

        MandaraxParser.importDeclaration_return importDeclaration4 = null;


        CommonTree NEWLINE1_tree=null;
        CommonTree NEWLINE2_tree=null;
        CommonTree NEWLINE3_tree=null;
        CommonTree NEWLINE5_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:77:5: ( ( NEWLINE )* p= packageDeclaration NEWLINE ( NEWLINE | importDeclaration )* ( NEWLINE | (obj= objectDeclaration ) | (rel= relationshipDefinition ) )+ )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:77:7: ( NEWLINE )* p= packageDeclaration NEWLINE ( NEWLINE | importDeclaration )* ( NEWLINE | (obj= objectDeclaration ) | (rel= relationshipDefinition ) )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:77:7: ( NEWLINE )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==NEWLINE) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:0:0: NEWLINE
            	    {
            	    NEWLINE1=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_compilationUnit71); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NEWLINE1_tree = (CommonTree)adaptor.create(NEWLINE1);
            	    adaptor.addChild(root_0, NEWLINE1_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            pushFollow(FOLLOW_packageDeclaration_in_compilationUnit78);
            p=packageDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p.getTree());
            NEWLINE2=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_compilationUnit80); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NEWLINE2_tree = (CommonTree)adaptor.create(NEWLINE2);
            adaptor.addChild(root_0, NEWLINE2_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:77:47: ( NEWLINE | importDeclaration )*
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==NEWLINE) ) {
                    int LA2_1 = input.LA(2);

                    if ( (synpred2_Mandarax()) ) {
                        alt2=1;
                    }


                }
                else if ( (LA2_0==24) ) {
                    alt2=2;
                }


                switch (alt2) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:77:48: NEWLINE
            	    {
            	    NEWLINE3=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_compilationUnit83); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NEWLINE3_tree = (CommonTree)adaptor.create(NEWLINE3);
            	    adaptor.addChild(root_0, NEWLINE3_tree);
            	    }

            	    }
            	    break;
            	case 2 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:77:56: importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit85);
            	    importDeclaration4=importDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, importDeclaration4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              retval.value = new CompilationUnit(pos(p.value),context);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:78:5: ( NEWLINE | (obj= objectDeclaration ) | (rel= relationshipDefinition ) )+
            int cnt3=0;
            loop3:
            do {
                int alt3=4;
                switch ( input.LA(1) ) {
                case NEWLINE:
                    {
                    int LA3_2 = input.LA(2);

                    if ( (synpred4_Mandarax()) ) {
                        alt3=1;
                    }
                    else if ( (synpred6_Mandarax()) ) {
                        alt3=3;
                    }


                    }
                    break;
                case Identifier:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                    {
                    alt3=2;
                    }
                    break;
                case 32:
                case 34:
                case 35:
                    {
                    alt3=3;
                    }
                    break;

                }

                switch (alt3) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:78:6: NEWLINE
            	    {
            	    NEWLINE5=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_compilationUnit97); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NEWLINE5_tree = (CommonTree)adaptor.create(NEWLINE5);
            	    adaptor.addChild(root_0, NEWLINE5_tree);
            	    }

            	    }
            	    break;
            	case 2 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:78:16: (obj= objectDeclaration )
            	    {
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:78:16: (obj= objectDeclaration )
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:78:17: obj= objectDeclaration
            	    {
            	    pushFollow(FOLLOW_objectDeclaration_in_compilationUnit106);
            	    obj=objectDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, obj.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.add(obj.value);
            	    }

            	    }


            	    }
            	    break;
            	case 3 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:78:69: (rel= relationshipDefinition )
            	    {
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:78:69: (rel= relationshipDefinition )
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:78:70: rel= relationshipDefinition
            	    {
            	    pushFollow(FOLLOW_relationshipDefinition_in_compilationUnit118);
            	    rel=relationshipDefinition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rel.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.add(rel.value);
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt3 >= 1 ) break loop3;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(3, input);
                        throw eee;
                }
                cnt3++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

    public static class importDeclaration_return extends ParserRuleReturnScope {
        public ImportDeclaration value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:82:1: importDeclaration returns [ImportDeclaration value] : i= 'import' ( (s= 'static' )? ) (n= qualifiedName2 ) (w= '.' '*' )? ';' ;
    public final MandaraxParser.importDeclaration_return importDeclaration() throws RecognitionException {
        MandaraxParser.importDeclaration_return retval = new MandaraxParser.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token w=null;
        Token char_literal6=null;
        Token char_literal7=null;
        MandaraxParser.qualifiedName2_return n = null;


        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree w_tree=null;
        CommonTree char_literal6_tree=null;
        CommonTree char_literal7_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:83:5: (i= 'import' ( (s= 'static' )? ) (n= qualifiedName2 ) (w= '.' '*' )? ';' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:83:9: i= 'import' ( (s= 'static' )? ) (n= qualifiedName2 ) (w= '.' '*' )? ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            i=(Token)match(input,24,FOLLOW_24_in_importDeclaration156); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:83:20: ( (s= 'static' )? )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:83:21: (s= 'static' )?
            {
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:83:23: (s= 'static' )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==25) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:0:0: s= 'static'
                    {
                    s=(Token)match(input,25,FOLLOW_25_in_importDeclaration163); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    s_tree = (CommonTree)adaptor.create(s);
                    adaptor.addChild(root_0, s_tree);
                    }

                    }
                    break;

            }


            }

            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:83:36: (n= qualifiedName2 )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:83:37: n= qualifiedName2
            {
            pushFollow(FOLLOW_qualifiedName2_in_importDeclaration170);
            n=qualifiedName2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, n.getTree());

            }

            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:83:55: (w= '.' '*' )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==26) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:83:56: w= '.' '*'
                    {
                    w=(Token)match(input,26,FOLLOW_26_in_importDeclaration176); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    w_tree = (CommonTree)adaptor.create(w);
                    adaptor.addChild(root_0, w_tree);
                    }
                    char_literal6=(Token)match(input,27,FOLLOW_27_in_importDeclaration178); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal6_tree = (CommonTree)adaptor.create(char_literal6);
                    adaptor.addChild(root_0, char_literal6_tree);
                    }

                    }
                    break;

            }

            char_literal7=(Token)match(input,28,FOLLOW_28_in_importDeclaration182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal7_tree = (CommonTree)adaptor.create(char_literal7);
            adaptor.addChild(root_0, char_literal7_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new ImportDeclaration(pos(i),context,n.value,s!=null,w!=null);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        public PackageDeclaration value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDeclaration"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:86:1: packageDeclaration returns [PackageDeclaration value] : p= 'package' (n= qualifiedName2 ) ';' ;
    public final MandaraxParser.packageDeclaration_return packageDeclaration() throws RecognitionException {
        MandaraxParser.packageDeclaration_return retval = new MandaraxParser.packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token p=null;
        Token char_literal8=null;
        MandaraxParser.qualifiedName2_return n = null;


        CommonTree p_tree=null;
        CommonTree char_literal8_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:87:5: (p= 'package' (n= qualifiedName2 ) ';' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:87:8: p= 'package' (n= qualifiedName2 ) ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            p=(Token)match(input,29,FOLLOW_29_in_packageDeclaration214); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            p_tree = (CommonTree)adaptor.create(p);
            adaptor.addChild(root_0, p_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:87:20: (n= qualifiedName2 )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:87:21: n= qualifiedName2
            {
            pushFollow(FOLLOW_qualifiedName2_in_packageDeclaration219);
            n=qualifiedName2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, n.getTree());

            }

            char_literal8=(Token)match(input,28,FOLLOW_28_in_packageDeclaration222); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal8_tree = (CommonTree)adaptor.create(char_literal8);
            adaptor.addChild(root_0, char_literal8_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new PackageDeclaration(pos(p),context,n.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class rule_return extends ParserRuleReturnScope {
        public Rule value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:90:1: rule returns [Rule value] : (a= annotationList )? id= Identifier ':' (body= conjunction )? '->' concl= functionInvocation ';' ;
    public final MandaraxParser.rule_return rule() throws RecognitionException {
        MandaraxParser.rule_return retval = new MandaraxParser.rule_return();
        retval.start = input.LT(1);
        int rule_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;
        Token char_literal9=null;
        Token string_literal10=null;
        Token char_literal11=null;
        MandaraxParser.annotationList_return a = null;

        MandaraxParser.conjunction_return body = null;

        MandaraxParser.functionInvocation_return concl = null;


        CommonTree id_tree=null;
        CommonTree char_literal9_tree=null;
        CommonTree string_literal10_tree=null;
        CommonTree char_literal11_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:91:5: ( (a= annotationList )? id= Identifier ':' (body= conjunction )? '->' concl= functionInvocation ';' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:91:9: (a= annotationList )? id= Identifier ':' (body= conjunction )? '->' concl= functionInvocation ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:91:9: (a= annotationList )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==NEWLINE||LA6_0==32) ) {
                alt6=1;
            }
            else if ( (LA6_0==Identifier) ) {
                int LA6_2 = input.LA(2);

                if ( (synpred9_Mandarax()) ) {
                    alt6=1;
                }
            }
            switch (alt6) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:91:10: a= annotationList
                    {
                    pushFollow(FOLLOW_annotationList_in_rule258);
                    a=annotationList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

                    }
                    break;

            }

            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_rule266); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            id_tree = (CommonTree)adaptor.create(id);
            adaptor.addChild(root_0, id_tree);
            }
            char_literal9=(Token)match(input,30,FOLLOW_30_in_rule268); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal9_tree = (CommonTree)adaptor.create(char_literal9);
            adaptor.addChild(root_0, char_literal9_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:91:51: (body= conjunction )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( ((LA7_0>=Identifier && LA7_0<=DecimalLiteral)||LA7_0==36||(LA7_0>=55 && LA7_0<=56)||LA7_0==68||(LA7_0>=71 && LA7_0<=74)) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:91:52: body= conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_rule275);
                    body=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());

                    }
                    break;

            }

            string_literal10=(Token)match(input,31,FOLLOW_31_in_rule280); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal10_tree = (CommonTree)adaptor.create(string_literal10);
            adaptor.addChild(root_0, string_literal10_tree);
            }
            pushFollow(FOLLOW_functionInvocation_in_rule286);
            concl=functionInvocation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concl.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new Rule(pos(id),context,id.getText(),body==null?null:body.value,(FunctionInvocation)concl.value);
            }
            if ( state.backtracking==0 ) {
              retval.value.addAnnotations(a==null?new ArrayList<Annotation>():a.values);
            }
            char_literal11=(Token)match(input,28,FOLLOW_28_in_rule300); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal11_tree = (CommonTree)adaptor.create(char_literal11);
            adaptor.addChild(root_0, char_literal11_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, rule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rule"

    public static class annotation_return extends ParserRuleReturnScope {
        public Annotation value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:96:1: annotation returns [Annotation value] : '@' key= qualifiedName2 '=' val= StringLiteral ;
    public final MandaraxParser.annotation_return annotation() throws RecognitionException {
        MandaraxParser.annotation_return retval = new MandaraxParser.annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token val=null;
        Token char_literal12=null;
        Token char_literal13=null;
        MandaraxParser.qualifiedName2_return key = null;


        CommonTree val_tree=null;
        CommonTree char_literal12_tree=null;
        CommonTree char_literal13_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:97:5: ( '@' key= qualifiedName2 '=' val= StringLiteral )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:97:7: '@' key= qualifiedName2 '=' val= StringLiteral
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal12=(Token)match(input,32,FOLLOW_32_in_annotation325); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal12_tree = (CommonTree)adaptor.create(char_literal12);
            adaptor.addChild(root_0, char_literal12_tree);
            }
            pushFollow(FOLLOW_qualifiedName2_in_annotation331);
            key=qualifiedName2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, key.getTree());
            char_literal13=(Token)match(input,33,FOLLOW_33_in_annotation333); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal13_tree = (CommonTree)adaptor.create(char_literal13);
            adaptor.addChild(root_0, char_literal13_tree);
            }
            val=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_annotation339); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            val_tree = (CommonTree)adaptor.create(val);
            adaptor.addChild(root_0, val_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new Annotation(pos(key.start),context,key.value,val.getText().substring(1,val.getText().length()-1));
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class objectDeclaration_return extends ParserRuleReturnScope {
        public ObjectDeclaration value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectDeclaration"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:100:1: objectDeclaration returns [ObjectDeclaration value] : t= type i= Identifier '=' x= expression ';' ;
    public final MandaraxParser.objectDeclaration_return objectDeclaration() throws RecognitionException {
        MandaraxParser.objectDeclaration_return retval = new MandaraxParser.objectDeclaration_return();
        retval.start = input.LT(1);
        int objectDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token char_literal14=null;
        Token char_literal15=null;
        MandaraxParser.type_return t = null;

        MandaraxParser.expression_return x = null;


        CommonTree i_tree=null;
        CommonTree char_literal14_tree=null;
        CommonTree char_literal15_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:101:5: (t= type i= Identifier '=' x= expression ';' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:101:7: t= type i= Identifier '=' x= expression ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_objectDeclaration368);
            t=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_objectDeclaration372); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            char_literal14=(Token)match(input,33,FOLLOW_33_in_objectDeclaration374); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal14_tree = (CommonTree)adaptor.create(char_literal14);
            adaptor.addChild(root_0, char_literal14_tree);
            }
            pushFollow(FOLLOW_expression_in_objectDeclaration380);
            x=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, x.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new ObjectDeclaration(pos(t.start),context,t.value,i.getText(),x.value);
            }
            char_literal15=(Token)match(input,28,FOLLOW_28_in_objectDeclaration383); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal15_tree = (CommonTree)adaptor.create(char_literal15);
            adaptor.addChild(root_0, char_literal15_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, objectDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "objectDeclaration"

    public static class annotationList_return extends ParserRuleReturnScope {
        public List<Annotation> values;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationList"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:105:1: annotationList returns [List<Annotation> values] : ( NEWLINE | (a= annotation ) )* ;
    public final MandaraxParser.annotationList_return annotationList() throws RecognitionException {
        MandaraxParser.annotationList_return retval = new MandaraxParser.annotationList_return();
        retval.start = input.LT(1);
        int annotationList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token NEWLINE16=null;
        MandaraxParser.annotation_return a = null;


        CommonTree NEWLINE16_tree=null;

        retval.values = new ArrayList<Annotation>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:107:1: ( ( NEWLINE | (a= annotation ) )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:107:3: ( NEWLINE | (a= annotation ) )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:107:3: ( NEWLINE | (a= annotation ) )*
            loop8:
            do {
                int alt8=3;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==NEWLINE) ) {
                    alt8=1;
                }
                else if ( (LA8_0==32) ) {
                    alt8=2;
                }


                switch (alt8) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:107:4: NEWLINE
            	    {
            	    NEWLINE16=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_annotationList417); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NEWLINE16_tree = (CommonTree)adaptor.create(NEWLINE16);
            	    adaptor.addChild(root_0, NEWLINE16_tree);
            	    }

            	    }
            	    break;
            	case 2 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:107:12: (a= annotation )
            	    {
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:107:12: (a= annotation )
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:107:13: a= annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotationList424);
            	    a=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.values.add(a.value);
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, annotationList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationList"

    public static class relationshipDefinition_return extends ParserRuleReturnScope {
        public RelationshipDefinition value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationshipDefinition"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:111:1: relationshipDefinition returns [RelationshipDefinition value] : (a= annotationList )? q= ( 'relationship' | 'rel' ) ti= Identifier '(' tp= variableDeclarationList ')' ( 'extends' supers= qualifiedNameList2 )? 'queries' queries= functionDeclarationList ( NEWLINE )* '{' ( NEWLINE | r= rule )+ '}' ;
    public final MandaraxParser.relationshipDefinition_return relationshipDefinition() throws RecognitionException {
        MandaraxParser.relationshipDefinition_return retval = new MandaraxParser.relationshipDefinition_return();
        retval.start = input.LT(1);
        int relationshipDefinition_StartIndex = input.index();
        CommonTree root_0 = null;

        Token q=null;
        Token ti=null;
        Token char_literal17=null;
        Token char_literal18=null;
        Token string_literal19=null;
        Token string_literal20=null;
        Token NEWLINE21=null;
        Token char_literal22=null;
        Token NEWLINE23=null;
        Token char_literal24=null;
        MandaraxParser.annotationList_return a = null;

        MandaraxParser.variableDeclarationList_return tp = null;

        MandaraxParser.qualifiedNameList2_return supers = null;

        MandaraxParser.functionDeclarationList_return queries = null;

        MandaraxParser.rule_return r = null;


        CommonTree q_tree=null;
        CommonTree ti_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal18_tree=null;
        CommonTree string_literal19_tree=null;
        CommonTree string_literal20_tree=null;
        CommonTree NEWLINE21_tree=null;
        CommonTree char_literal22_tree=null;
        CommonTree NEWLINE23_tree=null;
        CommonTree char_literal24_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:112:5: ( (a= annotationList )? q= ( 'relationship' | 'rel' ) ti= Identifier '(' tp= variableDeclarationList ')' ( 'extends' supers= qualifiedNameList2 )? 'queries' queries= functionDeclarationList ( NEWLINE )* '{' ( NEWLINE | r= rule )+ '}' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:112:7: (a= annotationList )? q= ( 'relationship' | 'rel' ) ti= Identifier '(' tp= variableDeclarationList ')' ( 'extends' supers= qualifiedNameList2 )? 'queries' queries= functionDeclarationList ( NEWLINE )* '{' ( NEWLINE | r= rule )+ '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:112:7: (a= annotationList )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==NEWLINE||LA9_0==32) ) {
                alt9=1;
            }
            else if ( ((LA9_0>=34 && LA9_0<=35)) ) {
                int LA9_2 = input.LA(2);

                if ( (synpred13_Mandarax()) ) {
                    alt9=1;
                }
            }
            switch (alt9) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:112:8: a= annotationList
                    {
                    pushFollow(FOLLOW_annotationList_in_relationshipDefinition462);
                    a=annotationList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());

                    }
                    break;

            }

            q=(Token)input.LT(1);
            if ( (input.LA(1)>=34 && input.LA(1)<=35) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(q));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            ti=(Token)match(input,Identifier,FOLLOW_Identifier_in_relationshipDefinition476); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ti_tree = (CommonTree)adaptor.create(ti);
            adaptor.addChild(root_0, ti_tree);
            }
            char_literal17=(Token)match(input,36,FOLLOW_36_in_relationshipDefinition478); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal17_tree = (CommonTree)adaptor.create(char_literal17);
            adaptor.addChild(root_0, char_literal17_tree);
            }
            pushFollow(FOLLOW_variableDeclarationList_in_relationshipDefinition484);
            tp=variableDeclarationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tp.getTree());
            char_literal18=(Token)match(input,37,FOLLOW_37_in_relationshipDefinition486); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal18_tree = (CommonTree)adaptor.create(char_literal18);
            adaptor.addChild(root_0, char_literal18_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:112:105: ( 'extends' supers= qualifiedNameList2 )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==38) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:112:106: 'extends' supers= qualifiedNameList2
                    {
                    string_literal19=(Token)match(input,38,FOLLOW_38_in_relationshipDefinition489); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal19_tree = (CommonTree)adaptor.create(string_literal19);
                    adaptor.addChild(root_0, string_literal19_tree);
                    }
                    pushFollow(FOLLOW_qualifiedNameList2_in_relationshipDefinition495);
                    supers=qualifiedNameList2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, supers.getTree());

                    }
                    break;

            }

            string_literal20=(Token)match(input,39,FOLLOW_39_in_relationshipDefinition504); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal20_tree = (CommonTree)adaptor.create(string_literal20);
            adaptor.addChild(root_0, string_literal20_tree);
            }
            pushFollow(FOLLOW_functionDeclarationList_in_relationshipDefinition510);
            queries=functionDeclarationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, queries.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new RelationshipDefinition(pos(q),context,ti.getText(),tp.value,supers==null?new ArrayList<String>():supers.value,queries.values);
            }
            if ( state.backtracking==0 ) {
              retval.value.addAnnotations(a==null?new ArrayList<Annotation>():a.values);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:116:5: ( NEWLINE )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==NEWLINE) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:0:0: NEWLINE
            	    {
            	    NEWLINE21=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_relationshipDefinition528); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NEWLINE21_tree = (CommonTree)adaptor.create(NEWLINE21);
            	    adaptor.addChild(root_0, NEWLINE21_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            char_literal22=(Token)match(input,40,FOLLOW_40_in_relationshipDefinition531); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal22_tree = (CommonTree)adaptor.create(char_literal22);
            adaptor.addChild(root_0, char_literal22_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:116:18: ( NEWLINE | r= rule )+
            int cnt12=0;
            loop12:
            do {
                int alt12=3;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==NEWLINE) ) {
                    int LA12_2 = input.LA(2);

                    if ( (synpred17_Mandarax()) ) {
                        alt12=1;
                    }
                    else if ( (synpred18_Mandarax()) ) {
                        alt12=2;
                    }


                }
                else if ( (LA12_0==Identifier||LA12_0==32) ) {
                    alt12=2;
                }


                switch (alt12) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:116:19: NEWLINE
            	    {
            	    NEWLINE23=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_relationshipDefinition534); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NEWLINE23_tree = (CommonTree)adaptor.create(NEWLINE23);
            	    adaptor.addChild(root_0, NEWLINE23_tree);
            	    }

            	    }
            	    break;
            	case 2 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:116:28: r= rule
            	    {
            	    pushFollow(FOLLOW_rule_in_relationshipDefinition541);
            	    r=rule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, r.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.addRule(r.value);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt12 >= 1 ) break loop12;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(12, input);
                        throw eee;
                }
                cnt12++;
            } while (true);

            char_literal24=(Token)match(input,41,FOLLOW_41_in_relationshipDefinition546); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal24_tree = (CommonTree)adaptor.create(char_literal24);
            adaptor.addChild(root_0, char_literal24_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, relationshipDefinition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationshipDefinition"

    public static class variableDeclaration_return extends ParserRuleReturnScope {
        public VariableDeclaration value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaration"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:119:1: variableDeclaration returns [VariableDeclaration value] : t= type n= Identifier ;
    public final MandaraxParser.variableDeclaration_return variableDeclaration() throws RecognitionException {
        MandaraxParser.variableDeclaration_return retval = new MandaraxParser.variableDeclaration_return();
        retval.start = input.LT(1);
        int variableDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token n=null;
        MandaraxParser.type_return t = null;


        CommonTree n_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:120:5: (t= type n= Identifier )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:120:7: t= type n= Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_variableDeclaration579);
            t=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
            n=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration585); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            n_tree = (CommonTree)adaptor.create(n);
            adaptor.addChild(root_0, n_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new VariableDeclaration(pos(t.start),context,t.value,n.getText());
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, variableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaration"

    public static class variableDeclarationList_return extends ParserRuleReturnScope {
        public List<VariableDeclaration> value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarationList"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:123:1: variableDeclarationList returns [List<VariableDeclaration> value] : part1= variableDeclaration ( ',' part2= variableDeclaration )* ;
    public final MandaraxParser.variableDeclarationList_return variableDeclarationList() throws RecognitionException {
        MandaraxParser.variableDeclarationList_return retval = new MandaraxParser.variableDeclarationList_return();
        retval.start = input.LT(1);
        int variableDeclarationList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal25=null;
        MandaraxParser.variableDeclaration_return part1 = null;

        MandaraxParser.variableDeclaration_return part2 = null;


        CommonTree char_literal25_tree=null;

        retval.value = new ArrayList<VariableDeclaration>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:125:5: (part1= variableDeclaration ( ',' part2= variableDeclaration )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:125:7: part1= variableDeclaration ( ',' part2= variableDeclaration )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_variableDeclaration_in_variableDeclarationList625);
            part1=variableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value.add(part1.value);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:125:62: ( ',' part2= variableDeclaration )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==42) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:125:63: ',' part2= variableDeclaration
            	    {
            	    char_literal25=(Token)match(input,42,FOLLOW_42_in_variableDeclarationList630); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal25_tree = (CommonTree)adaptor.create(char_literal25);
            	    adaptor.addChild(root_0, char_literal25_tree);
            	    }
            	    pushFollow(FOLLOW_variableDeclaration_in_variableDeclarationList636);
            	    part2=variableDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.add(part2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, variableDeclarationList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarationList"

    public static class functionDeclaration_return extends ParserRuleReturnScope {
        public FunctionDeclaration value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionDeclaration"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:128:1: functionDeclaration returns [FunctionDeclaration value] : v= visibility n= Identifier '(' p= nameList ')' ;
    public final MandaraxParser.functionDeclaration_return functionDeclaration() throws RecognitionException {
        MandaraxParser.functionDeclaration_return retval = new MandaraxParser.functionDeclaration_return();
        retval.start = input.LT(1);
        int functionDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token n=null;
        Token char_literal26=null;
        Token char_literal27=null;
        MandaraxParser.visibility_return v = null;

        MandaraxParser.nameList_return p = null;


        CommonTree n_tree=null;
        CommonTree char_literal26_tree=null;
        CommonTree char_literal27_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:129:5: (v= visibility n= Identifier '(' p= nameList ')' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:129:7: v= visibility n= Identifier '(' p= nameList ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_visibility_in_functionDeclaration674);
            v=visibility();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, v.getTree());
            n=(Token)match(input,Identifier,FOLLOW_Identifier_in_functionDeclaration680); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            n_tree = (CommonTree)adaptor.create(n);
            adaptor.addChild(root_0, n_tree);
            }
            char_literal26=(Token)match(input,36,FOLLOW_36_in_functionDeclaration682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal26_tree = (CommonTree)adaptor.create(char_literal26);
            adaptor.addChild(root_0, char_literal26_tree);
            }
            pushFollow(FOLLOW_nameList_in_functionDeclaration688);
            p=nameList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p.getTree());
            char_literal27=(Token)match(input,37,FOLLOW_37_in_functionDeclaration690); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal27_tree = (CommonTree)adaptor.create(char_literal27);
            adaptor.addChild(root_0, char_literal27_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new FunctionDeclaration(pos(n),context,v.value,n.getText(),p.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, functionDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "functionDeclaration"

    public static class functionDeclarationList_return extends ParserRuleReturnScope {
        public List<FunctionDeclaration> values;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionDeclarationList"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:132:1: functionDeclarationList returns [List<FunctionDeclaration> values] : part1= functionDeclaration ( ',' part2= functionDeclaration )* ;
    public final MandaraxParser.functionDeclarationList_return functionDeclarationList() throws RecognitionException {
        MandaraxParser.functionDeclarationList_return retval = new MandaraxParser.functionDeclarationList_return();
        retval.start = input.LT(1);
        int functionDeclarationList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal28=null;
        MandaraxParser.functionDeclaration_return part1 = null;

        MandaraxParser.functionDeclaration_return part2 = null;


        CommonTree char_literal28_tree=null;

        retval.values = new ArrayList<FunctionDeclaration>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:134:5: (part1= functionDeclaration ( ',' part2= functionDeclaration )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:134:7: part1= functionDeclaration ( ',' part2= functionDeclaration )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_functionDeclaration_in_functionDeclarationList729);
            part1=functionDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.values.add(part1.value);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:134:63: ( ',' part2= functionDeclaration )*
            loop14:
            do {
                int alt14=2;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==42) ) {
                    alt14=1;
                }


                switch (alt14) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:134:64: ',' part2= functionDeclaration
            	    {
            	    char_literal28=(Token)match(input,42,FOLLOW_42_in_functionDeclarationList734); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal28_tree = (CommonTree)adaptor.create(char_literal28);
            	    adaptor.addChild(root_0, char_literal28_tree);
            	    }
            	    pushFollow(FOLLOW_functionDeclaration_in_functionDeclarationList740);
            	    part2=functionDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.values.add(part2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, functionDeclarationList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "functionDeclarationList"

    public static class visibility_return extends ParserRuleReturnScope {
        public Visibility value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "visibility"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:137:1: visibility returns [Visibility value] : ( 'public' | ( 'private' ) )? ;
    public final MandaraxParser.visibility_return visibility() throws RecognitionException {
        MandaraxParser.visibility_return retval = new MandaraxParser.visibility_return();
        retval.start = input.LT(1);
        int visibility_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal29=null;
        Token string_literal30=null;

        CommonTree string_literal29_tree=null;
        CommonTree string_literal30_tree=null;

        retval.value = Visibility.PUBLIC;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:139:6: ( ( 'public' | ( 'private' ) )? )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:139:8: ( 'public' | ( 'private' ) )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:139:8: ( 'public' | ( 'private' ) )?
            int alt15=3;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==43) ) {
                alt15=1;
            }
            else if ( (LA15_0==44) ) {
                alt15=2;
            }
            switch (alt15) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:139:9: 'public'
                    {
                    string_literal29=(Token)match(input,43,FOLLOW_43_in_visibility772); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal29_tree = (CommonTree)adaptor.create(string_literal29);
                    adaptor.addChild(root_0, string_literal29_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:139:20: ( 'private' )
                    {
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:139:20: ( 'private' )
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:139:21: 'private'
                    {
                    string_literal30=(Token)match(input,44,FOLLOW_44_in_visibility777); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal30_tree = (CommonTree)adaptor.create(string_literal30);
                    adaptor.addChild(root_0, string_literal30_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = Visibility.PRIVATE;
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, visibility_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "visibility"

    public static class expression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:143:1: expression returns [Expression value] : r= conditionalExpression ;
    public final MandaraxParser.expression_return expression() throws RecognitionException {
        MandaraxParser.expression_return retval = new MandaraxParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        CommonTree root_0 = null;

        MandaraxParser.conditionalExpression_return r = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:144:5: (r= conditionalExpression )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:144:9: r= conditionalExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conditionalExpression_in_expression824);
            r=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, r.getTree());
            if ( state.backtracking==0 ) {
              retval.value =r.value;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class constantDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclarator"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:147:1: constantDeclarator : Identifier ;
    public final MandaraxParser.constantDeclarator_return constantDeclarator() throws RecognitionException {
        MandaraxParser.constantDeclarator_return retval = new MandaraxParser.constantDeclarator_return();
        retval.start = input.LT(1);
        int constantDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token Identifier31=null;

        CommonTree Identifier31_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:148:5: ( Identifier )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:148:9: Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            Identifier31=(Token)match(input,Identifier,FOLLOW_Identifier_in_constantDeclarator845); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier31_tree = (CommonTree)adaptor.create(Identifier31);
            adaptor.addChild(root_0, Identifier31_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, constantDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclarator"

    public static class typeName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeName"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:151:1: typeName : qualifiedName ;
    public final MandaraxParser.typeName_return typeName() throws RecognitionException {
        MandaraxParser.typeName_return retval = new MandaraxParser.typeName_return();
        retval.start = input.LT(1);
        int typeName_StartIndex = input.index();
        CommonTree root_0 = null;

        MandaraxParser.qualifiedName_return qualifiedName32 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:152:5: ( qualifiedName )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:152:9: qualifiedName
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_typeName869);
            qualifiedName32=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName32.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, typeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeName"

    public static class type_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:155:1: type returns [String value] : (i= classOrInterfaceType ( '[' ']' )* | j= primitiveType ( '[' ']' )* );
    public final MandaraxParser.type_return type() throws RecognitionException {
        MandaraxParser.type_return retval = new MandaraxParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal33=null;
        Token char_literal34=null;
        Token char_literal35=null;
        Token char_literal36=null;
        MandaraxParser.classOrInterfaceType_return i = null;

        MandaraxParser.primitiveType_return j = null;


        CommonTree char_literal33_tree=null;
        CommonTree char_literal34_tree=null;
        CommonTree char_literal35_tree=null;
        CommonTree char_literal36_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:156:2: (i= classOrInterfaceType ( '[' ']' )* | j= primitiveType ( '[' ']' )* )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==Identifier) ) {
                alt18=1;
            }
            else if ( ((LA18_0>=47 && LA18_0<=54)) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:156:4: i= classOrInterfaceType ( '[' ']' )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceType_in_type891);
                    i=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, i.getTree());
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:156:29: ( '[' ']' )*
                    loop16:
                    do {
                        int alt16=2;
                        int LA16_0 = input.LA(1);

                        if ( (LA16_0==45) ) {
                            alt16=1;
                        }


                        switch (alt16) {
                    	case 1 :
                    	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:156:30: '[' ']'
                    	    {
                    	    char_literal33=(Token)match(input,45,FOLLOW_45_in_type894); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal33_tree = (CommonTree)adaptor.create(char_literal33);
                    	    adaptor.addChild(root_0, char_literal33_tree);
                    	    }
                    	    char_literal34=(Token)match(input,46,FOLLOW_46_in_type896); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal34_tree = (CommonTree)adaptor.create(char_literal34);
                    	    adaptor.addChild(root_0, char_literal34_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop16;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                      retval.value = i.value;
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:157:4: j= primitiveType ( '[' ']' )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_type909);
                    j=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, j.getTree());
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:157:22: ( '[' ']' )*
                    loop17:
                    do {
                        int alt17=2;
                        int LA17_0 = input.LA(1);

                        if ( (LA17_0==45) ) {
                            alt17=1;
                        }


                        switch (alt17) {
                    	case 1 :
                    	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:157:23: '[' ']'
                    	    {
                    	    char_literal35=(Token)match(input,45,FOLLOW_45_in_type912); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal35_tree = (CommonTree)adaptor.create(char_literal35);
                    	    adaptor.addChild(root_0, char_literal35_tree);
                    	    }
                    	    char_literal36=(Token)match(input,46,FOLLOW_46_in_type914); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal36_tree = (CommonTree)adaptor.create(char_literal36);
                    	    adaptor.addChild(root_0, char_literal36_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop17;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                      retval.value = j.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class classOrInterfaceType_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceType"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:160:1: classOrInterfaceType returns [String value] : i= Identifier ( '.' i= Identifier )* ;
    public final MandaraxParser.classOrInterfaceType_return classOrInterfaceType() throws RecognitionException {
        MandaraxParser.classOrInterfaceType_return retval = new MandaraxParser.classOrInterfaceType_return();
        retval.start = input.LT(1);
        int classOrInterfaceType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token char_literal37=null;

        CommonTree i_tree=null;
        CommonTree char_literal37_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:161:2: (i= Identifier ( '.' i= Identifier )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:161:4: i= Identifier ( '.' i= Identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_classOrInterfaceType938); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value =i.getText();
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:161:41: ( '.' i= Identifier )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==26) ) {
                    alt19=1;
                }


                switch (alt19) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:161:42: '.' i= Identifier
            	    {
            	    char_literal37=(Token)match(input,26,FOLLOW_26_in_classOrInterfaceType943); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal37_tree = (CommonTree)adaptor.create(char_literal37);
            	    adaptor.addChild(root_0, char_literal37_tree);
            	    }
            	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_classOrInterfaceType949); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    i_tree = (CommonTree)adaptor.create(i);
            	    adaptor.addChild(root_0, i_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value =retval.value+'.'+i.getText();
            	    }

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, classOrInterfaceType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceType"

    public static class primitiveType_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:165:1: primitiveType returns [String value] : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
    public final MandaraxParser.primitiveType_return primitiveType() throws RecognitionException {
        MandaraxParser.primitiveType_return retval = new MandaraxParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal38=null;
        Token string_literal39=null;
        Token string_literal40=null;
        Token string_literal41=null;
        Token string_literal42=null;
        Token string_literal43=null;
        Token string_literal44=null;
        Token string_literal45=null;

        CommonTree string_literal38_tree=null;
        CommonTree string_literal39_tree=null;
        CommonTree string_literal40_tree=null;
        CommonTree string_literal41_tree=null;
        CommonTree string_literal42_tree=null;
        CommonTree string_literal43_tree=null;
        CommonTree string_literal44_tree=null;
        CommonTree string_literal45_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:166:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
            int alt20=8;
            switch ( input.LA(1) ) {
            case 47:
                {
                alt20=1;
                }
                break;
            case 48:
                {
                alt20=2;
                }
                break;
            case 49:
                {
                alt20=3;
                }
                break;
            case 50:
                {
                alt20=4;
                }
                break;
            case 51:
                {
                alt20=5;
                }
                break;
            case 52:
                {
                alt20=6;
                }
                break;
            case 53:
                {
                alt20=7;
                }
                break;
            case 54:
                {
                alt20=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }

            switch (alt20) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:166:9: 'boolean'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal38=(Token)match(input,47,FOLLOW_47_in_primitiveType977); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal38_tree = (CommonTree)adaptor.create(string_literal38);
                    adaptor.addChild(root_0, string_literal38_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="boolean";
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:167:9: 'char'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal39=(Token)match(input,48,FOLLOW_48_in_primitiveType989); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal39_tree = (CommonTree)adaptor.create(string_literal39);
                    adaptor.addChild(root_0, string_literal39_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="char";
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:168:9: 'byte'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal40=(Token)match(input,49,FOLLOW_49_in_primitiveType1001); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal40_tree = (CommonTree)adaptor.create(string_literal40);
                    adaptor.addChild(root_0, string_literal40_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="byte";
                    }

                    }
                    break;
                case 4 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:169:9: 'short'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal41=(Token)match(input,50,FOLLOW_50_in_primitiveType1013); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal41_tree = (CommonTree)adaptor.create(string_literal41);
                    adaptor.addChild(root_0, string_literal41_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="short";
                    }

                    }
                    break;
                case 5 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:170:9: 'int'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal42=(Token)match(input,51,FOLLOW_51_in_primitiveType1025); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal42_tree = (CommonTree)adaptor.create(string_literal42);
                    adaptor.addChild(root_0, string_literal42_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="int";
                    }

                    }
                    break;
                case 6 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:171:9: 'long'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal43=(Token)match(input,52,FOLLOW_52_in_primitiveType1037); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal43_tree = (CommonTree)adaptor.create(string_literal43);
                    adaptor.addChild(root_0, string_literal43_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="boolean";
                    }

                    }
                    break;
                case 7 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:172:9: 'float'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal44=(Token)match(input,53,FOLLOW_53_in_primitiveType1049); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal44_tree = (CommonTree)adaptor.create(string_literal44);
                    adaptor.addChild(root_0, string_literal44_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="long";
                    }

                    }
                    break;
                case 8 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:173:9: 'double'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal45=(Token)match(input,54,FOLLOW_54_in_primitiveType1061); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal45_tree = (CommonTree)adaptor.create(string_literal45);
                    adaptor.addChild(root_0, string_literal45_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="double";
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class qualifiedNameList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedNameList"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:176:1: qualifiedNameList : qualifiedName ( ',' qualifiedName )* ;
    public final MandaraxParser.qualifiedNameList_return qualifiedNameList() throws RecognitionException {
        MandaraxParser.qualifiedNameList_return retval = new MandaraxParser.qualifiedNameList_return();
        retval.start = input.LT(1);
        int qualifiedNameList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal47=null;
        MandaraxParser.qualifiedName_return qualifiedName46 = null;

        MandaraxParser.qualifiedName_return qualifiedName48 = null;


        CommonTree char_literal47_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:177:5: ( qualifiedName ( ',' qualifiedName )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:177:9: qualifiedName ( ',' qualifiedName )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList1087);
            qualifiedName46=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName46.getTree());
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:177:23: ( ',' qualifiedName )*
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( (LA21_0==42) ) {
                    alt21=1;
                }


                switch (alt21) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:177:24: ',' qualifiedName
            	    {
            	    char_literal47=(Token)match(input,42,FOLLOW_42_in_qualifiedNameList1090); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal47_tree = (CommonTree)adaptor.create(char_literal47);
            	    adaptor.addChild(root_0, char_literal47_tree);
            	    }
            	    pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList1092);
            	    qualifiedName48=qualifiedName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName48.getTree());

            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, qualifiedNameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedNameList"

    public static class qualifiedName_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedName"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:180:1: qualifiedName returns [Expression value] : i= Identifier ( '.' j= Identifier )* ;
    public final MandaraxParser.qualifiedName_return qualifiedName() throws RecognitionException {
        MandaraxParser.qualifiedName_return retval = new MandaraxParser.qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token j=null;
        Token char_literal49=null;

        CommonTree i_tree=null;
        CommonTree j_tree=null;
        CommonTree char_literal49_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:181:2: (i= Identifier ( '.' j= Identifier )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:181:4: i= Identifier ( '.' j= Identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName1116); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value =new Variable(pos(i),context,i.getText());
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:181:70: ( '.' j= Identifier )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==26) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:181:71: '.' j= Identifier
            	    {
            	    char_literal49=(Token)match(input,26,FOLLOW_26_in_qualifiedName1121); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal49_tree = (CommonTree)adaptor.create(char_literal49);
            	    adaptor.addChild(root_0, char_literal49_tree);
            	    }
            	    j=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName1127); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    j_tree = (CommonTree)adaptor.create(j);
            	    adaptor.addChild(root_0, j_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value =new MemberAccess(pos(i),context,retval.value,j.getText());
            	    }

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, qualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName"

    public static class qualifiedNameList2_return extends ParserRuleReturnScope {
        public List<String> value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedNameList2"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:184:1: qualifiedNameList2 returns [List<String> value] : i= qualifiedName2 ( ',' j= qualifiedName2 )* ;
    public final MandaraxParser.qualifiedNameList2_return qualifiedNameList2() throws RecognitionException {
        MandaraxParser.qualifiedNameList2_return retval = new MandaraxParser.qualifiedNameList2_return();
        retval.start = input.LT(1);
        int qualifiedNameList2_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal50=null;
        MandaraxParser.qualifiedName2_return i = null;

        MandaraxParser.qualifiedName2_return j = null;


        CommonTree char_literal50_tree=null;

        retval.value = new ArrayList<String>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:186:5: (i= qualifiedName2 ( ',' j= qualifiedName2 )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:186:9: i= qualifiedName2 ( ',' j= qualifiedName2 )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName2_in_qualifiedNameList21160);
            i=qualifiedName2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, i.getTree());
            if ( state.backtracking==0 ) {
              retval.value.add(i.value);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:186:51: ( ',' j= qualifiedName2 )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==42) ) {
                    alt23=1;
                }


                switch (alt23) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:186:52: ',' j= qualifiedName2
            	    {
            	    char_literal50=(Token)match(input,42,FOLLOW_42_in_qualifiedNameList21165); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal50_tree = (CommonTree)adaptor.create(char_literal50);
            	    adaptor.addChild(root_0, char_literal50_tree);
            	    }
            	    pushFollow(FOLLOW_qualifiedName2_in_qualifiedNameList21171);
            	    j=qualifiedName2();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, j.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.add(j.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, qualifiedNameList2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedNameList2"

    public static class qualifiedName2_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedName2"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:189:1: qualifiedName2 returns [String value] : i= Identifier ( '.' j= Identifier )* ;
    public final MandaraxParser.qualifiedName2_return qualifiedName2() throws RecognitionException {
        MandaraxParser.qualifiedName2_return retval = new MandaraxParser.qualifiedName2_return();
        retval.start = input.LT(1);
        int qualifiedName2_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token j=null;
        Token char_literal51=null;

        CommonTree i_tree=null;
        CommonTree j_tree=null;
        CommonTree char_literal51_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:190:2: (i= Identifier ( '.' j= Identifier )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:190:4: i= Identifier ( '.' j= Identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName21198); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value =i.getText();
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:190:41: ( '.' j= Identifier )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==26) ) {
                    int LA24_1 = input.LA(2);

                    if ( (LA24_1==Identifier) ) {
                        alt24=1;
                    }


                }


                switch (alt24) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:190:42: '.' j= Identifier
            	    {
            	    char_literal51=(Token)match(input,26,FOLLOW_26_in_qualifiedName21203); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal51_tree = (CommonTree)adaptor.create(char_literal51);
            	    adaptor.addChild(root_0, char_literal51_tree);
            	    }
            	    j=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName21209); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    j_tree = (CommonTree)adaptor.create(j);
            	    adaptor.addChild(root_0, j_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value =retval.value+'.'+j.getText();
            	    }

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, qualifiedName2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName2"

    public static class nameList_return extends ParserRuleReturnScope {
        public List<String> value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nameList"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:194:1: nameList returns [List<String> value] : (i= Identifier ( ',' j= Identifier )* )? ;
    public final MandaraxParser.nameList_return nameList() throws RecognitionException {
        MandaraxParser.nameList_return retval = new MandaraxParser.nameList_return();
        retval.start = input.LT(1);
        int nameList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token j=null;
        Token char_literal52=null;

        CommonTree i_tree=null;
        CommonTree j_tree=null;
        CommonTree char_literal52_tree=null;

        retval.value = new ArrayList<String>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:196:2: ( (i= Identifier ( ',' j= Identifier )* )? )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:196:4: (i= Identifier ( ',' j= Identifier )* )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:196:4: (i= Identifier ( ',' j= Identifier )* )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==Identifier) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:196:5: i= Identifier ( ',' j= Identifier )*
                    {
                    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_nameList1240); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i_tree = (CommonTree)adaptor.create(i);
                    adaptor.addChild(root_0, i_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.add(i.getText());
                    }
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:196:47: ( ',' j= Identifier )*
                    loop25:
                    do {
                        int alt25=2;
                        int LA25_0 = input.LA(1);

                        if ( (LA25_0==42) ) {
                            alt25=1;
                        }


                        switch (alt25) {
                    	case 1 :
                    	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:196:48: ',' j= Identifier
                    	    {
                    	    char_literal52=(Token)match(input,42,FOLLOW_42_in_nameList1245); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal52_tree = (CommonTree)adaptor.create(char_literal52);
                    	    adaptor.addChild(root_0, char_literal52_tree);
                    	    }
                    	    j=(Token)match(input,Identifier,FOLLOW_Identifier_in_nameList1251); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    j_tree = (CommonTree)adaptor.create(j);
                    	    adaptor.addChild(root_0, j_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      retval.value.add(j.getText());
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop25;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, nameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nameList"

    public static class literal_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:199:1: literal returns [Expression value] : (l1= integerLiteral | l4= StringLiteral | l5= booleanLiteral );
    public final MandaraxParser.literal_return literal() throws RecognitionException {
        MandaraxParser.literal_return retval = new MandaraxParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        CommonTree root_0 = null;

        Token l4=null;
        MandaraxParser.integerLiteral_return l1 = null;

        MandaraxParser.booleanLiteral_return l5 = null;


        CommonTree l4_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:200:5: (l1= integerLiteral | l4= StringLiteral | l5= booleanLiteral )
            int alt27=3;
            switch ( input.LA(1) ) {
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
                {
                alt27=1;
                }
                break;
            case StringLiteral:
                {
                alt27=2;
                }
                break;
            case 55:
            case 56:
                {
                alt27=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }

            switch (alt27) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:200:9: l1= integerLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_integerLiteral_in_literal1282);
                    l1=integerLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, l1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = l1.value;
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:203:9: l4= StringLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    l4=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_literal1300); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    l4_tree = (CommonTree)adaptor.create(l4);
                    adaptor.addChild(root_0, l4_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new StringLiteral(pos(l4),context,l4.getText().substring(1,l4.getText().length()-1));
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:204:9: l5= booleanLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_booleanLiteral_in_literal1316);
                    l5=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, l5.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = l5.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class integerLiteral_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integerLiteral"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:208:1: integerLiteral returns [Expression value] : (hex= HexLiteral | oct= OctalLiteral | dec= DecimalLiteral );
    public final MandaraxParser.integerLiteral_return integerLiteral() throws RecognitionException {
        MandaraxParser.integerLiteral_return retval = new MandaraxParser.integerLiteral_return();
        retval.start = input.LT(1);
        int integerLiteral_StartIndex = input.index();
        CommonTree root_0 = null;

        Token hex=null;
        Token oct=null;
        Token dec=null;

        CommonTree hex_tree=null;
        CommonTree oct_tree=null;
        CommonTree dec_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:209:5: (hex= HexLiteral | oct= OctalLiteral | dec= DecimalLiteral )
            int alt28=3;
            switch ( input.LA(1) ) {
            case HexLiteral:
                {
                alt28=1;
                }
                break;
            case OctalLiteral:
                {
                alt28=2;
                }
                break;
            case DecimalLiteral:
                {
                alt28=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;
            }

            switch (alt28) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:209:9: hex= HexLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    hex=(Token)match(input,HexLiteral,FOLLOW_HexLiteral_in_integerLiteral1346); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    hex_tree = (CommonTree)adaptor.create(hex);
                    adaptor.addChild(root_0, hex_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new IntLiteral(pos(hex),context,Integer.parseInt(hex.getText().substring(2),16));
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:210:9: oct= OctalLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    oct=(Token)match(input,OctalLiteral,FOLLOW_OctalLiteral_in_integerLiteral1362); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    oct_tree = (CommonTree)adaptor.create(oct);
                    adaptor.addChild(root_0, oct_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new IntLiteral(pos(oct),context,Integer.parseInt(oct.getText(),8));
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:211:9: dec= DecimalLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dec=(Token)match(input,DecimalLiteral,FOLLOW_DecimalLiteral_in_integerLiteral1378); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    dec_tree = (CommonTree)adaptor.create(dec);
                    adaptor.addChild(root_0, dec_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new IntLiteral(pos(dec),context,Integer.parseInt(dec.getText()));
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, integerLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integerLiteral"

    public static class booleanLiteral_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "booleanLiteral"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:214:1: booleanLiteral returns [Expression value] : (t= 'true' | f= 'false' );
    public final MandaraxParser.booleanLiteral_return booleanLiteral() throws RecognitionException {
        MandaraxParser.booleanLiteral_return retval = new MandaraxParser.booleanLiteral_return();
        retval.start = input.LT(1);
        int booleanLiteral_StartIndex = input.index();
        CommonTree root_0 = null;

        Token t=null;
        Token f=null;

        CommonTree t_tree=null;
        CommonTree f_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:215:5: (t= 'true' | f= 'false' )
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==55) ) {
                alt29=1;
            }
            else if ( (LA29_0==56) ) {
                alt29=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;
            }
            switch (alt29) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:215:9: t= 'true'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    t=(Token)match(input,55,FOLLOW_55_in_booleanLiteral1407); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t_tree = (CommonTree)adaptor.create(t);
                    adaptor.addChild(root_0, t_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new BooleanLiteral(pos(t),context,true);
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:216:9: f= 'false'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    f=(Token)match(input,56,FOLLOW_56_in_booleanLiteral1423); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    f_tree = (CommonTree)adaptor.create(f);
                    adaptor.addChild(root_0, f_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new BooleanLiteral(pos(f),context,false);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, booleanLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "booleanLiteral"

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairs"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:220:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* ;
    public final MandaraxParser.elementValuePairs_return elementValuePairs() throws RecognitionException {
        MandaraxParser.elementValuePairs_return retval = new MandaraxParser.elementValuePairs_return();
        retval.start = input.LT(1);
        int elementValuePairs_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal54=null;
        MandaraxParser.elementValuePair_return elementValuePair53 = null;

        MandaraxParser.elementValuePair_return elementValuePair55 = null;


        CommonTree char_literal54_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:221:5: ( elementValuePair ( ',' elementValuePair )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:221:9: elementValuePair ( ',' elementValuePair )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs1445);
            elementValuePair53=elementValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair53.getTree());
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:221:26: ( ',' elementValuePair )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==42) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:221:27: ',' elementValuePair
            	    {
            	    char_literal54=(Token)match(input,42,FOLLOW_42_in_elementValuePairs1448); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal54_tree = (CommonTree)adaptor.create(char_literal54);
            	    adaptor.addChild(root_0, char_literal54_tree);
            	    }
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs1450);
            	    elementValuePair55=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair55.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, elementValuePairs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePairs"

    public static class elementValuePair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePair"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:224:1: elementValuePair : Identifier '=' elementValue ;
    public final MandaraxParser.elementValuePair_return elementValuePair() throws RecognitionException {
        MandaraxParser.elementValuePair_return retval = new MandaraxParser.elementValuePair_return();
        retval.start = input.LT(1);
        int elementValuePair_StartIndex = input.index();
        CommonTree root_0 = null;

        Token Identifier56=null;
        Token char_literal57=null;
        MandaraxParser.elementValue_return elementValue58 = null;


        CommonTree Identifier56_tree=null;
        CommonTree char_literal57_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:225:5: ( Identifier '=' elementValue )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:225:9: Identifier '=' elementValue
            {
            root_0 = (CommonTree)adaptor.nil();

            Identifier56=(Token)match(input,Identifier,FOLLOW_Identifier_in_elementValuePair1471); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier56_tree = (CommonTree)adaptor.create(Identifier56);
            adaptor.addChild(root_0, Identifier56_tree);
            }
            char_literal57=(Token)match(input,33,FOLLOW_33_in_elementValuePair1473); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal57_tree = (CommonTree)adaptor.create(char_literal57);
            adaptor.addChild(root_0, char_literal57_tree);
            }
            pushFollow(FOLLOW_elementValue_in_elementValuePair1475);
            elementValue58=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue58.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, elementValuePair_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePair"

    public static class elementValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValue"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:228:1: elementValue : ( conditionalExpression | elementValueArrayInitializer );
    public final MandaraxParser.elementValue_return elementValue() throws RecognitionException {
        MandaraxParser.elementValue_return retval = new MandaraxParser.elementValue_return();
        retval.start = input.LT(1);
        int elementValue_StartIndex = input.index();
        CommonTree root_0 = null;

        MandaraxParser.conditionalExpression_return conditionalExpression59 = null;

        MandaraxParser.elementValueArrayInitializer_return elementValueArrayInitializer60 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:229:5: ( conditionalExpression | elementValueArrayInitializer )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( ((LA31_0>=Identifier && LA31_0<=DecimalLiteral)||LA31_0==36||(LA31_0>=55 && LA31_0<=56)||LA31_0==68||(LA31_0>=71 && LA31_0<=74)) ) {
                alt31=1;
            }
            else if ( (LA31_0==40) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:229:9: conditionalExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_conditionalExpression_in_elementValue1498);
                    conditionalExpression59=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression59.getTree());

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:230:9: elementValueArrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue1508);
                    elementValueArrayInitializer60=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValueArrayInitializer60.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, elementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValue"

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayInitializer"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:233:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' ;
    public final MandaraxParser.elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        MandaraxParser.elementValueArrayInitializer_return retval = new MandaraxParser.elementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int elementValueArrayInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal61=null;
        Token char_literal63=null;
        Token char_literal65=null;
        Token char_literal66=null;
        MandaraxParser.elementValue_return elementValue62 = null;

        MandaraxParser.elementValue_return elementValue64 = null;


        CommonTree char_literal61_tree=null;
        CommonTree char_literal63_tree=null;
        CommonTree char_literal65_tree=null;
        CommonTree char_literal66_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:234:5: ( '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:234:9: '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal61=(Token)match(input,40,FOLLOW_40_in_elementValueArrayInitializer1531); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal61_tree = (CommonTree)adaptor.create(char_literal61);
            adaptor.addChild(root_0, char_literal61_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:234:13: ( elementValue ( ',' elementValue )* )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( ((LA33_0>=Identifier && LA33_0<=DecimalLiteral)||LA33_0==36||LA33_0==40||(LA33_0>=55 && LA33_0<=56)||LA33_0==68||(LA33_0>=71 && LA33_0<=74)) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:234:14: elementValue ( ',' elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer1534);
                    elementValue62=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue62.getTree());
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:234:27: ( ',' elementValue )*
                    loop32:
                    do {
                        int alt32=2;
                        int LA32_0 = input.LA(1);

                        if ( (LA32_0==42) ) {
                            int LA32_1 = input.LA(2);

                            if ( ((LA32_1>=Identifier && LA32_1<=DecimalLiteral)||LA32_1==36||LA32_1==40||(LA32_1>=55 && LA32_1<=56)||LA32_1==68||(LA32_1>=71 && LA32_1<=74)) ) {
                                alt32=1;
                            }


                        }


                        switch (alt32) {
                    	case 1 :
                    	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:234:28: ',' elementValue
                    	    {
                    	    char_literal63=(Token)match(input,42,FOLLOW_42_in_elementValueArrayInitializer1537); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal63_tree = (CommonTree)adaptor.create(char_literal63);
                    	    adaptor.addChild(root_0, char_literal63_tree);
                    	    }
                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer1539);
                    	    elementValue64=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue64.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop32;
                        }
                    } while (true);


                    }
                    break;

            }

            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:234:49: ( ',' )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==42) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:234:50: ','
                    {
                    char_literal65=(Token)match(input,42,FOLLOW_42_in_elementValueArrayInitializer1546); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal65_tree = (CommonTree)adaptor.create(char_literal65);
                    adaptor.addChild(root_0, char_literal65_tree);
                    }

                    }
                    break;

            }

            char_literal66=(Token)match(input,41,FOLLOW_41_in_elementValueArrayInitializer1550); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal66_tree = (CommonTree)adaptor.create(char_literal66);
            adaptor.addChild(root_0, char_literal66_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, elementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayInitializer"

    public static class parExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:239:1: parExpression returns [Expression value] : '(' expr= expression ')' ;
    public final MandaraxParser.parExpression_return parExpression() throws RecognitionException {
        MandaraxParser.parExpression_return retval = new MandaraxParser.parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal67=null;
        Token char_literal68=null;
        MandaraxParser.expression_return expr = null;


        CommonTree char_literal67_tree=null;
        CommonTree char_literal68_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:240:5: ( '(' expr= expression ')' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:240:9: '(' expr= expression ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal67=(Token)match(input,36,FOLLOW_36_in_parExpression1579); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal67_tree = (CommonTree)adaptor.create(char_literal67);
            adaptor.addChild(root_0, char_literal67_tree);
            }
            pushFollow(FOLLOW_expression_in_parExpression1585);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr.getTree());
            char_literal68=(Token)match(input,37,FOLLOW_37_in_parExpression1587); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal68_tree = (CommonTree)adaptor.create(char_literal68);
            adaptor.addChild(root_0, char_literal68_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = expr.value;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, parExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class commaSeparatedExpressionList_return extends ParserRuleReturnScope {
        public List<Expression> values;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "commaSeparatedExpressionList"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:243:1: commaSeparatedExpressionList returns [List<Expression> values] : e1= expression ( ',' e2= expression )* ;
    public final MandaraxParser.commaSeparatedExpressionList_return commaSeparatedExpressionList() throws RecognitionException {
        MandaraxParser.commaSeparatedExpressionList_return retval = new MandaraxParser.commaSeparatedExpressionList_return();
        retval.start = input.LT(1);
        int commaSeparatedExpressionList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal69=null;
        MandaraxParser.expression_return e1 = null;

        MandaraxParser.expression_return e2 = null;


        CommonTree char_literal69_tree=null;

        retval.values = new ArrayList<Expression>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:245:5: (e1= expression ( ',' e2= expression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:245:9: e1= expression ( ',' e2= expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_commaSeparatedExpressionList1625);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e1.getTree());
            if ( state.backtracking==0 ) {
              retval.values.add(e1.value);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:245:50: ( ',' e2= expression )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==42) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:245:51: ',' e2= expression
            	    {
            	    char_literal69=(Token)match(input,42,FOLLOW_42_in_commaSeparatedExpressionList1630); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal69_tree = (CommonTree)adaptor.create(char_literal69);
            	    adaptor.addChild(root_0, char_literal69_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_commaSeparatedExpressionList1636);
            	    e2=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, e2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.values.add(e2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, commaSeparatedExpressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "commaSeparatedExpressionList"

    public static class andSeparatedExpressionList_return extends ParserRuleReturnScope {
        public List<Expression> values;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andSeparatedExpressionList"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:248:1: andSeparatedExpressionList returns [List<Expression> values] : e1= expression ( '&' e2= expression )* ;
    public final MandaraxParser.andSeparatedExpressionList_return andSeparatedExpressionList() throws RecognitionException {
        MandaraxParser.andSeparatedExpressionList_return retval = new MandaraxParser.andSeparatedExpressionList_return();
        retval.start = input.LT(1);
        int andSeparatedExpressionList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal70=null;
        MandaraxParser.expression_return e1 = null;

        MandaraxParser.expression_return e2 = null;


        CommonTree char_literal70_tree=null;

        retval.values = new ArrayList<Expression>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:250:5: (e1= expression ( '&' e2= expression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:250:9: e1= expression ( '&' e2= expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_andSeparatedExpressionList1673);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e1.getTree());
            if ( state.backtracking==0 ) {
              retval.values.add(e1.value);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:250:50: ( '&' e2= expression )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==57) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:250:51: '&' e2= expression
            	    {
            	    char_literal70=(Token)match(input,57,FOLLOW_57_in_andSeparatedExpressionList1678); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal70_tree = (CommonTree)adaptor.create(char_literal70);
            	    adaptor.addChild(root_0, char_literal70_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_andSeparatedExpressionList1684);
            	    e2=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, e2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.values.add(e2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, andSeparatedExpressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andSeparatedExpressionList"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:253:1: conditionalExpression returns [Expression value] : r1= disjunction ( '?' r2= expression ':' r3= expression )? ;
    public final MandaraxParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        MandaraxParser.conditionalExpression_return retval = new MandaraxParser.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal71=null;
        Token char_literal72=null;
        MandaraxParser.disjunction_return r1 = null;

        MandaraxParser.expression_return r2 = null;

        MandaraxParser.expression_return r3 = null;


        CommonTree char_literal71_tree=null;
        CommonTree char_literal72_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:254:5: (r1= disjunction ( '?' r2= expression ':' r3= expression )? )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:254:9: r1= disjunction ( '?' r2= expression ':' r3= expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_disjunction_in_conditionalExpression1716);
            r1=disjunction();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, r1.getTree());
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:254:26: ( '?' r2= expression ':' r3= expression )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==58) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:254:28: '?' r2= expression ':' r3= expression
                    {
                    char_literal71=(Token)match(input,58,FOLLOW_58_in_conditionalExpression1720); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal71_tree = (CommonTree)adaptor.create(char_literal71);
                    adaptor.addChild(root_0, char_literal71_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression1726);
                    r2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r2.getTree());
                    char_literal72=(Token)match(input,30,FOLLOW_30_in_conditionalExpression1728); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal72_tree = (CommonTree)adaptor.create(char_literal72);
                    adaptor.addChild(root_0, char_literal72_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression1734);
                    r3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r3.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              retval.value =(r2==null)?r1.value:new ConditionalExpression(pos(r1.value),context,r1.value,r2.value,r3.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class disjunction_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "disjunction"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:257:1: disjunction returns [Expression value] : part1= conjunction ( '|' part= conjunction )* ;
    public final MandaraxParser.disjunction_return disjunction() throws RecognitionException {
        MandaraxParser.disjunction_return retval = new MandaraxParser.disjunction_return();
        retval.start = input.LT(1);
        int disjunction_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal73=null;
        MandaraxParser.conjunction_return part1 = null;

        MandaraxParser.conjunction_return part = null;


        CommonTree char_literal73_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:258:5: (part1= conjunction ( '|' part= conjunction )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:258:9: part1= conjunction ( '|' part= conjunction )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conjunction_in_disjunction1767);
            part1=conjunction();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:258:53: ( '|' part= conjunction )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( (LA38_0==59) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:258:55: '|' part= conjunction
            	    {
            	    char_literal73=(Token)match(input,59,FOLLOW_59_in_disjunction1773); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal73_tree = (CommonTree)adaptor.create(char_literal73);
            	    adaptor.addChild(root_0, char_literal73_tree);
            	    }
            	    pushFollow(FOLLOW_conjunction_in_disjunction1779);
            	    part=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,BinOp.OR,retval.value,part.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, disjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "disjunction"

    public static class conjunction_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:261:1: conjunction returns [Expression value] : part1= equalityExpression ( '&' part= equalityExpression )* ;
    public final MandaraxParser.conjunction_return conjunction() throws RecognitionException {
        MandaraxParser.conjunction_return retval = new MandaraxParser.conjunction_return();
        retval.start = input.LT(1);
        int conjunction_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal74=null;
        MandaraxParser.equalityExpression_return part1 = null;

        MandaraxParser.equalityExpression_return part = null;


        CommonTree char_literal74_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:262:5: (part1= equalityExpression ( '&' part= equalityExpression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:262:9: part1= equalityExpression ( '&' part= equalityExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_equalityExpression_in_conjunction1811);
            part1=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:262:60: ( '&' part= equalityExpression )*
            loop39:
            do {
                int alt39=2;
                alt39 = dfa39.predict(input);
                switch (alt39) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:262:62: '&' part= equalityExpression
            	    {
            	    char_literal74=(Token)match(input,57,FOLLOW_57_in_conjunction1817); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal74_tree = (CommonTree)adaptor.create(char_literal74);
            	    adaptor.addChild(root_0, char_literal74_tree);
            	    }
            	    pushFollow(FOLLOW_equalityExpression_in_conjunction1824);
            	    part=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,BinOp.AND,retval.value,part.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, conjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:265:1: equalityExpression returns [Expression value] : part1= instanceOfExpression (op= ( '==' | '!=' ) part2= instanceOfExpression )* ;
    public final MandaraxParser.equalityExpression_return equalityExpression() throws RecognitionException {
        MandaraxParser.equalityExpression_return retval = new MandaraxParser.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token op=null;
        MandaraxParser.instanceOfExpression_return part1 = null;

        MandaraxParser.instanceOfExpression_return part2 = null;


        CommonTree op_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:266:5: (part1= instanceOfExpression (op= ( '==' | '!=' ) part2= instanceOfExpression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:266:9: part1= instanceOfExpression (op= ( '==' | '!=' ) part2= instanceOfExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression1856);
            part1=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value =part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:266:60: (op= ( '==' | '!=' ) part2= instanceOfExpression )*
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( ((LA40_0>=60 && LA40_0<=61)) ) {
                    alt40=1;
                }


                switch (alt40) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:266:62: op= ( '==' | '!=' ) part2= instanceOfExpression
            	    {
            	    op=(Token)input.LT(1);
            	    if ( (input.LA(1)>=60 && input.LA(1)<=61) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(op));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression1878);
            	    part2=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value =new BinaryExpression(pos(part1.value),context,binOpForName(op.getText()),retval.value,part2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:269:1: instanceOfExpression returns [Expression value] : part= relationalExpression ( 'instanceof' t= type )? ;
    public final MandaraxParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        MandaraxParser.instanceOfExpression_return retval = new MandaraxParser.instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal75=null;
        MandaraxParser.relationalExpression_return part = null;

        MandaraxParser.type_return t = null;


        CommonTree string_literal75_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:270:5: (part= relationalExpression ( 'instanceof' t= type )? )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:270:9: part= relationalExpression ( 'instanceof' t= type )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression1910);
            part=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:270:37: ( 'instanceof' t= type )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==62) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:270:38: 'instanceof' t= type
                    {
                    string_literal75=(Token)match(input,62,FOLLOW_62_in_instanceOfExpression1913); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal75_tree = (CommonTree)adaptor.create(string_literal75);
                    adaptor.addChild(root_0, string_literal75_tree);
                    }
                    pushFollow(FOLLOW_type_in_instanceOfExpression1919);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              retval.value = (t==null)?part.value:new InstanceOfExpression(pos(part.value),context,part.value,t.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:273:1: relationalExpression returns [Expression value] : part1= shiftExpression (op= relationalOp part2= shiftExpression )* ;
    public final MandaraxParser.relationalExpression_return relationalExpression() throws RecognitionException {
        MandaraxParser.relationalExpression_return retval = new MandaraxParser.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        MandaraxParser.shiftExpression_return part1 = null;

        MandaraxParser.relationalOp_return op = null;

        MandaraxParser.shiftExpression_return part2 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:274:5: (part1= shiftExpression (op= relationalOp part2= shiftExpression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:274:9: part1= shiftExpression (op= relationalOp part2= shiftExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_shiftExpression_in_relationalExpression1951);
            part1=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value =part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:274:55: (op= relationalOp part2= shiftExpression )*
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);

                if ( ((LA42_0>=63 && LA42_0<=66)) ) {
                    alt42=1;
                }


                switch (alt42) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:274:57: op= relationalOp part2= shiftExpression
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_relationalExpression1961);
            	    op=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op.getTree());
            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression1967);
            	    part2=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,op.value,retval.value,part2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class relationalOp_return extends ParserRuleReturnScope {
        public BinOp value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalOp"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:278:1: relationalOp returns [BinOp value] : ( '<=' | '>=' | '<' | '>' );
    public final MandaraxParser.relationalOp_return relationalOp() throws RecognitionException {
        MandaraxParser.relationalOp_return retval = new MandaraxParser.relationalOp_return();
        retval.start = input.LT(1);
        int relationalOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal76=null;
        Token string_literal77=null;
        Token char_literal78=null;
        Token char_literal79=null;

        CommonTree string_literal76_tree=null;
        CommonTree string_literal77_tree=null;
        CommonTree char_literal78_tree=null;
        CommonTree char_literal79_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:279:5: ( '<=' | '>=' | '<' | '>' )
            int alt43=4;
            switch ( input.LA(1) ) {
            case 63:
                {
                alt43=1;
                }
                break;
            case 64:
                {
                alt43=2;
                }
                break;
            case 65:
                {
                alt43=3;
                }
                break;
            case 66:
                {
                alt43=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }

            switch (alt43) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:279:9: '<='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal76=(Token)match(input,63,FOLLOW_63_in_relationalOp2001); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal76_tree = (CommonTree)adaptor.create(string_literal76);
                    adaptor.addChild(root_0, string_literal76_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.LTE;
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:280:9: '>='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal77=(Token)match(input,64,FOLLOW_64_in_relationalOp2013); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal77_tree = (CommonTree)adaptor.create(string_literal77);
                    adaptor.addChild(root_0, string_literal77_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.GTE;
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:281:7: '<'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal78=(Token)match(input,65,FOLLOW_65_in_relationalOp2023); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal78_tree = (CommonTree)adaptor.create(char_literal78);
                    adaptor.addChild(root_0, char_literal78_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.LT;
                    }

                    }
                    break;
                case 4 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:282:9: '>'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal79=(Token)match(input,66,FOLLOW_66_in_relationalOp2035); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal79_tree = (CommonTree)adaptor.create(char_literal79);
                    adaptor.addChild(root_0, char_literal79_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.GT;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, relationalOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalOp"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:286:1: shiftExpression returns [Expression value] : part1= additiveExpression (op= shiftOp part= additiveExpression )? ;
    public final MandaraxParser.shiftExpression_return shiftExpression() throws RecognitionException {
        MandaraxParser.shiftExpression_return retval = new MandaraxParser.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        MandaraxParser.additiveExpression_return part1 = null;

        MandaraxParser.shiftOp_return op = null;

        MandaraxParser.additiveExpression_return part = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:287:5: (part1= additiveExpression (op= shiftOp part= additiveExpression )? )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:287:9: part1= additiveExpression (op= shiftOp part= additiveExpression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_shiftExpression2065);
            part1=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:287:60: (op= shiftOp part= additiveExpression )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==65) ) {
                int LA44_1 = input.LA(2);

                if ( (LA44_1==65) ) {
                    alt44=1;
                }
            }
            else if ( (LA44_0==66) ) {
                int LA44_2 = input.LA(2);

                if ( (LA44_2==66) ) {
                    alt44=1;
                }
            }
            switch (alt44) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:287:62: op= shiftOp part= additiveExpression
                    {
                    pushFollow(FOLLOW_shiftOp_in_shiftExpression2075);
                    op=shiftOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op.getTree());
                    pushFollow(FOLLOW_additiveExpression_in_shiftExpression2081);
                    part=additiveExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new BinaryExpression(pos(part1.value),context,op.value,retval.value,part.value);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class shiftOp_return extends ParserRuleReturnScope {
        public BinOp value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftOp"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:290:1: shiftOp returns [BinOp value] : ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?);
    public final MandaraxParser.shiftOp_return shiftOp() throws RecognitionException {
        MandaraxParser.shiftOp_return retval = new MandaraxParser.shiftOp_return();
        retval.start = input.LT(1);
        int shiftOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token t1=null;
        Token t2=null;
        Token t3=null;

        CommonTree t1_tree=null;
        CommonTree t2_tree=null;
        CommonTree t3_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:291:5: ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?)
            int alt45=3;
            alt45 = dfa45.predict(input);
            switch (alt45) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:291:9: ( '<' '<' )=>t1= '<' t2= '<' {...}?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    t1=(Token)match(input,65,FOLLOW_65_in_shiftOp2118); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (CommonTree)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,65,FOLLOW_65_in_shiftOp2122); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (CommonTree)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() && \n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.SHIFT_LL;
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:294:9: ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    t1=(Token)match(input,66,FOLLOW_66_in_shiftOp2156); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (CommonTree)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,66,FOLLOW_66_in_shiftOp2160); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (CommonTree)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    t3=(Token)match(input,66,FOLLOW_66_in_shiftOp2164); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t3_tree = (CommonTree)adaptor.create(t3);
                    adaptor.addChild(root_0, t3_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() && 
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() && \n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() && \n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.SHIFT_RRR;
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:299:9: ( '>' '>' )=>t1= '>' t2= '>' {...}?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    t1=(Token)match(input,66,FOLLOW_66_in_shiftOp2196); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (CommonTree)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,66,FOLLOW_66_in_shiftOp2200); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (CommonTree)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() && \n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.SHIFT_RR;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, shiftOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftOp"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:305:1: additiveExpression returns [Expression value] : part1= multiplicativeExpression (op= ( '+' | '-' ) part= multiplicativeExpression )* ;
    public final MandaraxParser.additiveExpression_return additiveExpression() throws RecognitionException {
        MandaraxParser.additiveExpression_return retval = new MandaraxParser.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token op=null;
        MandaraxParser.multiplicativeExpression_return part1 = null;

        MandaraxParser.multiplicativeExpression_return part = null;


        CommonTree op_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:306:5: (part1= multiplicativeExpression (op= ( '+' | '-' ) part= multiplicativeExpression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:306:8: part1= multiplicativeExpression (op= ( '+' | '-' ) part= multiplicativeExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression2239);
            part1=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:306:64: (op= ( '+' | '-' ) part= multiplicativeExpression )*
            loop46:
            do {
                int alt46=2;
                int LA46_0 = input.LA(1);

                if ( ((LA46_0>=67 && LA46_0<=68)) ) {
                    alt46=1;
                }


                switch (alt46) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:306:66: op= ( '+' | '-' ) part= multiplicativeExpression
            	    {
            	    op=(Token)input.LT(1);
            	    if ( (input.LA(1)>=67 && input.LA(1)<=68) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(op));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression2260);
            	    part=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,binOpForName(op.getText()),retval.value,part.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop46;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:309:1: multiplicativeExpression returns [Expression value] : part1= unaryExpression (op= ( '*' | '/' | '%' ) part= unaryExpression )* ;
    public final MandaraxParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        MandaraxParser.multiplicativeExpression_return retval = new MandaraxParser.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token op=null;
        MandaraxParser.unaryExpression_return part1 = null;

        MandaraxParser.unaryExpression_return part = null;


        CommonTree op_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:310:5: (part1= unaryExpression (op= ( '*' | '/' | '%' ) part= unaryExpression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:310:8: part1= unaryExpression (op= ( '*' | '/' | '%' ) part= unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression2291);
            part1=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:310:56: (op= ( '*' | '/' | '%' ) part= unaryExpression )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==27||(LA47_0>=69 && LA47_0<=70)) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:310:58: op= ( '*' | '/' | '%' ) part= unaryExpression
            	    {
            	    op=(Token)input.LT(1);
            	    if ( input.LA(1)==27||(input.LA(1)>=69 && input.LA(1)<=70) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(op));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression2318);
            	    part=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,binOpForName(op.getText()),retval.value,part.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:313:1: unaryExpression returns [Expression value] : ( '-' part1= unaryExpression | part2= unaryExpressionNotPlusMinus );
    public final MandaraxParser.unaryExpression_return unaryExpression() throws RecognitionException {
        MandaraxParser.unaryExpression_return retval = new MandaraxParser.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal80=null;
        MandaraxParser.unaryExpression_return part1 = null;

        MandaraxParser.unaryExpressionNotPlusMinus_return part2 = null;


        CommonTree char_literal80_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:314:5: ( '-' part1= unaryExpression | part2= unaryExpressionNotPlusMinus )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==68) ) {
                alt48=1;
            }
            else if ( ((LA48_0>=Identifier && LA48_0<=DecimalLiteral)||LA48_0==36||(LA48_0>=55 && LA48_0<=56)||(LA48_0>=71 && LA48_0<=74)) ) {
                alt48=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:314:9: '-' part1= unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal80=(Token)match(input,68,FOLLOW_68_in_unaryExpression2350); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal80_tree = (CommonTree)adaptor.create(char_literal80);
                    adaptor.addChild(root_0, char_literal80_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression2356);
                    part1=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new UnaryExpression(pos(part1.value),context,UnOp.MINUS,part1.value);
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:315:9: part2= unaryExpressionNotPlusMinus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression2372);
                    part2=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = part2.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:318:1: unaryExpressionNotPlusMinus returns [Expression value] : ( '~' r1= unaryExpression | '!' r2= unaryExpression | r3= castExpression | r11= constructorInvocation | r9= functionInvocation | r8= methodInvocation | r7= propertyAccess | r4= objectref | r5= qualifiedName | r6= parExpression | r10= nullValue );
    public final MandaraxParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        MandaraxParser.unaryExpressionNotPlusMinus_return retval = new MandaraxParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal81=null;
        Token char_literal82=null;
        MandaraxParser.unaryExpression_return r1 = null;

        MandaraxParser.unaryExpression_return r2 = null;

        MandaraxParser.castExpression_return r3 = null;

        MandaraxParser.constructorInvocation_return r11 = null;

        MandaraxParser.functionInvocation_return r9 = null;

        MandaraxParser.methodInvocation_return r8 = null;

        MandaraxParser.propertyAccess_return r7 = null;

        MandaraxParser.objectref_return r4 = null;

        MandaraxParser.qualifiedName_return r5 = null;

        MandaraxParser.parExpression_return r6 = null;

        MandaraxParser.nullValue_return r10 = null;


        CommonTree char_literal81_tree=null;
        CommonTree char_literal82_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:319:5: ( '~' r1= unaryExpression | '!' r2= unaryExpression | r3= castExpression | r11= constructorInvocation | r9= functionInvocation | r8= methodInvocation | r7= propertyAccess | r4= objectref | r5= qualifiedName | r6= parExpression | r10= nullValue )
            int alt49=11;
            alt49 = dfa49.predict(input);
            switch (alt49) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:319:9: '~' r1= unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal81=(Token)match(input,71,FOLLOW_71_in_unaryExpressionNotPlusMinus2397); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal81_tree = (CommonTree)adaptor.create(char_literal81);
                    adaptor.addChild(root_0, char_literal81_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus2403);
                    r1=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new UnaryExpression(pos(r1.value),context,UnOp.COMPL,r1.value);
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:320:9: '!' r2= unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal82=(Token)match(input,72,FOLLOW_72_in_unaryExpressionNotPlusMinus2415); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal82_tree = (CommonTree)adaptor.create(char_literal82);
                    adaptor.addChild(root_0, char_literal82_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus2421);
                    r2=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new UnaryExpression(pos(r2.value),context,UnOp.NOT,r2.value);
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:321:9: r3= castExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus2437);
                    r3=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r3.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r3.value;
                    }

                    }
                    break;
                case 4 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:322:9: r11= constructorInvocation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constructorInvocation_in_unaryExpressionNotPlusMinus2453);
                    r11=constructorInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r11.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r11.value;
                    }

                    }
                    break;
                case 5 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:323:9: r9= functionInvocation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_functionInvocation_in_unaryExpressionNotPlusMinus2469);
                    r9=functionInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r9.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r9.value;
                    }

                    }
                    break;
                case 6 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:324:9: r8= methodInvocation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_methodInvocation_in_unaryExpressionNotPlusMinus2485);
                    r8=methodInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r8.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r8.value;
                    }

                    }
                    break;
                case 7 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:325:9: r7= propertyAccess
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_propertyAccess_in_unaryExpressionNotPlusMinus2501);
                    r7=propertyAccess();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r7.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r7.value;
                    }

                    }
                    break;
                case 8 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:326:9: r4= objectref
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_objectref_in_unaryExpressionNotPlusMinus2517);
                    r4=objectref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r4.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r4.value;
                    }

                    }
                    break;
                case 9 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:327:9: r5= qualifiedName
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_qualifiedName_in_unaryExpressionNotPlusMinus2533);
                    r5=qualifiedName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r5.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r5.value;
                    }

                    }
                    break;
                case 10 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:328:9: r6= parExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_unaryExpressionNotPlusMinus2549);
                    r6=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r6.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r6.value;
                    }

                    }
                    break;
                case 11 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:329:9: r10= nullValue
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_nullValue_in_unaryExpressionNotPlusMinus2565);
                    r10=nullValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r10.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r10.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class nullValue_return extends ParserRuleReturnScope {
        public NullValue value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nullValue"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:332:1: nullValue returns [NullValue value] : n= 'null' ;
    public final MandaraxParser.nullValue_return nullValue() throws RecognitionException {
        MandaraxParser.nullValue_return retval = new MandaraxParser.nullValue_return();
        retval.start = input.LT(1);
        int nullValue_StartIndex = input.index();
        CommonTree root_0 = null;

        Token n=null;

        CommonTree n_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:333:5: (n= 'null' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:333:8: n= 'null'
            {
            root_0 = (CommonTree)adaptor.nil();

            n=(Token)match(input,73,FOLLOW_73_in_nullValue2594); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            n_tree = (CommonTree)adaptor.create(n);
            adaptor.addChild(root_0, n_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new NullValue(pos(n),context);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, nullValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nullValue"

    public static class propertyAccess_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyAccess"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:336:1: propertyAccess returns [Expression value] : o= objectref ( '.' i= Identifier )* ;
    public final MandaraxParser.propertyAccess_return propertyAccess() throws RecognitionException {
        MandaraxParser.propertyAccess_return retval = new MandaraxParser.propertyAccess_return();
        retval.start = input.LT(1);
        int propertyAccess_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token char_literal83=null;
        MandaraxParser.objectref_return o = null;


        CommonTree i_tree=null;
        CommonTree char_literal83_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:337:5: (o= objectref ( '.' i= Identifier )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:337:9: o= objectref ( '.' i= Identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_objectref_in_propertyAccess2630);
            o=objectref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, o.getTree());
            if ( state.backtracking==0 ) {
              retval.value = o.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:337:43: ( '.' i= Identifier )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==26) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:337:44: '.' i= Identifier
            	    {
            	    char_literal83=(Token)match(input,26,FOLLOW_26_in_propertyAccess2635); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal83_tree = (CommonTree)adaptor.create(char_literal83);
            	    adaptor.addChild(root_0, char_literal83_tree);
            	    }
            	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_propertyAccess2640); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    i_tree = (CommonTree)adaptor.create(i);
            	    adaptor.addChild(root_0, i_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value = new MemberAccess(pos(o.value),context,retval.value,i.getText());
            	    }

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, propertyAccess_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "propertyAccess"

    public static class methodInvocation_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodInvocation"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:340:1: methodInvocation returns [Expression value] : o= objectref ( '.' i= Identifier '(' (p= commaSeparatedExpressionList )? ')' )* ;
    public final MandaraxParser.methodInvocation_return methodInvocation() throws RecognitionException {
        MandaraxParser.methodInvocation_return retval = new MandaraxParser.methodInvocation_return();
        retval.start = input.LT(1);
        int methodInvocation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token char_literal84=null;
        Token char_literal85=null;
        Token char_literal86=null;
        MandaraxParser.objectref_return o = null;

        MandaraxParser.commaSeparatedExpressionList_return p = null;


        CommonTree i_tree=null;
        CommonTree char_literal84_tree=null;
        CommonTree char_literal85_tree=null;
        CommonTree char_literal86_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:341:5: (o= objectref ( '.' i= Identifier '(' (p= commaSeparatedExpressionList )? ')' )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:341:9: o= objectref ( '.' i= Identifier '(' (p= commaSeparatedExpressionList )? ')' )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_objectref_in_methodInvocation2673);
            o=objectref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, o.getTree());
            if ( state.backtracking==0 ) {
              retval.value = o.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:341:43: ( '.' i= Identifier '(' (p= commaSeparatedExpressionList )? ')' )*
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==26) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:341:44: '.' i= Identifier '(' (p= commaSeparatedExpressionList )? ')'
            	    {
            	    char_literal84=(Token)match(input,26,FOLLOW_26_in_methodInvocation2678); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal84_tree = (CommonTree)adaptor.create(char_literal84);
            	    adaptor.addChild(root_0, char_literal84_tree);
            	    }
            	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_methodInvocation2684); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    i_tree = (CommonTree)adaptor.create(i);
            	    adaptor.addChild(root_0, i_tree);
            	    }
            	    char_literal85=(Token)match(input,36,FOLLOW_36_in_methodInvocation2686); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal85_tree = (CommonTree)adaptor.create(char_literal85);
            	    adaptor.addChild(root_0, char_literal85_tree);
            	    }
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:341:66: (p= commaSeparatedExpressionList )?
            	    int alt51=2;
            	    int LA51_0 = input.LA(1);

            	    if ( ((LA51_0>=Identifier && LA51_0<=DecimalLiteral)||LA51_0==36||(LA51_0>=55 && LA51_0<=56)||LA51_0==68||(LA51_0>=71 && LA51_0<=74)) ) {
            	        alt51=1;
            	    }
            	    switch (alt51) {
            	        case 1 :
            	            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:341:67: p= commaSeparatedExpressionList
            	            {
            	            pushFollow(FOLLOW_commaSeparatedExpressionList_in_methodInvocation2692);
            	            p=commaSeparatedExpressionList();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p.getTree());

            	            }
            	            break;

            	    }

            	    char_literal86=(Token)match(input,37,FOLLOW_37_in_methodInvocation2696); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal86_tree = (CommonTree)adaptor.create(char_literal86);
            	    adaptor.addChild(root_0, char_literal86_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value = new MemberAccess(pos(o.value),context,retval.value,i.getText(),p==null?new ArrayList<Expression>():p.values);
            	    }

            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, methodInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodInvocation"

    public static class functionInvocation_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionInvocation"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:344:1: functionInvocation returns [Expression value] : f= Identifier '(' (p= commaSeparatedExpressionList )? ')' ;
    public final MandaraxParser.functionInvocation_return functionInvocation() throws RecognitionException {
        MandaraxParser.functionInvocation_return retval = new MandaraxParser.functionInvocation_return();
        retval.start = input.LT(1);
        int functionInvocation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token f=null;
        Token char_literal87=null;
        Token char_literal88=null;
        MandaraxParser.commaSeparatedExpressionList_return p = null;


        CommonTree f_tree=null;
        CommonTree char_literal87_tree=null;
        CommonTree char_literal88_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:345:5: (f= Identifier '(' (p= commaSeparatedExpressionList )? ')' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:345:9: f= Identifier '(' (p= commaSeparatedExpressionList )? ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            f=(Token)match(input,Identifier,FOLLOW_Identifier_in_functionInvocation2733); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            f_tree = (CommonTree)adaptor.create(f);
            adaptor.addChild(root_0, f_tree);
            }
            char_literal87=(Token)match(input,36,FOLLOW_36_in_functionInvocation2736); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal87_tree = (CommonTree)adaptor.create(char_literal87);
            adaptor.addChild(root_0, char_literal87_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:345:29: (p= commaSeparatedExpressionList )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( ((LA53_0>=Identifier && LA53_0<=DecimalLiteral)||LA53_0==36||(LA53_0>=55 && LA53_0<=56)||LA53_0==68||(LA53_0>=71 && LA53_0<=74)) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:345:30: p= commaSeparatedExpressionList
                    {
                    pushFollow(FOLLOW_commaSeparatedExpressionList_in_functionInvocation2743);
                    p=commaSeparatedExpressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p.getTree());

                    }
                    break;

            }

            char_literal88=(Token)match(input,37,FOLLOW_37_in_functionInvocation2747); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal88_tree = (CommonTree)adaptor.create(char_literal88);
            adaptor.addChild(root_0, char_literal88_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new FunctionInvocation(pos(f),context,f.getText(),p==null?new ArrayList<Expression>():p.values);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, functionInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "functionInvocation"

    public static class constructorInvocation_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructorInvocation"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:348:1: constructorInvocation returns [Expression value] : n= 'new' f= qualifiedName2 '(' (p= commaSeparatedExpressionList )? ')' ;
    public final MandaraxParser.constructorInvocation_return constructorInvocation() throws RecognitionException {
        MandaraxParser.constructorInvocation_return retval = new MandaraxParser.constructorInvocation_return();
        retval.start = input.LT(1);
        int constructorInvocation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token n=null;
        Token char_literal89=null;
        Token char_literal90=null;
        MandaraxParser.qualifiedName2_return f = null;

        MandaraxParser.commaSeparatedExpressionList_return p = null;


        CommonTree n_tree=null;
        CommonTree char_literal89_tree=null;
        CommonTree char_literal90_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:349:5: (n= 'new' f= qualifiedName2 '(' (p= commaSeparatedExpressionList )? ')' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:349:9: n= 'new' f= qualifiedName2 '(' (p= commaSeparatedExpressionList )? ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            n=(Token)match(input,74,FOLLOW_74_in_constructorInvocation2786); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            n_tree = (CommonTree)adaptor.create(n);
            adaptor.addChild(root_0, n_tree);
            }
            pushFollow(FOLLOW_qualifiedName2_in_constructorInvocation2792);
            f=qualifiedName2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, f.getTree());
            char_literal89=(Token)match(input,36,FOLLOW_36_in_constructorInvocation2795); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal89_tree = (CommonTree)adaptor.create(char_literal89);
            adaptor.addChild(root_0, char_literal89_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:349:43: (p= commaSeparatedExpressionList )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( ((LA54_0>=Identifier && LA54_0<=DecimalLiteral)||LA54_0==36||(LA54_0>=55 && LA54_0<=56)||LA54_0==68||(LA54_0>=71 && LA54_0<=74)) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:349:44: p= commaSeparatedExpressionList
                    {
                    pushFollow(FOLLOW_commaSeparatedExpressionList_in_constructorInvocation2802);
                    p=commaSeparatedExpressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p.getTree());

                    }
                    break;

            }

            char_literal90=(Token)match(input,37,FOLLOW_37_in_constructorInvocation2806); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal90_tree = (CommonTree)adaptor.create(char_literal90);
            adaptor.addChild(root_0, char_literal90_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new ConstructorInvocation(pos(n),context,f.value,p==null?new ArrayList<Expression>():p.values);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, constructorInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructorInvocation"

    public static class objectref_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectref"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:352:1: objectref returns [Expression value] : (r1= Identifier | r2= literal | r3= parExpression );
    public final MandaraxParser.objectref_return objectref() throws RecognitionException {
        MandaraxParser.objectref_return retval = new MandaraxParser.objectref_return();
        retval.start = input.LT(1);
        int objectref_StartIndex = input.index();
        CommonTree root_0 = null;

        Token r1=null;
        MandaraxParser.literal_return r2 = null;

        MandaraxParser.parExpression_return r3 = null;


        CommonTree r1_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:353:6: (r1= Identifier | r2= literal | r3= parExpression )
            int alt55=3;
            switch ( input.LA(1) ) {
            case Identifier:
                {
                alt55=1;
                }
                break;
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 55:
            case 56:
                {
                alt55=2;
                }
                break;
            case 36:
                {
                alt55=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }

            switch (alt55) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:353:8: r1= Identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    r1=(Token)match(input,Identifier,FOLLOW_Identifier_in_objectref2843); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    r1_tree = (CommonTree)adaptor.create(r1);
                    adaptor.addChild(root_0, r1_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new Variable(pos(r1),context,r1.getText());
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:354:8: r2= literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_objectref2858);
                    r2=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r2.value;
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:355:8: r3= parExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_objectref2873);
                    r3=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r3.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r3.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, objectref_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "objectref"

    public static class castExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:358:1: castExpression returns [Expression value] : ( '(' t1= primitiveType ')' exp1= unaryExpression | '(' t2= type ')' exp2= unaryExpressionNotPlusMinus );
    public final MandaraxParser.castExpression_return castExpression() throws RecognitionException {
        MandaraxParser.castExpression_return retval = new MandaraxParser.castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal91=null;
        Token char_literal92=null;
        Token char_literal93=null;
        Token char_literal94=null;
        MandaraxParser.primitiveType_return t1 = null;

        MandaraxParser.unaryExpression_return exp1 = null;

        MandaraxParser.type_return t2 = null;

        MandaraxParser.unaryExpressionNotPlusMinus_return exp2 = null;


        CommonTree char_literal91_tree=null;
        CommonTree char_literal92_tree=null;
        CommonTree char_literal93_tree=null;
        CommonTree char_literal94_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:359:5: ( '(' t1= primitiveType ')' exp1= unaryExpression | '(' t2= type ')' exp2= unaryExpressionNotPlusMinus )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==36) ) {
                int LA56_1 = input.LA(2);

                if ( (synpred89_Mandarax()) ) {
                    alt56=1;
                }
                else if ( (true) ) {
                    alt56=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 56, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:359:8: '(' t1= primitiveType ')' exp1= unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal91=(Token)match(input,36,FOLLOW_36_in_castExpression2906); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal91_tree = (CommonTree)adaptor.create(char_literal91);
                    adaptor.addChild(root_0, char_literal91_tree);
                    }
                    pushFollow(FOLLOW_primitiveType_in_castExpression2912);
                    t1=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t1.getTree());
                    char_literal92=(Token)match(input,37,FOLLOW_37_in_castExpression2914); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal92_tree = (CommonTree)adaptor.create(char_literal92);
                    adaptor.addChild(root_0, char_literal92_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_castExpression2920);
                    exp1=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new CastExpression(pos(t1.start),context,exp1.value,t1.value);
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:360:8: '(' t2= type ')' exp2= unaryExpressionNotPlusMinus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal93=(Token)match(input,36,FOLLOW_36_in_castExpression2931); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal93_tree = (CommonTree)adaptor.create(char_literal93);
                    adaptor.addChild(root_0, char_literal93_tree);
                    }
                    pushFollow(FOLLOW_type_in_castExpression2937);
                    t2=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t2.getTree());
                    char_literal94=(Token)match(input,37,FOLLOW_37_in_castExpression2939); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal94_tree = (CommonTree)adaptor.create(char_literal94);
                    adaptor.addChild(root_0, char_literal94_tree);
                    }
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression2945);
                    exp2=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exp2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new CastExpression(pos(t2.start),context,exp2.value,t2.value);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class arguments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:363:1: arguments : '(' ( commaSeparatedExpressionList )? ')' ;
    public final MandaraxParser.arguments_return arguments() throws RecognitionException {
        MandaraxParser.arguments_return retval = new MandaraxParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal95=null;
        Token char_literal97=null;
        MandaraxParser.commaSeparatedExpressionList_return commaSeparatedExpressionList96 = null;


        CommonTree char_literal95_tree=null;
        CommonTree char_literal97_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:364:5: ( '(' ( commaSeparatedExpressionList )? ')' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:364:9: '(' ( commaSeparatedExpressionList )? ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal95=(Token)match(input,36,FOLLOW_36_in_arguments2967); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal95_tree = (CommonTree)adaptor.create(char_literal95);
            adaptor.addChild(root_0, char_literal95_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:364:13: ( commaSeparatedExpressionList )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( ((LA57_0>=Identifier && LA57_0<=DecimalLiteral)||LA57_0==36||(LA57_0>=55 && LA57_0<=56)||LA57_0==68||(LA57_0>=71 && LA57_0<=74)) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:0:0: commaSeparatedExpressionList
                    {
                    pushFollow(FOLLOW_commaSeparatedExpressionList_in_arguments2969);
                    commaSeparatedExpressionList96=commaSeparatedExpressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commaSeparatedExpressionList96.getTree());

                    }
                    break;

            }

            char_literal97=(Token)match(input,37,FOLLOW_37_in_arguments2972); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal97_tree = (CommonTree)adaptor.create(char_literal97);
            adaptor.addChild(root_0, char_literal97_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    // $ANTLR start synpred2_Mandarax
    public final void synpred2_Mandarax_fragment() throws RecognitionException {   
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:77:48: ( NEWLINE )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:77:48: NEWLINE
        {
        match(input,NEWLINE,FOLLOW_NEWLINE_in_synpred2_Mandarax83); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_Mandarax

    // $ANTLR start synpred4_Mandarax
    public final void synpred4_Mandarax_fragment() throws RecognitionException {   
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:78:6: ( NEWLINE )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:78:6: NEWLINE
        {
        match(input,NEWLINE,FOLLOW_NEWLINE_in_synpred4_Mandarax97); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_Mandarax

    // $ANTLR start synpred6_Mandarax
    public final void synpred6_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.relationshipDefinition_return rel = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:78:69: ( (rel= relationshipDefinition ) )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:78:69: (rel= relationshipDefinition )
        {
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:78:69: (rel= relationshipDefinition )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:78:70: rel= relationshipDefinition
        {
        pushFollow(FOLLOW_relationshipDefinition_in_synpred6_Mandarax118);
        rel=relationshipDefinition();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred6_Mandarax

    // $ANTLR start synpred9_Mandarax
    public final void synpred9_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.annotationList_return a = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:91:10: (a= annotationList )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:91:10: a= annotationList
        {
        pushFollow(FOLLOW_annotationList_in_synpred9_Mandarax258);
        a=annotationList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_Mandarax

    // $ANTLR start synpred13_Mandarax
    public final void synpred13_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.annotationList_return a = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:112:8: (a= annotationList )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:112:8: a= annotationList
        {
        pushFollow(FOLLOW_annotationList_in_synpred13_Mandarax462);
        a=annotationList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_Mandarax

    // $ANTLR start synpred17_Mandarax
    public final void synpred17_Mandarax_fragment() throws RecognitionException {   
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:116:19: ( NEWLINE )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:116:19: NEWLINE
        {
        match(input,NEWLINE,FOLLOW_NEWLINE_in_synpred17_Mandarax534); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred17_Mandarax

    // $ANTLR start synpred18_Mandarax
    public final void synpred18_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.rule_return r = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:116:28: (r= rule )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:116:28: r= rule
        {
        pushFollow(FOLLOW_rule_in_synpred18_Mandarax541);
        r=rule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_Mandarax

    // $ANTLR start synpred54_Mandarax
    public final void synpred54_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.equalityExpression_return part = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:262:62: ( '&' part= equalityExpression )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:262:62: '&' part= equalityExpression
        {
        match(input,57,FOLLOW_57_in_synpred54_Mandarax1817); if (state.failed) return ;
        pushFollow(FOLLOW_equalityExpression_in_synpred54_Mandarax1824);
        part=equalityExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred54_Mandarax

    // $ANTLR start synpred63_Mandarax
    public final void synpred63_Mandarax_fragment() throws RecognitionException {   
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:291:9: ( '<' '<' )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:291:10: '<' '<'
        {
        match(input,65,FOLLOW_65_in_synpred63_Mandarax2110); if (state.failed) return ;
        match(input,65,FOLLOW_65_in_synpred63_Mandarax2112); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred63_Mandarax

    // $ANTLR start synpred64_Mandarax
    public final void synpred64_Mandarax_fragment() throws RecognitionException {   
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:294:9: ( '>' '>' '>' )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:294:10: '>' '>' '>'
        {
        match(input,66,FOLLOW_66_in_synpred64_Mandarax2146); if (state.failed) return ;
        match(input,66,FOLLOW_66_in_synpred64_Mandarax2148); if (state.failed) return ;
        match(input,66,FOLLOW_66_in_synpred64_Mandarax2150); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred64_Mandarax

    // $ANTLR start synpred65_Mandarax
    public final void synpred65_Mandarax_fragment() throws RecognitionException {   
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:299:9: ( '>' '>' )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:299:10: '>' '>'
        {
        match(input,66,FOLLOW_66_in_synpred65_Mandarax2188); if (state.failed) return ;
        match(input,66,FOLLOW_66_in_synpred65_Mandarax2190); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred65_Mandarax

    // $ANTLR start synpred74_Mandarax
    public final void synpred74_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.castExpression_return r3 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:321:9: (r3= castExpression )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:321:9: r3= castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred74_Mandarax2437);
        r3=castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred74_Mandarax

    // $ANTLR start synpred76_Mandarax
    public final void synpred76_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.functionInvocation_return r9 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:323:9: (r9= functionInvocation )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:323:9: r9= functionInvocation
        {
        pushFollow(FOLLOW_functionInvocation_in_synpred76_Mandarax2469);
        r9=functionInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred76_Mandarax

    // $ANTLR start synpred77_Mandarax
    public final void synpred77_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.methodInvocation_return r8 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:324:9: (r8= methodInvocation )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:324:9: r8= methodInvocation
        {
        pushFollow(FOLLOW_methodInvocation_in_synpred77_Mandarax2485);
        r8=methodInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred77_Mandarax

    // $ANTLR start synpred78_Mandarax
    public final void synpred78_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.propertyAccess_return r7 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:325:9: (r7= propertyAccess )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:325:9: r7= propertyAccess
        {
        pushFollow(FOLLOW_propertyAccess_in_synpred78_Mandarax2501);
        r7=propertyAccess();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred78_Mandarax

    // $ANTLR start synpred79_Mandarax
    public final void synpred79_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.objectref_return r4 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:326:9: (r4= objectref )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:326:9: r4= objectref
        {
        pushFollow(FOLLOW_objectref_in_synpred79_Mandarax2517);
        r4=objectref();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred79_Mandarax

    // $ANTLR start synpred80_Mandarax
    public final void synpred80_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.qualifiedName_return r5 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:327:9: (r5= qualifiedName )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:327:9: r5= qualifiedName
        {
        pushFollow(FOLLOW_qualifiedName_in_synpred80_Mandarax2533);
        r5=qualifiedName();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred80_Mandarax

    // $ANTLR start synpred81_Mandarax
    public final void synpred81_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.parExpression_return r6 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:328:9: (r6= parExpression )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:328:9: r6= parExpression
        {
        pushFollow(FOLLOW_parExpression_in_synpred81_Mandarax2549);
        r6=parExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred81_Mandarax

    // $ANTLR start synpred89_Mandarax
    public final void synpred89_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.primitiveType_return t1 = null;

        MandaraxParser.unaryExpression_return exp1 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:359:8: ( '(' t1= primitiveType ')' exp1= unaryExpression )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:359:8: '(' t1= primitiveType ')' exp1= unaryExpression
        {
        match(input,36,FOLLOW_36_in_synpred89_Mandarax2906); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred89_Mandarax2912);
        t1=primitiveType();

        state._fsp--;
        if (state.failed) return ;
        match(input,37,FOLLOW_37_in_synpred89_Mandarax2914); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred89_Mandarax2920);
        exp1=unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred89_Mandarax

    // Delegated rules

    public final boolean synpred76_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA39 dfa39 = new DFA39(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA49 dfa49 = new DFA49(this);
    static final String DFA39_eotS =
        "\14\uffff";
    static final String DFA39_eofS =
        "\1\1\13\uffff";
    static final String DFA39_minS =
        "\1\34\7\uffff\1\0\3\uffff";
    static final String DFA39_maxS =
        "\1\73\7\uffff\1\0\3\uffff";
    static final String DFA39_acceptS =
        "\1\uffff\1\2\11\uffff\1\1";
    static final String DFA39_specialS =
        "\10\uffff\1\0\3\uffff}>";
    static final String[] DFA39_transitionS = {
            "\1\1\1\uffff\2\1\5\uffff\1\1\3\uffff\2\1\16\uffff\1\10\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "()* loopback of 262:60: ( '&' part= equalityExpression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_8 = input.LA(1);

                         
                        int index39_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_Mandarax()) ) {s = 11;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA45_eotS =
        "\22\uffff";
    static final String DFA45_eofS =
        "\22\uffff";
    static final String DFA45_minS =
        "\1\101\1\uffff\1\102\1\5\16\uffff";
    static final String DFA45_maxS =
        "\1\102\1\uffff\1\102\1\112\16\uffff";
    static final String DFA45_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\15\3";
    static final String DFA45_specialS =
        "\1\0\2\uffff\1\1\16\uffff}>";
    static final String[] DFA45_transitionS = {
            "\1\1\1\2",
            "",
            "\1\3",
            "\1\12\1\16\1\13\1\14\1\15\32\uffff\1\10\22\uffff\1\17\1\20"+
            "\11\uffff\1\4\1\uffff\1\5\2\uffff\1\6\1\7\1\21\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "290:1: shiftOp returns [BinOp value] : ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA45_0 = input.LA(1);

                         
                        int index45_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA45_0==65) && (synpred63_Mandarax())) {s = 1;}

                        else if ( (LA45_0==66) ) {s = 2;}

                         
                        input.seek(index45_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA45_3 = input.LA(1);

                         
                        int index45_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA45_3==66) && (synpred64_Mandarax())) {s = 4;}

                        else if ( (LA45_3==68) && (synpred65_Mandarax())) {s = 5;}

                        else if ( (LA45_3==71) && (synpred65_Mandarax())) {s = 6;}

                        else if ( (LA45_3==72) && (synpred65_Mandarax())) {s = 7;}

                        else if ( (LA45_3==36) && (synpred65_Mandarax())) {s = 8;}

                        else if ( (LA45_3==74) && (synpred65_Mandarax())) {s = 9;}

                        else if ( (LA45_3==Identifier) && (synpred65_Mandarax())) {s = 10;}

                        else if ( (LA45_3==HexLiteral) && (synpred65_Mandarax())) {s = 11;}

                        else if ( (LA45_3==OctalLiteral) && (synpred65_Mandarax())) {s = 12;}

                        else if ( (LA45_3==DecimalLiteral) && (synpred65_Mandarax())) {s = 13;}

                        else if ( (LA45_3==StringLiteral) && (synpred65_Mandarax())) {s = 14;}

                        else if ( (LA45_3==55) && (synpred65_Mandarax())) {s = 15;}

                        else if ( (LA45_3==56) && (synpred65_Mandarax())) {s = 16;}

                        else if ( (LA45_3==73) && (synpred65_Mandarax())) {s = 17;}

                         
                        input.seek(index45_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 45, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA49_eotS =
        "\24\uffff";
    static final String DFA49_eofS =
        "\24\uffff";
    static final String DFA49_minS =
        "\1\5\2\uffff\1\0\1\uffff\7\0\10\uffff";
    static final String DFA49_maxS =
        "\1\112\2\uffff\1\0\1\uffff\7\0\10\uffff";
    static final String DFA49_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\7\uffff\1\13\1\3\1\6\1\7\1\10\1\12"+
        "\1\5\1\11";
    static final String DFA49_specialS =
        "\3\uffff\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\10\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\5\1\11\1\6\1\7\1\10\32\uffff\1\3\22\uffff\1\12\1\13\16\uffff"+
            "\1\1\1\2\1\14\1\4",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "318:1: unaryExpressionNotPlusMinus returns [Expression value] : ( '~' r1= unaryExpression | '!' r2= unaryExpression | r3= castExpression | r11= constructorInvocation | r9= functionInvocation | r8= methodInvocation | r7= propertyAccess | r4= objectref | r5= qualifiedName | r6= parExpression | r10= nullValue );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA49_3 = input.LA(1);

                         
                        int index49_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_Mandarax()) ) {s = 13;}

                        else if ( (synpred77_Mandarax()) ) {s = 14;}

                        else if ( (synpred78_Mandarax()) ) {s = 15;}

                        else if ( (synpred79_Mandarax()) ) {s = 16;}

                        else if ( (synpred81_Mandarax()) ) {s = 17;}

                         
                        input.seek(index49_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA49_5 = input.LA(1);

                         
                        int index49_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_Mandarax()) ) {s = 18;}

                        else if ( (synpred77_Mandarax()) ) {s = 14;}

                        else if ( (synpred78_Mandarax()) ) {s = 15;}

                        else if ( (synpred79_Mandarax()) ) {s = 16;}

                        else if ( (synpred80_Mandarax()) ) {s = 19;}

                         
                        input.seek(index49_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA49_6 = input.LA(1);

                         
                        int index49_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_Mandarax()) ) {s = 14;}

                        else if ( (synpred78_Mandarax()) ) {s = 15;}

                        else if ( (synpred79_Mandarax()) ) {s = 16;}

                         
                        input.seek(index49_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA49_7 = input.LA(1);

                         
                        int index49_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_Mandarax()) ) {s = 14;}

                        else if ( (synpred78_Mandarax()) ) {s = 15;}

                        else if ( (synpred79_Mandarax()) ) {s = 16;}

                         
                        input.seek(index49_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA49_8 = input.LA(1);

                         
                        int index49_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_Mandarax()) ) {s = 14;}

                        else if ( (synpred78_Mandarax()) ) {s = 15;}

                        else if ( (synpred79_Mandarax()) ) {s = 16;}

                         
                        input.seek(index49_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA49_9 = input.LA(1);

                         
                        int index49_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_Mandarax()) ) {s = 14;}

                        else if ( (synpred78_Mandarax()) ) {s = 15;}

                        else if ( (synpred79_Mandarax()) ) {s = 16;}

                         
                        input.seek(index49_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA49_10 = input.LA(1);

                         
                        int index49_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_Mandarax()) ) {s = 14;}

                        else if ( (synpred78_Mandarax()) ) {s = 15;}

                        else if ( (synpred79_Mandarax()) ) {s = 16;}

                         
                        input.seek(index49_10);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA49_11 = input.LA(1);

                         
                        int index49_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_Mandarax()) ) {s = 14;}

                        else if ( (synpred78_Mandarax()) ) {s = 15;}

                        else if ( (synpred79_Mandarax()) ) {s = 16;}

                         
                        input.seek(index49_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_NEWLINE_in_compilationUnit71 = new BitSet(new long[]{0x0000000020000010L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit78 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_NEWLINE_in_compilationUnit80 = new BitSet(new long[]{0x007F800D01000030L});
    public static final BitSet FOLLOW_NEWLINE_in_compilationUnit83 = new BitSet(new long[]{0x007F800D01000030L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit85 = new BitSet(new long[]{0x007F800D01000030L});
    public static final BitSet FOLLOW_NEWLINE_in_compilationUnit97 = new BitSet(new long[]{0x007F800D01000032L});
    public static final BitSet FOLLOW_objectDeclaration_in_compilationUnit106 = new BitSet(new long[]{0x007F800D01000032L});
    public static final BitSet FOLLOW_relationshipDefinition_in_compilationUnit118 = new BitSet(new long[]{0x007F800D01000032L});
    public static final BitSet FOLLOW_24_in_importDeclaration156 = new BitSet(new long[]{0x0000000002000020L});
    public static final BitSet FOLLOW_25_in_importDeclaration163 = new BitSet(new long[]{0x0000000002000020L});
    public static final BitSet FOLLOW_qualifiedName2_in_importDeclaration170 = new BitSet(new long[]{0x0000000014000000L});
    public static final BitSet FOLLOW_26_in_importDeclaration176 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_importDeclaration178 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_28_in_importDeclaration182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_packageDeclaration214 = new BitSet(new long[]{0x0000000002000020L});
    public static final BitSet FOLLOW_qualifiedName2_in_packageDeclaration219 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_28_in_packageDeclaration222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationList_in_rule258 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_rule266 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_rule268 = new BitSet(new long[]{0x01800010800003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_conjunction_in_rule275 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_31_in_rule280 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_functionInvocation_in_rule286 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_28_in_rule300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_annotation325 = new BitSet(new long[]{0x0000000002000020L});
    public static final BitSet FOLLOW_qualifiedName2_in_annotation331 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_33_in_annotation333 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_StringLiteral_in_annotation339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_objectDeclaration368 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_objectDeclaration372 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_33_in_objectDeclaration374 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_expression_in_objectDeclaration380 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_28_in_objectDeclaration383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWLINE_in_annotationList417 = new BitSet(new long[]{0x0000000100000012L});
    public static final BitSet FOLLOW_annotation_in_annotationList424 = new BitSet(new long[]{0x0000000100000012L});
    public static final BitSet FOLLOW_annotationList_in_relationshipDefinition462 = new BitSet(new long[]{0x0000000C00000000L});
    public static final BitSet FOLLOW_set_in_relationshipDefinition468 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_relationshipDefinition476 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_relationshipDefinition478 = new BitSet(new long[]{0x007F800000000020L});
    public static final BitSet FOLLOW_variableDeclarationList_in_relationshipDefinition484 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_relationshipDefinition486 = new BitSet(new long[]{0x000000C000000000L});
    public static final BitSet FOLLOW_38_in_relationshipDefinition489 = new BitSet(new long[]{0x0000000002000020L});
    public static final BitSet FOLLOW_qualifiedNameList2_in_relationshipDefinition495 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_39_in_relationshipDefinition504 = new BitSet(new long[]{0x0000180000000020L});
    public static final BitSet FOLLOW_functionDeclarationList_in_relationshipDefinition510 = new BitSet(new long[]{0x0000010000000010L});
    public static final BitSet FOLLOW_NEWLINE_in_relationshipDefinition528 = new BitSet(new long[]{0x0000010000000010L});
    public static final BitSet FOLLOW_40_in_relationshipDefinition531 = new BitSet(new long[]{0x0000000100000030L});
    public static final BitSet FOLLOW_NEWLINE_in_relationshipDefinition534 = new BitSet(new long[]{0x0000020100000030L});
    public static final BitSet FOLLOW_rule_in_relationshipDefinition541 = new BitSet(new long[]{0x0000020100000030L});
    public static final BitSet FOLLOW_41_in_relationshipDefinition546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_variableDeclaration579 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclaration_in_variableDeclarationList625 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_42_in_variableDeclarationList630 = new BitSet(new long[]{0x007F800000000020L});
    public static final BitSet FOLLOW_variableDeclaration_in_variableDeclarationList636 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_visibility_in_functionDeclaration674 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_functionDeclaration680 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_functionDeclaration682 = new BitSet(new long[]{0x0000002000000020L});
    public static final BitSet FOLLOW_nameList_in_functionDeclaration688 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_functionDeclaration690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionDeclaration_in_functionDeclarationList729 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_42_in_functionDeclarationList734 = new BitSet(new long[]{0x0000180000000020L});
    public static final BitSet FOLLOW_functionDeclaration_in_functionDeclarationList740 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_43_in_visibility772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_visibility777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_constantDeclarator845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_typeName869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_type891 = new BitSet(new long[]{0x0000200000000002L});
    public static final BitSet FOLLOW_45_in_type894 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_46_in_type896 = new BitSet(new long[]{0x0000200000000002L});
    public static final BitSet FOLLOW_primitiveType_in_type909 = new BitSet(new long[]{0x0000200000000002L});
    public static final BitSet FOLLOW_45_in_type912 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_46_in_type914 = new BitSet(new long[]{0x0000200000000002L});
    public static final BitSet FOLLOW_Identifier_in_classOrInterfaceType938 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_classOrInterfaceType943 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_classOrInterfaceType949 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_47_in_primitiveType977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_primitiveType989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_primitiveType1001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_primitiveType1013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_primitiveType1025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_primitiveType1037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_primitiveType1049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_primitiveType1061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList1087 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_42_in_qualifiedNameList1090 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList1092 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName1116 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_qualifiedName1121 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName1127 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_qualifiedName2_in_qualifiedNameList21160 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_42_in_qualifiedNameList21165 = new BitSet(new long[]{0x0000000002000020L});
    public static final BitSet FOLLOW_qualifiedName2_in_qualifiedNameList21171 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName21198 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_qualifiedName21203 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName21209 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_Identifier_in_nameList1240 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_42_in_nameList1245 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_nameList1251 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_integerLiteral_in_literal1282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal1300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_literal1316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HexLiteral_in_integerLiteral1346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OctalLiteral_in_integerLiteral1362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DecimalLiteral_in_integerLiteral1378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_booleanLiteral1407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_booleanLiteral1423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs1445 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_42_in_elementValuePairs1448 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs1450 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_Identifier_in_elementValuePair1471 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_33_in_elementValuePair1473 = new BitSet(new long[]{0x01800110000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair1475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue1498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue1508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_elementValueArrayInitializer1531 = new BitSet(new long[]{0x01800710000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer1534 = new BitSet(new long[]{0x0000060000000000L});
    public static final BitSet FOLLOW_42_in_elementValueArrayInitializer1537 = new BitSet(new long[]{0x01800110000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer1539 = new BitSet(new long[]{0x0000060000000000L});
    public static final BitSet FOLLOW_42_in_elementValueArrayInitializer1546 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_41_in_elementValueArrayInitializer1550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_parExpression1579 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_expression_in_parExpression1585 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_parExpression1587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_commaSeparatedExpressionList1625 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_42_in_commaSeparatedExpressionList1630 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_expression_in_commaSeparatedExpressionList1636 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_expression_in_andSeparatedExpressionList1673 = new BitSet(new long[]{0x0200000000000002L});
    public static final BitSet FOLLOW_57_in_andSeparatedExpressionList1678 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_expression_in_andSeparatedExpressionList1684 = new BitSet(new long[]{0x0200000000000002L});
    public static final BitSet FOLLOW_disjunction_in_conditionalExpression1716 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_58_in_conditionalExpression1720 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression1726 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_conditionalExpression1728 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression1734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_disjunction1767 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_59_in_disjunction1773 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_conjunction_in_disjunction1779 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_equalityExpression_in_conjunction1811 = new BitSet(new long[]{0x0200000000000002L});
    public static final BitSet FOLLOW_57_in_conjunction1817 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_equalityExpression_in_conjunction1824 = new BitSet(new long[]{0x0200000000000002L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression1856 = new BitSet(new long[]{0x3000000000000002L});
    public static final BitSet FOLLOW_set_in_equalityExpression1866 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression1878 = new BitSet(new long[]{0x3000000000000002L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression1910 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_62_in_instanceOfExpression1913 = new BitSet(new long[]{0x007F800000000020L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression1919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression1951 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000007L});
    public static final BitSet FOLLOW_relationalOp_in_relationalExpression1961 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression1967 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000007L});
    public static final BitSet FOLLOW_63_in_relationalOp2001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_relationalOp2013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_relationalOp2023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_relationalOp2035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression2065 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000006L});
    public static final BitSet FOLLOW_shiftOp_in_shiftExpression2075 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression2081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_shiftOp2118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_shiftOp2122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_shiftOp2156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_shiftOp2160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_shiftOp2164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_shiftOp2196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_shiftOp2200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression2239 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000018L});
    public static final BitSet FOLLOW_set_in_additiveExpression2248 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression2260 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000018L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression2291 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000060L});
    public static final BitSet FOLLOW_set_in_multiplicativeExpression2300 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression2318 = new BitSet(new long[]{0x0000000008000002L,0x0000000000000060L});
    public static final BitSet FOLLOW_68_in_unaryExpression2350 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression2356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression2372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_unaryExpressionNotPlusMinus2397 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus2403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_unaryExpressionNotPlusMinus2415 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus2421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus2437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructorInvocation_in_unaryExpressionNotPlusMinus2453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionInvocation_in_unaryExpressionNotPlusMinus2469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodInvocation_in_unaryExpressionNotPlusMinus2485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyAccess_in_unaryExpressionNotPlusMinus2501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectref_in_unaryExpressionNotPlusMinus2517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_unaryExpressionNotPlusMinus2533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_unaryExpressionNotPlusMinus2549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nullValue_in_unaryExpressionNotPlusMinus2565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_nullValue2594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectref_in_propertyAccess2630 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_propertyAccess2635 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_propertyAccess2640 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_objectref_in_methodInvocation2673 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_methodInvocation2678 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_Identifier_in_methodInvocation2684 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_methodInvocation2686 = new BitSet(new long[]{0x01800030000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_commaSeparatedExpressionList_in_methodInvocation2692 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_methodInvocation2696 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_Identifier_in_functionInvocation2733 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_functionInvocation2736 = new BitSet(new long[]{0x01800030000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_commaSeparatedExpressionList_in_functionInvocation2743 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_functionInvocation2747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_constructorInvocation2786 = new BitSet(new long[]{0x0000000002000020L});
    public static final BitSet FOLLOW_qualifiedName2_in_constructorInvocation2792 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_constructorInvocation2795 = new BitSet(new long[]{0x01800030000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_commaSeparatedExpressionList_in_constructorInvocation2802 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_constructorInvocation2806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_objectref2843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_objectref2858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_objectref2873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_castExpression2906 = new BitSet(new long[]{0x007F800000000020L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression2912 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_castExpression2914 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression2920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_castExpression2931 = new BitSet(new long[]{0x007F800000000020L});
    public static final BitSet FOLLOW_type_in_castExpression2937 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_castExpression2939 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression2945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_arguments2967 = new BitSet(new long[]{0x01800030000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_commaSeparatedExpressionList_in_arguments2969 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_arguments2972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWLINE_in_synpred2_Mandarax83 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWLINE_in_synpred4_Mandarax97 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relationshipDefinition_in_synpred6_Mandarax118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationList_in_synpred9_Mandarax258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationList_in_synpred13_Mandarax462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWLINE_in_synpred17_Mandarax534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rule_in_synpred18_Mandarax541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_synpred54_Mandarax1817 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_equalityExpression_in_synpred54_Mandarax1824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_synpred63_Mandarax2110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_synpred63_Mandarax2112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_synpred64_Mandarax2146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_synpred64_Mandarax2148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_synpred64_Mandarax2150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_synpred65_Mandarax2188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_synpred65_Mandarax2190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_synpred74_Mandarax2437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionInvocation_in_synpred76_Mandarax2469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodInvocation_in_synpred77_Mandarax2485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyAccess_in_synpred78_Mandarax2501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectref_in_synpred79_Mandarax2517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_synpred80_Mandarax2533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_synpred81_Mandarax2549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_synpred89_Mandarax2906 = new BitSet(new long[]{0x007F800000000020L});
    public static final BitSet FOLLOW_primitiveType_in_synpred89_Mandarax2912 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_synpred89_Mandarax2914 = new BitSet(new long[]{0x01800010000003E0L,0x0000000000000790L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred89_Mandarax2920 = new BitSet(new long[]{0x0000000000000002L});

}