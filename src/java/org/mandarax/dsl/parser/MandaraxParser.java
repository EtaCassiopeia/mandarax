// $ANTLR 3.2 Sep 23, 2009 12:02:23 /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g 2010-09-06 21:20:53
 
/*
 * Copyright 2010 Jens Dietrich 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
 * Unless required by applicable law or agreed to in writing, software distributed under the 
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
 * either express or implied. See the License for the specific language governing permissions 
 * and limitations under the License.
 */
 
/**
 * Parser generated by ANTLR. The grammar is based on fragements taken from the Java 1.5 developed 
 * by Terence Parr and released under the BSD license. See http://www.antlr.org/grammar/1152141644268/Java.g
 * for details.
 * @author jens dietrich
 */ 
package org.mandarax.dsl.parser;
import org.mandarax.dsl.*;
import static org.mandarax.dsl.Utils.*;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class MandaraxParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Identifier", "StringLiteral", "HexLiteral", "OctalLiteral", "DecimalLiteral", "HexDigit", "IntegerTypeSuffix", "Exponent", "FloatTypeSuffix", "FloatingPointLiteral", "EscapeSequence", "CharacterLiteral", "UnicodeEscape", "OctalEscape", "Letter", "JavaIDDigit", "WS", "COMMENT", "LINE_COMMENT", "'import'", "'static'", "'.'", "'*'", "';'", "'package'", "':'", "'->'", "'@'", "'='", "'relationship'", "'rel'", "'('", "')'", "'extends'", "'queries'", "','", "'public'", "'private'", "'['", "']'", "'boolean'", "'char'", "'byte'", "'short'", "'int'", "'long'", "'float'", "'double'", "'true'", "'false'", "'{'", "'}'", "'&'", "'?'", "'|'", "'=='", "'!='", "'instanceof'", "'<='", "'>='", "'<'", "'>'", "'+'", "'-'", "'/'", "'%'", "'~'", "'!'"
    };
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__29=29;
    public static final int T__65=65;
    public static final int T__28=28;
    public static final int T__27=27;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__26=26;
    public static final int FloatTypeSuffix=12;
    public static final int T__25=25;
    public static final int OctalLiteral=7;
    public static final int T__24=24;
    public static final int T__23=23;
    public static final int CharacterLiteral=15;
    public static final int Exponent=11;
    public static final int T__61=61;
    public static final int EOF=-1;
    public static final int T__60=60;
    public static final int HexDigit=9;
    public static final int Identifier=4;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__59=59;
    public static final int COMMENT=21;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int HexLiteral=6;
    public static final int T__43=43;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int LINE_COMMENT=22;
    public static final int IntegerTypeSuffix=10;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int DecimalLiteral=8;
    public static final int StringLiteral=5;
    public static final int T__30=30;
    public static final int T__31=31;
    public static final int T__32=32;
    public static final int WS=20;
    public static final int T__71=71;
    public static final int T__33=33;
    public static final int T__34=34;
    public static final int T__35=35;
    public static final int T__70=70;
    public static final int T__36=36;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int UnicodeEscape=16;
    public static final int FloatingPointLiteral=13;
    public static final int JavaIDDigit=19;
    public static final int Letter=18;
    public static final int OctalEscape=17;
    public static final int EscapeSequence=14;

    // delegates
    // delegators


        public MandaraxParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public MandaraxParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[124+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return MandaraxParser.tokenNames; }
    public String getGrammarFileName() { return "/Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g"; }


      private Context context = new Context(); 
      protected ErrorReporter errorHandler = new ErrorReporter();
      
      private Position pos(Token token) {
      	return new Position(token.getLine(),token.getCharPositionInLine());
      }
      private Position pos(ASTNode expression) {
      	return expression.getPosition().clone();
      }
      public void displayRecognitionError(String[] tokenNames,RecognitionException e) {
      	String msg = getErrorMessage(e, tokenNames);
      	errorHandler.handleError(msg,e);
      }



    public static class importDeclaration_return extends ParserRuleReturnScope {
        public ImportDeclaration value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:76:1: importDeclaration returns [ImportDeclaration value] : i= 'import' ( (s= 'static' )? ) (n= qualifiedName2 ) (w= '.' '*' )? ';' ;
    public final MandaraxParser.importDeclaration_return importDeclaration() throws RecognitionException {
        MandaraxParser.importDeclaration_return retval = new MandaraxParser.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token w=null;
        Token char_literal1=null;
        Token char_literal2=null;
        MandaraxParser.qualifiedName2_return n = null;


        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree w_tree=null;
        CommonTree char_literal1_tree=null;
        CommonTree char_literal2_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:77:5: (i= 'import' ( (s= 'static' )? ) (n= qualifiedName2 ) (w= '.' '*' )? ';' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:77:9: i= 'import' ( (s= 'static' )? ) (n= qualifiedName2 ) (w= '.' '*' )? ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            i=(Token)match(input,23,FOLLOW_23_in_importDeclaration75); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:77:20: ( (s= 'static' )? )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:77:21: (s= 'static' )?
            {
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:77:23: (s= 'static' )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==24) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:0:0: s= 'static'
                    {
                    s=(Token)match(input,24,FOLLOW_24_in_importDeclaration82); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    s_tree = (CommonTree)adaptor.create(s);
                    adaptor.addChild(root_0, s_tree);
                    }

                    }
                    break;

            }


            }

            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:77:36: (n= qualifiedName2 )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:77:37: n= qualifiedName2
            {
            pushFollow(FOLLOW_qualifiedName2_in_importDeclaration89);
            n=qualifiedName2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, n.getTree());

            }

            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:77:55: (w= '.' '*' )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==25) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:77:56: w= '.' '*'
                    {
                    w=(Token)match(input,25,FOLLOW_25_in_importDeclaration95); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    w_tree = (CommonTree)adaptor.create(w);
                    adaptor.addChild(root_0, w_tree);
                    }
                    char_literal1=(Token)match(input,26,FOLLOW_26_in_importDeclaration97); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal1_tree = (CommonTree)adaptor.create(char_literal1);
                    adaptor.addChild(root_0, char_literal1_tree);
                    }

                    }
                    break;

            }

            char_literal2=(Token)match(input,27,FOLLOW_27_in_importDeclaration101); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal2_tree = (CommonTree)adaptor.create(char_literal2);
            adaptor.addChild(root_0, char_literal2_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new ImportDeclaration(pos(i),context,n.value,s!=null,w!=null);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        public PackageDeclaration value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDeclaration"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:80:1: packageDeclaration returns [PackageDeclaration value] : p= 'package' (n= qualifiedName2 ) ;
    public final MandaraxParser.packageDeclaration_return packageDeclaration() throws RecognitionException {
        MandaraxParser.packageDeclaration_return retval = new MandaraxParser.packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token p=null;
        MandaraxParser.qualifiedName2_return n = null;


        CommonTree p_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:81:5: (p= 'package' (n= qualifiedName2 ) )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:81:8: p= 'package' (n= qualifiedName2 )
            {
            root_0 = (CommonTree)adaptor.nil();

            p=(Token)match(input,28,FOLLOW_28_in_packageDeclaration133); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            p_tree = (CommonTree)adaptor.create(p);
            adaptor.addChild(root_0, p_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:81:20: (n= qualifiedName2 )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:81:21: n= qualifiedName2
            {
            pushFollow(FOLLOW_qualifiedName2_in_packageDeclaration138);
            n=qualifiedName2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, n.getTree());

            }

            if ( state.backtracking==0 ) {
              retval.value = new PackageDeclaration(pos(p),context,n.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class rule_return extends ParserRuleReturnScope {
        public Rule value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rule"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:84:1: rule returns [Rule value] : id= Identifier ':' (body= conjunction )? '->' concl= functionInvocation ';' ;
    public final MandaraxParser.rule_return rule() throws RecognitionException {
        MandaraxParser.rule_return retval = new MandaraxParser.rule_return();
        retval.start = input.LT(1);
        int rule_StartIndex = input.index();
        CommonTree root_0 = null;

        Token id=null;
        Token char_literal3=null;
        Token string_literal4=null;
        Token char_literal5=null;
        MandaraxParser.conjunction_return body = null;

        MandaraxParser.functionInvocation_return concl = null;


        CommonTree id_tree=null;
        CommonTree char_literal3_tree=null;
        CommonTree string_literal4_tree=null;
        CommonTree char_literal5_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:85:5: (id= Identifier ':' (body= conjunction )? '->' concl= functionInvocation ';' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:85:9: id= Identifier ':' (body= conjunction )? '->' concl= functionInvocation ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_rule173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            id_tree = (CommonTree)adaptor.create(id);
            adaptor.addChild(root_0, id_tree);
            }
            char_literal3=(Token)match(input,29,FOLLOW_29_in_rule175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal3_tree = (CommonTree)adaptor.create(char_literal3);
            adaptor.addChild(root_0, char_literal3_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:85:29: (body= conjunction )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( ((LA3_0>=Identifier && LA3_0<=DecimalLiteral)||LA3_0==35||(LA3_0>=52 && LA3_0<=53)||LA3_0==67||(LA3_0>=70 && LA3_0<=71)) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:85:30: body= conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_rule182);
                    body=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());

                    }
                    break;

            }

            string_literal4=(Token)match(input,30,FOLLOW_30_in_rule187); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal4_tree = (CommonTree)adaptor.create(string_literal4);
            adaptor.addChild(root_0, string_literal4_tree);
            }
            pushFollow(FOLLOW_functionInvocation_in_rule193);
            concl=functionInvocation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concl.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new Rule(pos(id),context,id.getText(),body.value,(FunctionInvocation)concl.value);
            }
            char_literal5=(Token)match(input,27,FOLLOW_27_in_rule196); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal5_tree = (CommonTree)adaptor.create(char_literal5);
            adaptor.addChild(root_0, char_literal5_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, rule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rule"

    public static class annotation_return extends ParserRuleReturnScope {
        public Annotation value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:88:1: annotation returns [Annotation value] : '@' key= qualifiedName2 '=' val= StringLiteral ;
    public final MandaraxParser.annotation_return annotation() throws RecognitionException {
        MandaraxParser.annotation_return retval = new MandaraxParser.annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token val=null;
        Token char_literal6=null;
        Token char_literal7=null;
        MandaraxParser.qualifiedName2_return key = null;


        CommonTree val_tree=null;
        CommonTree char_literal6_tree=null;
        CommonTree char_literal7_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:89:1: ( '@' key= qualifiedName2 '=' val= StringLiteral )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:89:3: '@' key= qualifiedName2 '=' val= StringLiteral
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal6=(Token)match(input,31,FOLLOW_31_in_annotation217); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal6_tree = (CommonTree)adaptor.create(char_literal6);
            adaptor.addChild(root_0, char_literal6_tree);
            }
            pushFollow(FOLLOW_qualifiedName2_in_annotation223);
            key=qualifiedName2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, key.getTree());
            char_literal7=(Token)match(input,32,FOLLOW_32_in_annotation225); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal7_tree = (CommonTree)adaptor.create(char_literal7);
            adaptor.addChild(root_0, char_literal7_tree);
            }
            val=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_annotation231); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            val_tree = (CommonTree)adaptor.create(val);
            adaptor.addChild(root_0, val_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new Annotation(pos(key.start),context,key.value,val.getText().substring(1,val.getText().length()-1));
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class relationshipDefinition_return extends ParserRuleReturnScope {
        public RelationshipDefinition value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationshipDefinition"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:92:1: relationshipDefinition returns [RelationshipDefinition value] : q= ( 'relationship' | 'rel' ) ti= Identifier '(' tp= variableDeclarationList ')' ( 'extends' supers= qualifiedNameList2 )? 'queries' queries= functionDeclarationList ';' ;
    public final MandaraxParser.relationshipDefinition_return relationshipDefinition() throws RecognitionException {
        MandaraxParser.relationshipDefinition_return retval = new MandaraxParser.relationshipDefinition_return();
        retval.start = input.LT(1);
        int relationshipDefinition_StartIndex = input.index();
        CommonTree root_0 = null;

        Token q=null;
        Token ti=null;
        Token char_literal8=null;
        Token char_literal9=null;
        Token string_literal10=null;
        Token string_literal11=null;
        Token char_literal12=null;
        MandaraxParser.variableDeclarationList_return tp = null;

        MandaraxParser.qualifiedNameList2_return supers = null;

        MandaraxParser.functionDeclarationList_return queries = null;


        CommonTree q_tree=null;
        CommonTree ti_tree=null;
        CommonTree char_literal8_tree=null;
        CommonTree char_literal9_tree=null;
        CommonTree string_literal10_tree=null;
        CommonTree string_literal11_tree=null;
        CommonTree char_literal12_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:93:5: (q= ( 'relationship' | 'rel' ) ti= Identifier '(' tp= variableDeclarationList ')' ( 'extends' supers= qualifiedNameList2 )? 'queries' queries= functionDeclarationList ';' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:93:7: q= ( 'relationship' | 'rel' ) ti= Identifier '(' tp= variableDeclarationList ')' ( 'extends' supers= qualifiedNameList2 )? 'queries' queries= functionDeclarationList ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            q=(Token)input.LT(1);
            if ( (input.LA(1)>=33 && input.LA(1)<=34) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(q));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            ti=(Token)match(input,Identifier,FOLLOW_Identifier_in_relationshipDefinition271); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ti_tree = (CommonTree)adaptor.create(ti);
            adaptor.addChild(root_0, ti_tree);
            }
            char_literal8=(Token)match(input,35,FOLLOW_35_in_relationshipDefinition273); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal8_tree = (CommonTree)adaptor.create(char_literal8);
            adaptor.addChild(root_0, char_literal8_tree);
            }
            pushFollow(FOLLOW_variableDeclarationList_in_relationshipDefinition279);
            tp=variableDeclarationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tp.getTree());
            char_literal9=(Token)match(input,36,FOLLOW_36_in_relationshipDefinition281); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal9_tree = (CommonTree)adaptor.create(char_literal9);
            adaptor.addChild(root_0, char_literal9_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:93:83: ( 'extends' supers= qualifiedNameList2 )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==37) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:93:84: 'extends' supers= qualifiedNameList2
                    {
                    string_literal10=(Token)match(input,37,FOLLOW_37_in_relationshipDefinition284); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal10_tree = (CommonTree)adaptor.create(string_literal10);
                    adaptor.addChild(root_0, string_literal10_tree);
                    }
                    pushFollow(FOLLOW_qualifiedNameList2_in_relationshipDefinition290);
                    supers=qualifiedNameList2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, supers.getTree());

                    }
                    break;

            }

            string_literal11=(Token)match(input,38,FOLLOW_38_in_relationshipDefinition294); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal11_tree = (CommonTree)adaptor.create(string_literal11);
            adaptor.addChild(root_0, string_literal11_tree);
            }
            pushFollow(FOLLOW_functionDeclarationList_in_relationshipDefinition300);
            queries=functionDeclarationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, queries.getTree());
            char_literal12=(Token)match(input,27,FOLLOW_27_in_relationshipDefinition302); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal12_tree = (CommonTree)adaptor.create(char_literal12);
            adaptor.addChild(root_0, char_literal12_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new RelationshipDefinition(pos(q),context,ti.getText(),tp.value,supers==null?new ArrayList<String>():supers.value,queries.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, relationshipDefinition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationshipDefinition"

    public static class variableDeclaration_return extends ParserRuleReturnScope {
        public VariableDeclaration value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaration"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:96:1: variableDeclaration returns [VariableDeclaration value] : t= type n= Identifier ;
    public final MandaraxParser.variableDeclaration_return variableDeclaration() throws RecognitionException {
        MandaraxParser.variableDeclaration_return retval = new MandaraxParser.variableDeclaration_return();
        retval.start = input.LT(1);
        int variableDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token n=null;
        MandaraxParser.type_return t = null;


        CommonTree n_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:97:5: (t= type n= Identifier )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:97:7: t= type n= Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_variableDeclaration337);
            t=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
            n=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration343); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            n_tree = (CommonTree)adaptor.create(n);
            adaptor.addChild(root_0, n_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new VariableDeclaration(pos(t.start),context,t.value,n.getText());
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, variableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaration"

    public static class variableDeclarationList_return extends ParserRuleReturnScope {
        public List<VariableDeclaration> value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarationList"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:100:1: variableDeclarationList returns [List<VariableDeclaration> value] : part1= variableDeclaration ( ',' part2= variableDeclaration )* ;
    public final MandaraxParser.variableDeclarationList_return variableDeclarationList() throws RecognitionException {
        MandaraxParser.variableDeclarationList_return retval = new MandaraxParser.variableDeclarationList_return();
        retval.start = input.LT(1);
        int variableDeclarationList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal13=null;
        MandaraxParser.variableDeclaration_return part1 = null;

        MandaraxParser.variableDeclaration_return part2 = null;


        CommonTree char_literal13_tree=null;

        retval.value = new ArrayList<VariableDeclaration>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:102:5: (part1= variableDeclaration ( ',' part2= variableDeclaration )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:102:7: part1= variableDeclaration ( ',' part2= variableDeclaration )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_variableDeclaration_in_variableDeclarationList383);
            part1=variableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value.add(part1.value);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:102:62: ( ',' part2= variableDeclaration )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==39) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:102:63: ',' part2= variableDeclaration
            	    {
            	    char_literal13=(Token)match(input,39,FOLLOW_39_in_variableDeclarationList388); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal13_tree = (CommonTree)adaptor.create(char_literal13);
            	    adaptor.addChild(root_0, char_literal13_tree);
            	    }
            	    pushFollow(FOLLOW_variableDeclaration_in_variableDeclarationList394);
            	    part2=variableDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.add(part2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, variableDeclarationList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarationList"

    public static class functionDeclaration_return extends ParserRuleReturnScope {
        public FunctionDeclaration value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionDeclaration"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:105:1: functionDeclaration returns [FunctionDeclaration value] : v= visibility n= Identifier '(' p= nameList ')' ;
    public final MandaraxParser.functionDeclaration_return functionDeclaration() throws RecognitionException {
        MandaraxParser.functionDeclaration_return retval = new MandaraxParser.functionDeclaration_return();
        retval.start = input.LT(1);
        int functionDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token n=null;
        Token char_literal14=null;
        Token char_literal15=null;
        MandaraxParser.visibility_return v = null;

        MandaraxParser.nameList_return p = null;


        CommonTree n_tree=null;
        CommonTree char_literal14_tree=null;
        CommonTree char_literal15_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:106:5: (v= visibility n= Identifier '(' p= nameList ')' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:106:7: v= visibility n= Identifier '(' p= nameList ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_visibility_in_functionDeclaration432);
            v=visibility();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, v.getTree());
            n=(Token)match(input,Identifier,FOLLOW_Identifier_in_functionDeclaration438); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            n_tree = (CommonTree)adaptor.create(n);
            adaptor.addChild(root_0, n_tree);
            }
            char_literal14=(Token)match(input,35,FOLLOW_35_in_functionDeclaration440); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal14_tree = (CommonTree)adaptor.create(char_literal14);
            adaptor.addChild(root_0, char_literal14_tree);
            }
            pushFollow(FOLLOW_nameList_in_functionDeclaration446);
            p=nameList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p.getTree());
            char_literal15=(Token)match(input,36,FOLLOW_36_in_functionDeclaration448); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal15_tree = (CommonTree)adaptor.create(char_literal15);
            adaptor.addChild(root_0, char_literal15_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new FunctionDeclaration(pos(n),context,v.value,n.getText(),p.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, functionDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "functionDeclaration"

    public static class functionDeclarationList_return extends ParserRuleReturnScope {
        public List<FunctionDeclaration> value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionDeclarationList"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:109:1: functionDeclarationList returns [List<FunctionDeclaration> value] : part1= functionDeclaration ( ',' part2= functionDeclaration )* ;
    public final MandaraxParser.functionDeclarationList_return functionDeclarationList() throws RecognitionException {
        MandaraxParser.functionDeclarationList_return retval = new MandaraxParser.functionDeclarationList_return();
        retval.start = input.LT(1);
        int functionDeclarationList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal16=null;
        MandaraxParser.functionDeclaration_return part1 = null;

        MandaraxParser.functionDeclaration_return part2 = null;


        CommonTree char_literal16_tree=null;

        retval.value = new ArrayList<FunctionDeclaration>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:111:5: (part1= functionDeclaration ( ',' part2= functionDeclaration )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:111:7: part1= functionDeclaration ( ',' part2= functionDeclaration )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_functionDeclaration_in_functionDeclarationList487);
            part1=functionDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value.add(part1.value);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:111:62: ( ',' part2= functionDeclaration )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==39) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:111:63: ',' part2= functionDeclaration
            	    {
            	    char_literal16=(Token)match(input,39,FOLLOW_39_in_functionDeclarationList492); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal16_tree = (CommonTree)adaptor.create(char_literal16);
            	    adaptor.addChild(root_0, char_literal16_tree);
            	    }
            	    pushFollow(FOLLOW_functionDeclaration_in_functionDeclarationList498);
            	    part2=functionDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.add(part2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, functionDeclarationList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "functionDeclarationList"

    public static class visibility_return extends ParserRuleReturnScope {
        public Visibility value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "visibility"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:114:1: visibility returns [Visibility value] : ( 'public' | ( 'private' ) )? ;
    public final MandaraxParser.visibility_return visibility() throws RecognitionException {
        MandaraxParser.visibility_return retval = new MandaraxParser.visibility_return();
        retval.start = input.LT(1);
        int visibility_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal17=null;
        Token string_literal18=null;

        CommonTree string_literal17_tree=null;
        CommonTree string_literal18_tree=null;

        retval.value = Visibility.PUBLIC;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:116:6: ( ( 'public' | ( 'private' ) )? )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:116:8: ( 'public' | ( 'private' ) )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:116:8: ( 'public' | ( 'private' ) )?
            int alt7=3;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==40) ) {
                alt7=1;
            }
            else if ( (LA7_0==41) ) {
                alt7=2;
            }
            switch (alt7) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:116:9: 'public'
                    {
                    string_literal17=(Token)match(input,40,FOLLOW_40_in_visibility530); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal17_tree = (CommonTree)adaptor.create(string_literal17);
                    adaptor.addChild(root_0, string_literal17_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:116:20: ( 'private' )
                    {
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:116:20: ( 'private' )
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:116:21: 'private'
                    {
                    string_literal18=(Token)match(input,41,FOLLOW_41_in_visibility535); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal18_tree = (CommonTree)adaptor.create(string_literal18);
                    adaptor.addChild(root_0, string_literal18_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = Visibility.PRIVATE;
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, visibility_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "visibility"

    public static class expression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:120:1: expression returns [Expression value] : r= conditionalExpression ;
    public final MandaraxParser.expression_return expression() throws RecognitionException {
        MandaraxParser.expression_return retval = new MandaraxParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        CommonTree root_0 = null;

        MandaraxParser.conditionalExpression_return r = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:121:5: (r= conditionalExpression )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:121:9: r= conditionalExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conditionalExpression_in_expression582);
            r=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, r.getTree());
            if ( state.backtracking==0 ) {
              retval.value =r.value;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class constantDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclarator"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:124:1: constantDeclarator : Identifier ;
    public final MandaraxParser.constantDeclarator_return constantDeclarator() throws RecognitionException {
        MandaraxParser.constantDeclarator_return retval = new MandaraxParser.constantDeclarator_return();
        retval.start = input.LT(1);
        int constantDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token Identifier19=null;

        CommonTree Identifier19_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:125:5: ( Identifier )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:125:9: Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            Identifier19=(Token)match(input,Identifier,FOLLOW_Identifier_in_constantDeclarator603); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier19_tree = (CommonTree)adaptor.create(Identifier19);
            adaptor.addChild(root_0, Identifier19_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, constantDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclarator"

    public static class typeName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeName"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:128:1: typeName : qualifiedName ;
    public final MandaraxParser.typeName_return typeName() throws RecognitionException {
        MandaraxParser.typeName_return retval = new MandaraxParser.typeName_return();
        retval.start = input.LT(1);
        int typeName_StartIndex = input.index();
        CommonTree root_0 = null;

        MandaraxParser.qualifiedName_return qualifiedName20 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:129:5: ( qualifiedName )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:129:9: qualifiedName
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_typeName627);
            qualifiedName20=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName20.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, typeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeName"

    public static class type_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:132:1: type returns [String value] : (i= classOrInterfaceType ( '[' ']' )* | j= primitiveType ( '[' ']' )* );
    public final MandaraxParser.type_return type() throws RecognitionException {
        MandaraxParser.type_return retval = new MandaraxParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal21=null;
        Token char_literal22=null;
        Token char_literal23=null;
        Token char_literal24=null;
        MandaraxParser.classOrInterfaceType_return i = null;

        MandaraxParser.primitiveType_return j = null;


        CommonTree char_literal21_tree=null;
        CommonTree char_literal22_tree=null;
        CommonTree char_literal23_tree=null;
        CommonTree char_literal24_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:133:2: (i= classOrInterfaceType ( '[' ']' )* | j= primitiveType ( '[' ']' )* )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==Identifier) ) {
                alt10=1;
            }
            else if ( ((LA10_0>=44 && LA10_0<=51)) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:133:4: i= classOrInterfaceType ( '[' ']' )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceType_in_type649);
                    i=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, i.getTree());
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:133:29: ( '[' ']' )*
                    loop8:
                    do {
                        int alt8=2;
                        int LA8_0 = input.LA(1);

                        if ( (LA8_0==42) ) {
                            alt8=1;
                        }


                        switch (alt8) {
                    	case 1 :
                    	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:133:30: '[' ']'
                    	    {
                    	    char_literal21=(Token)match(input,42,FOLLOW_42_in_type652); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal21_tree = (CommonTree)adaptor.create(char_literal21);
                    	    adaptor.addChild(root_0, char_literal21_tree);
                    	    }
                    	    char_literal22=(Token)match(input,43,FOLLOW_43_in_type654); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal22_tree = (CommonTree)adaptor.create(char_literal22);
                    	    adaptor.addChild(root_0, char_literal22_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop8;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                      retval.value = i.value;
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:134:4: j= primitiveType ( '[' ']' )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_type667);
                    j=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, j.getTree());
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:134:22: ( '[' ']' )*
                    loop9:
                    do {
                        int alt9=2;
                        int LA9_0 = input.LA(1);

                        if ( (LA9_0==42) ) {
                            alt9=1;
                        }


                        switch (alt9) {
                    	case 1 :
                    	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:134:23: '[' ']'
                    	    {
                    	    char_literal23=(Token)match(input,42,FOLLOW_42_in_type670); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal23_tree = (CommonTree)adaptor.create(char_literal23);
                    	    adaptor.addChild(root_0, char_literal23_tree);
                    	    }
                    	    char_literal24=(Token)match(input,43,FOLLOW_43_in_type672); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal24_tree = (CommonTree)adaptor.create(char_literal24);
                    	    adaptor.addChild(root_0, char_literal24_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop9;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                      retval.value = j.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class classOrInterfaceType_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceType"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:137:1: classOrInterfaceType returns [String value] : i= Identifier ( '.' i= Identifier )* ;
    public final MandaraxParser.classOrInterfaceType_return classOrInterfaceType() throws RecognitionException {
        MandaraxParser.classOrInterfaceType_return retval = new MandaraxParser.classOrInterfaceType_return();
        retval.start = input.LT(1);
        int classOrInterfaceType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token char_literal25=null;

        CommonTree i_tree=null;
        CommonTree char_literal25_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:138:2: (i= Identifier ( '.' i= Identifier )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:138:4: i= Identifier ( '.' i= Identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_classOrInterfaceType696); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value =i.getText();
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:138:41: ( '.' i= Identifier )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==25) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:138:42: '.' i= Identifier
            	    {
            	    char_literal25=(Token)match(input,25,FOLLOW_25_in_classOrInterfaceType701); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal25_tree = (CommonTree)adaptor.create(char_literal25);
            	    adaptor.addChild(root_0, char_literal25_tree);
            	    }
            	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_classOrInterfaceType707); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    i_tree = (CommonTree)adaptor.create(i);
            	    adaptor.addChild(root_0, i_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value =retval.value+'.'+i.getText();
            	    }

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, classOrInterfaceType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceType"

    public static class primitiveType_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:142:1: primitiveType returns [String value] : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
    public final MandaraxParser.primitiveType_return primitiveType() throws RecognitionException {
        MandaraxParser.primitiveType_return retval = new MandaraxParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal26=null;
        Token string_literal27=null;
        Token string_literal28=null;
        Token string_literal29=null;
        Token string_literal30=null;
        Token string_literal31=null;
        Token string_literal32=null;
        Token string_literal33=null;

        CommonTree string_literal26_tree=null;
        CommonTree string_literal27_tree=null;
        CommonTree string_literal28_tree=null;
        CommonTree string_literal29_tree=null;
        CommonTree string_literal30_tree=null;
        CommonTree string_literal31_tree=null;
        CommonTree string_literal32_tree=null;
        CommonTree string_literal33_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:143:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
            int alt12=8;
            switch ( input.LA(1) ) {
            case 44:
                {
                alt12=1;
                }
                break;
            case 45:
                {
                alt12=2;
                }
                break;
            case 46:
                {
                alt12=3;
                }
                break;
            case 47:
                {
                alt12=4;
                }
                break;
            case 48:
                {
                alt12=5;
                }
                break;
            case 49:
                {
                alt12=6;
                }
                break;
            case 50:
                {
                alt12=7;
                }
                break;
            case 51:
                {
                alt12=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }

            switch (alt12) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:143:9: 'boolean'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal26=(Token)match(input,44,FOLLOW_44_in_primitiveType735); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal26_tree = (CommonTree)adaptor.create(string_literal26);
                    adaptor.addChild(root_0, string_literal26_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="boolean";
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:144:9: 'char'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal27=(Token)match(input,45,FOLLOW_45_in_primitiveType747); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal27_tree = (CommonTree)adaptor.create(string_literal27);
                    adaptor.addChild(root_0, string_literal27_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="char";
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:145:9: 'byte'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal28=(Token)match(input,46,FOLLOW_46_in_primitiveType759); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal28_tree = (CommonTree)adaptor.create(string_literal28);
                    adaptor.addChild(root_0, string_literal28_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="byte";
                    }

                    }
                    break;
                case 4 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:146:9: 'short'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal29=(Token)match(input,47,FOLLOW_47_in_primitiveType771); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal29_tree = (CommonTree)adaptor.create(string_literal29);
                    adaptor.addChild(root_0, string_literal29_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="short";
                    }

                    }
                    break;
                case 5 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:147:9: 'int'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal30=(Token)match(input,48,FOLLOW_48_in_primitiveType783); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal30_tree = (CommonTree)adaptor.create(string_literal30);
                    adaptor.addChild(root_0, string_literal30_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="int";
                    }

                    }
                    break;
                case 6 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:148:9: 'long'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal31=(Token)match(input,49,FOLLOW_49_in_primitiveType795); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal31_tree = (CommonTree)adaptor.create(string_literal31);
                    adaptor.addChild(root_0, string_literal31_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="boolean";
                    }

                    }
                    break;
                case 7 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:149:9: 'float'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal32=(Token)match(input,50,FOLLOW_50_in_primitiveType807); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal32_tree = (CommonTree)adaptor.create(string_literal32);
                    adaptor.addChild(root_0, string_literal32_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="long";
                    }

                    }
                    break;
                case 8 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:150:9: 'double'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal33=(Token)match(input,51,FOLLOW_51_in_primitiveType819); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal33_tree = (CommonTree)adaptor.create(string_literal33);
                    adaptor.addChild(root_0, string_literal33_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="double";
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class qualifiedNameList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedNameList"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:153:1: qualifiedNameList : qualifiedName ( ',' qualifiedName )* ;
    public final MandaraxParser.qualifiedNameList_return qualifiedNameList() throws RecognitionException {
        MandaraxParser.qualifiedNameList_return retval = new MandaraxParser.qualifiedNameList_return();
        retval.start = input.LT(1);
        int qualifiedNameList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal35=null;
        MandaraxParser.qualifiedName_return qualifiedName34 = null;

        MandaraxParser.qualifiedName_return qualifiedName36 = null;


        CommonTree char_literal35_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:154:5: ( qualifiedName ( ',' qualifiedName )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:154:9: qualifiedName ( ',' qualifiedName )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList845);
            qualifiedName34=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName34.getTree());
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:154:23: ( ',' qualifiedName )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==39) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:154:24: ',' qualifiedName
            	    {
            	    char_literal35=(Token)match(input,39,FOLLOW_39_in_qualifiedNameList848); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal35_tree = (CommonTree)adaptor.create(char_literal35);
            	    adaptor.addChild(root_0, char_literal35_tree);
            	    }
            	    pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList850);
            	    qualifiedName36=qualifiedName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName36.getTree());

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, qualifiedNameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedNameList"

    public static class qualifiedName_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedName"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:157:1: qualifiedName returns [Expression value] : i= Identifier ( '.' j= Identifier )* ;
    public final MandaraxParser.qualifiedName_return qualifiedName() throws RecognitionException {
        MandaraxParser.qualifiedName_return retval = new MandaraxParser.qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token j=null;
        Token char_literal37=null;

        CommonTree i_tree=null;
        CommonTree j_tree=null;
        CommonTree char_literal37_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:158:2: (i= Identifier ( '.' j= Identifier )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:158:4: i= Identifier ( '.' j= Identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName874); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value =new Variable(pos(i),context,i.getText());
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:158:70: ( '.' j= Identifier )*
            loop14:
            do {
                int alt14=2;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==25) ) {
                    alt14=1;
                }


                switch (alt14) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:158:71: '.' j= Identifier
            	    {
            	    char_literal37=(Token)match(input,25,FOLLOW_25_in_qualifiedName879); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal37_tree = (CommonTree)adaptor.create(char_literal37);
            	    adaptor.addChild(root_0, char_literal37_tree);
            	    }
            	    j=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName885); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    j_tree = (CommonTree)adaptor.create(j);
            	    adaptor.addChild(root_0, j_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value =new MemberAccess(pos(i),context,retval.value,j.getText());
            	    }

            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, qualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName"

    public static class qualifiedNameList2_return extends ParserRuleReturnScope {
        public List<String> value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedNameList2"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:161:1: qualifiedNameList2 returns [List<String> value] : i= qualifiedName2 ( ',' j= qualifiedName2 )* ;
    public final MandaraxParser.qualifiedNameList2_return qualifiedNameList2() throws RecognitionException {
        MandaraxParser.qualifiedNameList2_return retval = new MandaraxParser.qualifiedNameList2_return();
        retval.start = input.LT(1);
        int qualifiedNameList2_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal38=null;
        MandaraxParser.qualifiedName2_return i = null;

        MandaraxParser.qualifiedName2_return j = null;


        CommonTree char_literal38_tree=null;

        retval.value = new ArrayList<String>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:163:5: (i= qualifiedName2 ( ',' j= qualifiedName2 )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:163:9: i= qualifiedName2 ( ',' j= qualifiedName2 )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName2_in_qualifiedNameList2918);
            i=qualifiedName2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, i.getTree());
            if ( state.backtracking==0 ) {
              retval.value.add(i.value);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:163:51: ( ',' j= qualifiedName2 )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==39) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:163:52: ',' j= qualifiedName2
            	    {
            	    char_literal38=(Token)match(input,39,FOLLOW_39_in_qualifiedNameList2923); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal38_tree = (CommonTree)adaptor.create(char_literal38);
            	    adaptor.addChild(root_0, char_literal38_tree);
            	    }
            	    pushFollow(FOLLOW_qualifiedName2_in_qualifiedNameList2929);
            	    j=qualifiedName2();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, j.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.add(j.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, qualifiedNameList2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedNameList2"

    public static class qualifiedName2_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedName2"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:166:1: qualifiedName2 returns [String value] : i= Identifier ( '.' j= Identifier )* ;
    public final MandaraxParser.qualifiedName2_return qualifiedName2() throws RecognitionException {
        MandaraxParser.qualifiedName2_return retval = new MandaraxParser.qualifiedName2_return();
        retval.start = input.LT(1);
        int qualifiedName2_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token j=null;
        Token char_literal39=null;

        CommonTree i_tree=null;
        CommonTree j_tree=null;
        CommonTree char_literal39_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:167:2: (i= Identifier ( '.' j= Identifier )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:167:4: i= Identifier ( '.' j= Identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName2956); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value =i.getText();
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:167:41: ( '.' j= Identifier )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==25) ) {
                    int LA16_1 = input.LA(2);

                    if ( (LA16_1==Identifier) ) {
                        alt16=1;
                    }


                }


                switch (alt16) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:167:42: '.' j= Identifier
            	    {
            	    char_literal39=(Token)match(input,25,FOLLOW_25_in_qualifiedName2961); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal39_tree = (CommonTree)adaptor.create(char_literal39);
            	    adaptor.addChild(root_0, char_literal39_tree);
            	    }
            	    j=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName2967); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    j_tree = (CommonTree)adaptor.create(j);
            	    adaptor.addChild(root_0, j_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value =retval.value+'.'+j.getText();
            	    }

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, qualifiedName2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName2"

    public static class nameList_return extends ParserRuleReturnScope {
        public List<String> value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nameList"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:171:1: nameList returns [List<String> value] : (i= Identifier ( ',' j= Identifier )* )? ;
    public final MandaraxParser.nameList_return nameList() throws RecognitionException {
        MandaraxParser.nameList_return retval = new MandaraxParser.nameList_return();
        retval.start = input.LT(1);
        int nameList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token j=null;
        Token char_literal40=null;

        CommonTree i_tree=null;
        CommonTree j_tree=null;
        CommonTree char_literal40_tree=null;

        retval.value = new ArrayList<String>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:173:2: ( (i= Identifier ( ',' j= Identifier )* )? )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:173:4: (i= Identifier ( ',' j= Identifier )* )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:173:4: (i= Identifier ( ',' j= Identifier )* )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==Identifier) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:173:5: i= Identifier ( ',' j= Identifier )*
                    {
                    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_nameList998); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i_tree = (CommonTree)adaptor.create(i);
                    adaptor.addChild(root_0, i_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.add(i.getText());
                    }
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:173:47: ( ',' j= Identifier )*
                    loop17:
                    do {
                        int alt17=2;
                        int LA17_0 = input.LA(1);

                        if ( (LA17_0==39) ) {
                            alt17=1;
                        }


                        switch (alt17) {
                    	case 1 :
                    	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:173:48: ',' j= Identifier
                    	    {
                    	    char_literal40=(Token)match(input,39,FOLLOW_39_in_nameList1003); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal40_tree = (CommonTree)adaptor.create(char_literal40);
                    	    adaptor.addChild(root_0, char_literal40_tree);
                    	    }
                    	    j=(Token)match(input,Identifier,FOLLOW_Identifier_in_nameList1009); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    j_tree = (CommonTree)adaptor.create(j);
                    	    adaptor.addChild(root_0, j_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      retval.value.add(j.getText());
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop17;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, nameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nameList"

    public static class literal_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:176:1: literal returns [Expression value] : (l1= integerLiteral | l4= StringLiteral | l5= booleanLiteral );
    public final MandaraxParser.literal_return literal() throws RecognitionException {
        MandaraxParser.literal_return retval = new MandaraxParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        CommonTree root_0 = null;

        Token l4=null;
        MandaraxParser.integerLiteral_return l1 = null;

        MandaraxParser.booleanLiteral_return l5 = null;


        CommonTree l4_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:177:5: (l1= integerLiteral | l4= StringLiteral | l5= booleanLiteral )
            int alt19=3;
            switch ( input.LA(1) ) {
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
                {
                alt19=1;
                }
                break;
            case StringLiteral:
                {
                alt19=2;
                }
                break;
            case 52:
            case 53:
                {
                alt19=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;
            }

            switch (alt19) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:177:9: l1= integerLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_integerLiteral_in_literal1040);
                    l1=integerLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, l1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = l1.value;
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:180:9: l4= StringLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    l4=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_literal1058); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    l4_tree = (CommonTree)adaptor.create(l4);
                    adaptor.addChild(root_0, l4_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new StringLiteral(pos(l4),context,l4.getText().substring(1,l4.getText().length()-1));
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:181:9: l5= booleanLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_booleanLiteral_in_literal1074);
                    l5=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, l5.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = l5.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class integerLiteral_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integerLiteral"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:185:1: integerLiteral returns [Expression value] : (hex= HexLiteral | oct= OctalLiteral | dec= DecimalLiteral );
    public final MandaraxParser.integerLiteral_return integerLiteral() throws RecognitionException {
        MandaraxParser.integerLiteral_return retval = new MandaraxParser.integerLiteral_return();
        retval.start = input.LT(1);
        int integerLiteral_StartIndex = input.index();
        CommonTree root_0 = null;

        Token hex=null;
        Token oct=null;
        Token dec=null;

        CommonTree hex_tree=null;
        CommonTree oct_tree=null;
        CommonTree dec_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:186:5: (hex= HexLiteral | oct= OctalLiteral | dec= DecimalLiteral )
            int alt20=3;
            switch ( input.LA(1) ) {
            case HexLiteral:
                {
                alt20=1;
                }
                break;
            case OctalLiteral:
                {
                alt20=2;
                }
                break;
            case DecimalLiteral:
                {
                alt20=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }

            switch (alt20) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:186:9: hex= HexLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    hex=(Token)match(input,HexLiteral,FOLLOW_HexLiteral_in_integerLiteral1104); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    hex_tree = (CommonTree)adaptor.create(hex);
                    adaptor.addChild(root_0, hex_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new IntLiteral(pos(hex),context,Integer.parseInt(hex.getText().substring(2),16));
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:187:9: oct= OctalLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    oct=(Token)match(input,OctalLiteral,FOLLOW_OctalLiteral_in_integerLiteral1120); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    oct_tree = (CommonTree)adaptor.create(oct);
                    adaptor.addChild(root_0, oct_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new IntLiteral(pos(oct),context,Integer.parseInt(oct.getText(),8));
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:188:9: dec= DecimalLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dec=(Token)match(input,DecimalLiteral,FOLLOW_DecimalLiteral_in_integerLiteral1136); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    dec_tree = (CommonTree)adaptor.create(dec);
                    adaptor.addChild(root_0, dec_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new IntLiteral(pos(dec),context,Integer.parseInt(dec.getText()));
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, integerLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integerLiteral"

    public static class booleanLiteral_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "booleanLiteral"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:191:1: booleanLiteral returns [Expression value] : (t= 'true' | f= 'false' );
    public final MandaraxParser.booleanLiteral_return booleanLiteral() throws RecognitionException {
        MandaraxParser.booleanLiteral_return retval = new MandaraxParser.booleanLiteral_return();
        retval.start = input.LT(1);
        int booleanLiteral_StartIndex = input.index();
        CommonTree root_0 = null;

        Token t=null;
        Token f=null;

        CommonTree t_tree=null;
        CommonTree f_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:192:5: (t= 'true' | f= 'false' )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==52) ) {
                alt21=1;
            }
            else if ( (LA21_0==53) ) {
                alt21=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }
            switch (alt21) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:192:9: t= 'true'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    t=(Token)match(input,52,FOLLOW_52_in_booleanLiteral1165); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t_tree = (CommonTree)adaptor.create(t);
                    adaptor.addChild(root_0, t_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new BooleanLiteral(pos(t),context,true);
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:193:9: f= 'false'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    f=(Token)match(input,53,FOLLOW_53_in_booleanLiteral1181); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    f_tree = (CommonTree)adaptor.create(f);
                    adaptor.addChild(root_0, f_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new BooleanLiteral(pos(f),context,false);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, booleanLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "booleanLiteral"

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairs"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:197:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* ;
    public final MandaraxParser.elementValuePairs_return elementValuePairs() throws RecognitionException {
        MandaraxParser.elementValuePairs_return retval = new MandaraxParser.elementValuePairs_return();
        retval.start = input.LT(1);
        int elementValuePairs_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal42=null;
        MandaraxParser.elementValuePair_return elementValuePair41 = null;

        MandaraxParser.elementValuePair_return elementValuePair43 = null;


        CommonTree char_literal42_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:198:5: ( elementValuePair ( ',' elementValuePair )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:198:9: elementValuePair ( ',' elementValuePair )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs1203);
            elementValuePair41=elementValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair41.getTree());
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:198:26: ( ',' elementValuePair )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==39) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:198:27: ',' elementValuePair
            	    {
            	    char_literal42=(Token)match(input,39,FOLLOW_39_in_elementValuePairs1206); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal42_tree = (CommonTree)adaptor.create(char_literal42);
            	    adaptor.addChild(root_0, char_literal42_tree);
            	    }
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs1208);
            	    elementValuePair43=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair43.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, elementValuePairs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePairs"

    public static class elementValuePair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePair"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:201:1: elementValuePair : Identifier '=' elementValue ;
    public final MandaraxParser.elementValuePair_return elementValuePair() throws RecognitionException {
        MandaraxParser.elementValuePair_return retval = new MandaraxParser.elementValuePair_return();
        retval.start = input.LT(1);
        int elementValuePair_StartIndex = input.index();
        CommonTree root_0 = null;

        Token Identifier44=null;
        Token char_literal45=null;
        MandaraxParser.elementValue_return elementValue46 = null;


        CommonTree Identifier44_tree=null;
        CommonTree char_literal45_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:202:5: ( Identifier '=' elementValue )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:202:9: Identifier '=' elementValue
            {
            root_0 = (CommonTree)adaptor.nil();

            Identifier44=(Token)match(input,Identifier,FOLLOW_Identifier_in_elementValuePair1229); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier44_tree = (CommonTree)adaptor.create(Identifier44);
            adaptor.addChild(root_0, Identifier44_tree);
            }
            char_literal45=(Token)match(input,32,FOLLOW_32_in_elementValuePair1231); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal45_tree = (CommonTree)adaptor.create(char_literal45);
            adaptor.addChild(root_0, char_literal45_tree);
            }
            pushFollow(FOLLOW_elementValue_in_elementValuePair1233);
            elementValue46=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue46.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, elementValuePair_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePair"

    public static class elementValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValue"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:205:1: elementValue : ( conditionalExpression | elementValueArrayInitializer );
    public final MandaraxParser.elementValue_return elementValue() throws RecognitionException {
        MandaraxParser.elementValue_return retval = new MandaraxParser.elementValue_return();
        retval.start = input.LT(1);
        int elementValue_StartIndex = input.index();
        CommonTree root_0 = null;

        MandaraxParser.conditionalExpression_return conditionalExpression47 = null;

        MandaraxParser.elementValueArrayInitializer_return elementValueArrayInitializer48 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:206:5: ( conditionalExpression | elementValueArrayInitializer )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( ((LA23_0>=Identifier && LA23_0<=DecimalLiteral)||LA23_0==35||(LA23_0>=52 && LA23_0<=53)||LA23_0==67||(LA23_0>=70 && LA23_0<=71)) ) {
                alt23=1;
            }
            else if ( (LA23_0==54) ) {
                alt23=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;
            }
            switch (alt23) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:206:9: conditionalExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_conditionalExpression_in_elementValue1256);
                    conditionalExpression47=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression47.getTree());

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:207:9: elementValueArrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue1266);
                    elementValueArrayInitializer48=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValueArrayInitializer48.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, elementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValue"

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayInitializer"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:210:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' ;
    public final MandaraxParser.elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        MandaraxParser.elementValueArrayInitializer_return retval = new MandaraxParser.elementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int elementValueArrayInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal49=null;
        Token char_literal51=null;
        Token char_literal53=null;
        Token char_literal54=null;
        MandaraxParser.elementValue_return elementValue50 = null;

        MandaraxParser.elementValue_return elementValue52 = null;


        CommonTree char_literal49_tree=null;
        CommonTree char_literal51_tree=null;
        CommonTree char_literal53_tree=null;
        CommonTree char_literal54_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:211:5: ( '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:211:9: '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal49=(Token)match(input,54,FOLLOW_54_in_elementValueArrayInitializer1289); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal49_tree = (CommonTree)adaptor.create(char_literal49);
            adaptor.addChild(root_0, char_literal49_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:211:13: ( elementValue ( ',' elementValue )* )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( ((LA25_0>=Identifier && LA25_0<=DecimalLiteral)||LA25_0==35||(LA25_0>=52 && LA25_0<=54)||LA25_0==67||(LA25_0>=70 && LA25_0<=71)) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:211:14: elementValue ( ',' elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer1292);
                    elementValue50=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue50.getTree());
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:211:27: ( ',' elementValue )*
                    loop24:
                    do {
                        int alt24=2;
                        int LA24_0 = input.LA(1);

                        if ( (LA24_0==39) ) {
                            int LA24_1 = input.LA(2);

                            if ( ((LA24_1>=Identifier && LA24_1<=DecimalLiteral)||LA24_1==35||(LA24_1>=52 && LA24_1<=54)||LA24_1==67||(LA24_1>=70 && LA24_1<=71)) ) {
                                alt24=1;
                            }


                        }


                        switch (alt24) {
                    	case 1 :
                    	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:211:28: ',' elementValue
                    	    {
                    	    char_literal51=(Token)match(input,39,FOLLOW_39_in_elementValueArrayInitializer1295); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal51_tree = (CommonTree)adaptor.create(char_literal51);
                    	    adaptor.addChild(root_0, char_literal51_tree);
                    	    }
                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer1297);
                    	    elementValue52=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue52.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop24;
                        }
                    } while (true);


                    }
                    break;

            }

            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:211:49: ( ',' )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==39) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:211:50: ','
                    {
                    char_literal53=(Token)match(input,39,FOLLOW_39_in_elementValueArrayInitializer1304); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal53_tree = (CommonTree)adaptor.create(char_literal53);
                    adaptor.addChild(root_0, char_literal53_tree);
                    }

                    }
                    break;

            }

            char_literal54=(Token)match(input,55,FOLLOW_55_in_elementValueArrayInitializer1308); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal54_tree = (CommonTree)adaptor.create(char_literal54);
            adaptor.addChild(root_0, char_literal54_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, elementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayInitializer"

    public static class parExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:216:1: parExpression returns [Expression value] : '(' expr= expression ')' ;
    public final MandaraxParser.parExpression_return parExpression() throws RecognitionException {
        MandaraxParser.parExpression_return retval = new MandaraxParser.parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal55=null;
        Token char_literal56=null;
        MandaraxParser.expression_return expr = null;


        CommonTree char_literal55_tree=null;
        CommonTree char_literal56_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:217:5: ( '(' expr= expression ')' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:217:9: '(' expr= expression ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal55=(Token)match(input,35,FOLLOW_35_in_parExpression1337); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal55_tree = (CommonTree)adaptor.create(char_literal55);
            adaptor.addChild(root_0, char_literal55_tree);
            }
            pushFollow(FOLLOW_expression_in_parExpression1343);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr.getTree());
            char_literal56=(Token)match(input,36,FOLLOW_36_in_parExpression1345); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal56_tree = (CommonTree)adaptor.create(char_literal56);
            adaptor.addChild(root_0, char_literal56_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = expr.value;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, parExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class commaSeparatedExpressionList_return extends ParserRuleReturnScope {
        public List<Expression> values;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "commaSeparatedExpressionList"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:220:1: commaSeparatedExpressionList returns [List<Expression> values] : e1= expression ( ',' e2= expression )* ;
    public final MandaraxParser.commaSeparatedExpressionList_return commaSeparatedExpressionList() throws RecognitionException {
        MandaraxParser.commaSeparatedExpressionList_return retval = new MandaraxParser.commaSeparatedExpressionList_return();
        retval.start = input.LT(1);
        int commaSeparatedExpressionList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal57=null;
        MandaraxParser.expression_return e1 = null;

        MandaraxParser.expression_return e2 = null;


        CommonTree char_literal57_tree=null;

        retval.values = new ArrayList<Expression>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:222:5: (e1= expression ( ',' e2= expression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:222:9: e1= expression ( ',' e2= expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_commaSeparatedExpressionList1383);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e1.getTree());
            if ( state.backtracking==0 ) {
              retval.values.add(e1.value);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:222:50: ( ',' e2= expression )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==39) ) {
                    alt27=1;
                }


                switch (alt27) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:222:51: ',' e2= expression
            	    {
            	    char_literal57=(Token)match(input,39,FOLLOW_39_in_commaSeparatedExpressionList1388); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal57_tree = (CommonTree)adaptor.create(char_literal57);
            	    adaptor.addChild(root_0, char_literal57_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_commaSeparatedExpressionList1394);
            	    e2=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, e2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.values.add(e2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, commaSeparatedExpressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "commaSeparatedExpressionList"

    public static class andSeparatedExpressionList_return extends ParserRuleReturnScope {
        public List<Expression> values;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andSeparatedExpressionList"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:225:1: andSeparatedExpressionList returns [List<Expression> values] : e1= expression ( '&' e2= expression )* ;
    public final MandaraxParser.andSeparatedExpressionList_return andSeparatedExpressionList() throws RecognitionException {
        MandaraxParser.andSeparatedExpressionList_return retval = new MandaraxParser.andSeparatedExpressionList_return();
        retval.start = input.LT(1);
        int andSeparatedExpressionList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal58=null;
        MandaraxParser.expression_return e1 = null;

        MandaraxParser.expression_return e2 = null;


        CommonTree char_literal58_tree=null;

        retval.values = new ArrayList<Expression>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:227:5: (e1= expression ( '&' e2= expression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:227:9: e1= expression ( '&' e2= expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_andSeparatedExpressionList1431);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e1.getTree());
            if ( state.backtracking==0 ) {
              retval.values.add(e1.value);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:227:50: ( '&' e2= expression )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==56) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:227:51: '&' e2= expression
            	    {
            	    char_literal58=(Token)match(input,56,FOLLOW_56_in_andSeparatedExpressionList1436); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal58_tree = (CommonTree)adaptor.create(char_literal58);
            	    adaptor.addChild(root_0, char_literal58_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_andSeparatedExpressionList1442);
            	    e2=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, e2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.values.add(e2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, andSeparatedExpressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andSeparatedExpressionList"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:230:1: conditionalExpression returns [Expression value] : r1= disjunction ( '?' r2= expression ':' r3= expression )? ;
    public final MandaraxParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        MandaraxParser.conditionalExpression_return retval = new MandaraxParser.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal59=null;
        Token char_literal60=null;
        MandaraxParser.disjunction_return r1 = null;

        MandaraxParser.expression_return r2 = null;

        MandaraxParser.expression_return r3 = null;


        CommonTree char_literal59_tree=null;
        CommonTree char_literal60_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:231:5: (r1= disjunction ( '?' r2= expression ':' r3= expression )? )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:231:9: r1= disjunction ( '?' r2= expression ':' r3= expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_disjunction_in_conditionalExpression1474);
            r1=disjunction();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, r1.getTree());
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:231:26: ( '?' r2= expression ':' r3= expression )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==57) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:231:28: '?' r2= expression ':' r3= expression
                    {
                    char_literal59=(Token)match(input,57,FOLLOW_57_in_conditionalExpression1478); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal59_tree = (CommonTree)adaptor.create(char_literal59);
                    adaptor.addChild(root_0, char_literal59_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression1484);
                    r2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r2.getTree());
                    char_literal60=(Token)match(input,29,FOLLOW_29_in_conditionalExpression1486); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal60_tree = (CommonTree)adaptor.create(char_literal60);
                    adaptor.addChild(root_0, char_literal60_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression1492);
                    r3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r3.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              retval.value =(r2==null)?r1.value:new ConditionalExpression(pos(r1.value),context,r1.value,r2.value,r3.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class disjunction_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "disjunction"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:234:1: disjunction returns [Expression value] : part1= conjunction ( '|' part= conjunction )* ;
    public final MandaraxParser.disjunction_return disjunction() throws RecognitionException {
        MandaraxParser.disjunction_return retval = new MandaraxParser.disjunction_return();
        retval.start = input.LT(1);
        int disjunction_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal61=null;
        MandaraxParser.conjunction_return part1 = null;

        MandaraxParser.conjunction_return part = null;


        CommonTree char_literal61_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:235:5: (part1= conjunction ( '|' part= conjunction )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:235:9: part1= conjunction ( '|' part= conjunction )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conjunction_in_disjunction1525);
            part1=conjunction();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:235:53: ( '|' part= conjunction )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==58) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:235:55: '|' part= conjunction
            	    {
            	    char_literal61=(Token)match(input,58,FOLLOW_58_in_disjunction1531); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal61_tree = (CommonTree)adaptor.create(char_literal61);
            	    adaptor.addChild(root_0, char_literal61_tree);
            	    }
            	    pushFollow(FOLLOW_conjunction_in_disjunction1537);
            	    part=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,BinOp.OR,retval.value,part.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, disjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "disjunction"

    public static class conjunction_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:238:1: conjunction returns [Expression value] : part1= equalityExpression ( '&' part= equalityExpression )* ;
    public final MandaraxParser.conjunction_return conjunction() throws RecognitionException {
        MandaraxParser.conjunction_return retval = new MandaraxParser.conjunction_return();
        retval.start = input.LT(1);
        int conjunction_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal62=null;
        MandaraxParser.equalityExpression_return part1 = null;

        MandaraxParser.equalityExpression_return part = null;


        CommonTree char_literal62_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:239:5: (part1= equalityExpression ( '&' part= equalityExpression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:239:9: part1= equalityExpression ( '&' part= equalityExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_equalityExpression_in_conjunction1569);
            part1=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:239:60: ( '&' part= equalityExpression )*
            loop31:
            do {
                int alt31=2;
                alt31 = dfa31.predict(input);
                switch (alt31) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:239:62: '&' part= equalityExpression
            	    {
            	    char_literal62=(Token)match(input,56,FOLLOW_56_in_conjunction1575); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal62_tree = (CommonTree)adaptor.create(char_literal62);
            	    adaptor.addChild(root_0, char_literal62_tree);
            	    }
            	    pushFollow(FOLLOW_equalityExpression_in_conjunction1582);
            	    part=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,BinOp.AND,retval.value,part.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, conjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:242:1: equalityExpression returns [Expression value] : part1= instanceOfExpression (op= ( '==' | '!=' ) part2= instanceOfExpression )* ;
    public final MandaraxParser.equalityExpression_return equalityExpression() throws RecognitionException {
        MandaraxParser.equalityExpression_return retval = new MandaraxParser.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token op=null;
        MandaraxParser.instanceOfExpression_return part1 = null;

        MandaraxParser.instanceOfExpression_return part2 = null;


        CommonTree op_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:243:5: (part1= instanceOfExpression (op= ( '==' | '!=' ) part2= instanceOfExpression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:243:9: part1= instanceOfExpression (op= ( '==' | '!=' ) part2= instanceOfExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression1614);
            part1=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value =part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:243:60: (op= ( '==' | '!=' ) part2= instanceOfExpression )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( ((LA32_0>=59 && LA32_0<=60)) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:243:62: op= ( '==' | '!=' ) part2= instanceOfExpression
            	    {
            	    op=(Token)input.LT(1);
            	    if ( (input.LA(1)>=59 && input.LA(1)<=60) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(op));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression1636);
            	    part2=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value =new BinaryExpression(pos(part1.value),context,binOpForName(op.getText()),retval.value,part2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:246:1: instanceOfExpression returns [Expression value] : part= relationalExpression ( 'instanceof' t= type )? ;
    public final MandaraxParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        MandaraxParser.instanceOfExpression_return retval = new MandaraxParser.instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal63=null;
        MandaraxParser.relationalExpression_return part = null;

        MandaraxParser.type_return t = null;


        CommonTree string_literal63_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:247:5: (part= relationalExpression ( 'instanceof' t= type )? )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:247:9: part= relationalExpression ( 'instanceof' t= type )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression1668);
            part=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:247:37: ( 'instanceof' t= type )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==61) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:247:38: 'instanceof' t= type
                    {
                    string_literal63=(Token)match(input,61,FOLLOW_61_in_instanceOfExpression1671); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal63_tree = (CommonTree)adaptor.create(string_literal63);
                    adaptor.addChild(root_0, string_literal63_tree);
                    }
                    pushFollow(FOLLOW_type_in_instanceOfExpression1677);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              retval.value = (t==null)?part.value:new InstanceOfExpression(pos(part.value),context,part.value,t.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:250:1: relationalExpression returns [Expression value] : part1= shiftExpression (op= relationalOp part2= shiftExpression )* ;
    public final MandaraxParser.relationalExpression_return relationalExpression() throws RecognitionException {
        MandaraxParser.relationalExpression_return retval = new MandaraxParser.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        MandaraxParser.shiftExpression_return part1 = null;

        MandaraxParser.relationalOp_return op = null;

        MandaraxParser.shiftExpression_return part2 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:251:5: (part1= shiftExpression (op= relationalOp part2= shiftExpression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:251:9: part1= shiftExpression (op= relationalOp part2= shiftExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_shiftExpression_in_relationalExpression1709);
            part1=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value =part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:251:55: (op= relationalOp part2= shiftExpression )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( ((LA34_0>=62 && LA34_0<=65)) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:251:57: op= relationalOp part2= shiftExpression
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_relationalExpression1719);
            	    op=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op.getTree());
            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression1725);
            	    part2=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,op.value,retval.value,part2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class relationalOp_return extends ParserRuleReturnScope {
        public BinOp value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalOp"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:255:1: relationalOp returns [BinOp value] : ( '<=' | '>=' | '<' | '>' );
    public final MandaraxParser.relationalOp_return relationalOp() throws RecognitionException {
        MandaraxParser.relationalOp_return retval = new MandaraxParser.relationalOp_return();
        retval.start = input.LT(1);
        int relationalOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal64=null;
        Token string_literal65=null;
        Token char_literal66=null;
        Token char_literal67=null;

        CommonTree string_literal64_tree=null;
        CommonTree string_literal65_tree=null;
        CommonTree char_literal66_tree=null;
        CommonTree char_literal67_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:256:5: ( '<=' | '>=' | '<' | '>' )
            int alt35=4;
            switch ( input.LA(1) ) {
            case 62:
                {
                alt35=1;
                }
                break;
            case 63:
                {
                alt35=2;
                }
                break;
            case 64:
                {
                alt35=3;
                }
                break;
            case 65:
                {
                alt35=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;
            }

            switch (alt35) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:256:9: '<='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal64=(Token)match(input,62,FOLLOW_62_in_relationalOp1759); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal64_tree = (CommonTree)adaptor.create(string_literal64);
                    adaptor.addChild(root_0, string_literal64_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.LTE;
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:257:9: '>='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal65=(Token)match(input,63,FOLLOW_63_in_relationalOp1771); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal65_tree = (CommonTree)adaptor.create(string_literal65);
                    adaptor.addChild(root_0, string_literal65_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.GTE;
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:258:7: '<'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal66=(Token)match(input,64,FOLLOW_64_in_relationalOp1781); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal66_tree = (CommonTree)adaptor.create(char_literal66);
                    adaptor.addChild(root_0, char_literal66_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.LT;
                    }

                    }
                    break;
                case 4 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:259:9: '>'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal67=(Token)match(input,65,FOLLOW_65_in_relationalOp1793); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal67_tree = (CommonTree)adaptor.create(char_literal67);
                    adaptor.addChild(root_0, char_literal67_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.GT;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, relationalOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalOp"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:263:1: shiftExpression returns [Expression value] : part1= additiveExpression (op= shiftOp part= additiveExpression )? ;
    public final MandaraxParser.shiftExpression_return shiftExpression() throws RecognitionException {
        MandaraxParser.shiftExpression_return retval = new MandaraxParser.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        MandaraxParser.additiveExpression_return part1 = null;

        MandaraxParser.shiftOp_return op = null;

        MandaraxParser.additiveExpression_return part = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:264:5: (part1= additiveExpression (op= shiftOp part= additiveExpression )? )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:264:9: part1= additiveExpression (op= shiftOp part= additiveExpression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_shiftExpression1823);
            part1=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:264:60: (op= shiftOp part= additiveExpression )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==64) ) {
                int LA36_1 = input.LA(2);

                if ( (LA36_1==64) ) {
                    alt36=1;
                }
            }
            else if ( (LA36_0==65) ) {
                int LA36_2 = input.LA(2);

                if ( (LA36_2==65) ) {
                    alt36=1;
                }
            }
            switch (alt36) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:264:62: op= shiftOp part= additiveExpression
                    {
                    pushFollow(FOLLOW_shiftOp_in_shiftExpression1833);
                    op=shiftOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op.getTree());
                    pushFollow(FOLLOW_additiveExpression_in_shiftExpression1839);
                    part=additiveExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new BinaryExpression(pos(part1.value),context,op.value,retval.value,part.value);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class shiftOp_return extends ParserRuleReturnScope {
        public BinOp value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftOp"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:267:1: shiftOp returns [BinOp value] : ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?);
    public final MandaraxParser.shiftOp_return shiftOp() throws RecognitionException {
        MandaraxParser.shiftOp_return retval = new MandaraxParser.shiftOp_return();
        retval.start = input.LT(1);
        int shiftOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token t1=null;
        Token t2=null;
        Token t3=null;

        CommonTree t1_tree=null;
        CommonTree t2_tree=null;
        CommonTree t3_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:268:5: ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?)
            int alt37=3;
            alt37 = dfa37.predict(input);
            switch (alt37) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:268:9: ( '<' '<' )=>t1= '<' t2= '<' {...}?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    t1=(Token)match(input,64,FOLLOW_64_in_shiftOp1876); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (CommonTree)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,64,FOLLOW_64_in_shiftOp1880); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (CommonTree)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() && \n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.SHIFT_LL;
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:271:9: ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    t1=(Token)match(input,65,FOLLOW_65_in_shiftOp1914); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (CommonTree)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,65,FOLLOW_65_in_shiftOp1918); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (CommonTree)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    t3=(Token)match(input,65,FOLLOW_65_in_shiftOp1922); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t3_tree = (CommonTree)adaptor.create(t3);
                    adaptor.addChild(root_0, t3_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() && 
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() && \n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() && \n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.SHIFT_RRR;
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:276:9: ( '>' '>' )=>t1= '>' t2= '>' {...}?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    t1=(Token)match(input,65,FOLLOW_65_in_shiftOp1954); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (CommonTree)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,65,FOLLOW_65_in_shiftOp1958); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (CommonTree)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() && \n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.SHIFT_RR;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, shiftOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftOp"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:282:1: additiveExpression returns [Expression value] : part1= multiplicativeExpression (op= ( '+' | '-' ) part= multiplicativeExpression )* ;
    public final MandaraxParser.additiveExpression_return additiveExpression() throws RecognitionException {
        MandaraxParser.additiveExpression_return retval = new MandaraxParser.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token op=null;
        MandaraxParser.multiplicativeExpression_return part1 = null;

        MandaraxParser.multiplicativeExpression_return part = null;


        CommonTree op_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:283:5: (part1= multiplicativeExpression (op= ( '+' | '-' ) part= multiplicativeExpression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:283:8: part1= multiplicativeExpression (op= ( '+' | '-' ) part= multiplicativeExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression1997);
            part1=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:283:64: (op= ( '+' | '-' ) part= multiplicativeExpression )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( ((LA38_0>=66 && LA38_0<=67)) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:283:66: op= ( '+' | '-' ) part= multiplicativeExpression
            	    {
            	    op=(Token)input.LT(1);
            	    if ( (input.LA(1)>=66 && input.LA(1)<=67) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(op));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression2018);
            	    part=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,binOpForName(op.getText()),retval.value,part.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:286:1: multiplicativeExpression returns [Expression value] : part1= unaryExpression (op= ( '*' | '/' | '%' ) part= unaryExpression )* ;
    public final MandaraxParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        MandaraxParser.multiplicativeExpression_return retval = new MandaraxParser.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token op=null;
        MandaraxParser.unaryExpression_return part1 = null;

        MandaraxParser.unaryExpression_return part = null;


        CommonTree op_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:287:5: (part1= unaryExpression (op= ( '*' | '/' | '%' ) part= unaryExpression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:287:8: part1= unaryExpression (op= ( '*' | '/' | '%' ) part= unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression2049);
            part1=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:287:56: (op= ( '*' | '/' | '%' ) part= unaryExpression )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==26||(LA39_0>=68 && LA39_0<=69)) ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:287:58: op= ( '*' | '/' | '%' ) part= unaryExpression
            	    {
            	    op=(Token)input.LT(1);
            	    if ( input.LA(1)==26||(input.LA(1)>=68 && input.LA(1)<=69) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(op));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression2076);
            	    part=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,binOpForName(op.getText()),retval.value,part.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:290:1: unaryExpression returns [Expression value] : ( '-' part1= unaryExpression | part2= unaryExpressionNotPlusMinus );
    public final MandaraxParser.unaryExpression_return unaryExpression() throws RecognitionException {
        MandaraxParser.unaryExpression_return retval = new MandaraxParser.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal68=null;
        MandaraxParser.unaryExpression_return part1 = null;

        MandaraxParser.unaryExpressionNotPlusMinus_return part2 = null;


        CommonTree char_literal68_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:291:5: ( '-' part1= unaryExpression | part2= unaryExpressionNotPlusMinus )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==67) ) {
                alt40=1;
            }
            else if ( ((LA40_0>=Identifier && LA40_0<=DecimalLiteral)||LA40_0==35||(LA40_0>=52 && LA40_0<=53)||(LA40_0>=70 && LA40_0<=71)) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:291:9: '-' part1= unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal68=(Token)match(input,67,FOLLOW_67_in_unaryExpression2108); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal68_tree = (CommonTree)adaptor.create(char_literal68);
                    adaptor.addChild(root_0, char_literal68_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression2114);
                    part1=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new UnaryExpression(pos(part1.value),context,UnOp.MINUS,part1.value);
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:292:9: part2= unaryExpressionNotPlusMinus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression2130);
                    part2=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = part2.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:295:1: unaryExpressionNotPlusMinus returns [Expression value] : ( '~' r1= unaryExpression | '!' r2= unaryExpression | r3= castExpression | r9= functionInvocation | r8= methodInvocation | r7= propertyAccess | r4= objectref | r5= qualifiedName | r6= parExpression );
    public final MandaraxParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        MandaraxParser.unaryExpressionNotPlusMinus_return retval = new MandaraxParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal69=null;
        Token char_literal70=null;
        MandaraxParser.unaryExpression_return r1 = null;

        MandaraxParser.unaryExpression_return r2 = null;

        MandaraxParser.castExpression_return r3 = null;

        MandaraxParser.functionInvocation_return r9 = null;

        MandaraxParser.methodInvocation_return r8 = null;

        MandaraxParser.propertyAccess_return r7 = null;

        MandaraxParser.objectref_return r4 = null;

        MandaraxParser.qualifiedName_return r5 = null;

        MandaraxParser.parExpression_return r6 = null;


        CommonTree char_literal69_tree=null;
        CommonTree char_literal70_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:296:5: ( '~' r1= unaryExpression | '!' r2= unaryExpression | r3= castExpression | r9= functionInvocation | r8= methodInvocation | r7= propertyAccess | r4= objectref | r5= qualifiedName | r6= parExpression )
            int alt41=9;
            alt41 = dfa41.predict(input);
            switch (alt41) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:296:9: '~' r1= unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal69=(Token)match(input,70,FOLLOW_70_in_unaryExpressionNotPlusMinus2155); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal69_tree = (CommonTree)adaptor.create(char_literal69);
                    adaptor.addChild(root_0, char_literal69_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus2161);
                    r1=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new UnaryExpression(pos(r1.value),context,UnOp.COMPL,r1.value);
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:297:9: '!' r2= unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal70=(Token)match(input,71,FOLLOW_71_in_unaryExpressionNotPlusMinus2173); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal70_tree = (CommonTree)adaptor.create(char_literal70);
                    adaptor.addChild(root_0, char_literal70_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus2179);
                    r2=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new UnaryExpression(pos(r2.value),context,UnOp.NOT,r2.value);
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:298:9: r3= castExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus2195);
                    r3=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r3.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r3.value;
                    }

                    }
                    break;
                case 4 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:299:9: r9= functionInvocation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_functionInvocation_in_unaryExpressionNotPlusMinus2211);
                    r9=functionInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r9.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r9.value;
                    }

                    }
                    break;
                case 5 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:300:9: r8= methodInvocation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_methodInvocation_in_unaryExpressionNotPlusMinus2227);
                    r8=methodInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r8.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r8.value;
                    }

                    }
                    break;
                case 6 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:301:9: r7= propertyAccess
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_propertyAccess_in_unaryExpressionNotPlusMinus2243);
                    r7=propertyAccess();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r7.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r7.value;
                    }

                    }
                    break;
                case 7 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:302:9: r4= objectref
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_objectref_in_unaryExpressionNotPlusMinus2259);
                    r4=objectref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r4.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r4.value;
                    }

                    }
                    break;
                case 8 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:303:9: r5= qualifiedName
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_qualifiedName_in_unaryExpressionNotPlusMinus2275);
                    r5=qualifiedName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r5.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r5.value;
                    }

                    }
                    break;
                case 9 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:304:9: r6= parExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_unaryExpressionNotPlusMinus2291);
                    r6=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r6.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r6.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class propertyAccess_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyAccess"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:307:1: propertyAccess returns [Expression value] : o= objectref ( '.' i= Identifier )* ;
    public final MandaraxParser.propertyAccess_return propertyAccess() throws RecognitionException {
        MandaraxParser.propertyAccess_return retval = new MandaraxParser.propertyAccess_return();
        retval.start = input.LT(1);
        int propertyAccess_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token char_literal71=null;
        MandaraxParser.objectref_return o = null;


        CommonTree i_tree=null;
        CommonTree char_literal71_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:308:5: (o= objectref ( '.' i= Identifier )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:308:9: o= objectref ( '.' i= Identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_objectref_in_propertyAccess2324);
            o=objectref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, o.getTree());
            if ( state.backtracking==0 ) {
              retval.value = o.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:308:43: ( '.' i= Identifier )*
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);

                if ( (LA42_0==25) ) {
                    alt42=1;
                }


                switch (alt42) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:308:44: '.' i= Identifier
            	    {
            	    char_literal71=(Token)match(input,25,FOLLOW_25_in_propertyAccess2329); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal71_tree = (CommonTree)adaptor.create(char_literal71);
            	    adaptor.addChild(root_0, char_literal71_tree);
            	    }
            	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_propertyAccess2334); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    i_tree = (CommonTree)adaptor.create(i);
            	    adaptor.addChild(root_0, i_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value = new MemberAccess(pos(o.value),context,retval.value,i.getText());
            	    }

            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, propertyAccess_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "propertyAccess"

    public static class methodInvocation_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodInvocation"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:311:1: methodInvocation returns [Expression value] : o= objectref ( '.' i= Identifier '(' (p= commaSeparatedExpressionList )? ')' )* ;
    public final MandaraxParser.methodInvocation_return methodInvocation() throws RecognitionException {
        MandaraxParser.methodInvocation_return retval = new MandaraxParser.methodInvocation_return();
        retval.start = input.LT(1);
        int methodInvocation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token char_literal72=null;
        Token char_literal73=null;
        Token char_literal74=null;
        MandaraxParser.objectref_return o = null;

        MandaraxParser.commaSeparatedExpressionList_return p = null;


        CommonTree i_tree=null;
        CommonTree char_literal72_tree=null;
        CommonTree char_literal73_tree=null;
        CommonTree char_literal74_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:312:5: (o= objectref ( '.' i= Identifier '(' (p= commaSeparatedExpressionList )? ')' )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:312:9: o= objectref ( '.' i= Identifier '(' (p= commaSeparatedExpressionList )? ')' )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_objectref_in_methodInvocation2367);
            o=objectref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, o.getTree());
            if ( state.backtracking==0 ) {
              retval.value = o.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:312:43: ( '.' i= Identifier '(' (p= commaSeparatedExpressionList )? ')' )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==25) ) {
                    alt44=1;
                }


                switch (alt44) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:312:44: '.' i= Identifier '(' (p= commaSeparatedExpressionList )? ')'
            	    {
            	    char_literal72=(Token)match(input,25,FOLLOW_25_in_methodInvocation2372); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal72_tree = (CommonTree)adaptor.create(char_literal72);
            	    adaptor.addChild(root_0, char_literal72_tree);
            	    }
            	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_methodInvocation2378); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    i_tree = (CommonTree)adaptor.create(i);
            	    adaptor.addChild(root_0, i_tree);
            	    }
            	    char_literal73=(Token)match(input,35,FOLLOW_35_in_methodInvocation2380); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal73_tree = (CommonTree)adaptor.create(char_literal73);
            	    adaptor.addChild(root_0, char_literal73_tree);
            	    }
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:312:66: (p= commaSeparatedExpressionList )?
            	    int alt43=2;
            	    int LA43_0 = input.LA(1);

            	    if ( ((LA43_0>=Identifier && LA43_0<=DecimalLiteral)||LA43_0==35||(LA43_0>=52 && LA43_0<=53)||LA43_0==67||(LA43_0>=70 && LA43_0<=71)) ) {
            	        alt43=1;
            	    }
            	    switch (alt43) {
            	        case 1 :
            	            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:312:67: p= commaSeparatedExpressionList
            	            {
            	            pushFollow(FOLLOW_commaSeparatedExpressionList_in_methodInvocation2386);
            	            p=commaSeparatedExpressionList();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p.getTree());

            	            }
            	            break;

            	    }

            	    char_literal74=(Token)match(input,36,FOLLOW_36_in_methodInvocation2390); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal74_tree = (CommonTree)adaptor.create(char_literal74);
            	    adaptor.addChild(root_0, char_literal74_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value = new MemberAccess(pos(o.value),context,retval.value,i.getText(),p==null?new ArrayList<Expression>():p.values);
            	    }

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, methodInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodInvocation"

    public static class functionInvocation_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionInvocation"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:315:1: functionInvocation returns [Expression value] : f= Identifier '(' (p= commaSeparatedExpressionList )? ')' ;
    public final MandaraxParser.functionInvocation_return functionInvocation() throws RecognitionException {
        MandaraxParser.functionInvocation_return retval = new MandaraxParser.functionInvocation_return();
        retval.start = input.LT(1);
        int functionInvocation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token f=null;
        Token char_literal75=null;
        Token char_literal76=null;
        MandaraxParser.commaSeparatedExpressionList_return p = null;


        CommonTree f_tree=null;
        CommonTree char_literal75_tree=null;
        CommonTree char_literal76_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:316:5: (f= Identifier '(' (p= commaSeparatedExpressionList )? ')' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:316:9: f= Identifier '(' (p= commaSeparatedExpressionList )? ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            f=(Token)match(input,Identifier,FOLLOW_Identifier_in_functionInvocation2427); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            f_tree = (CommonTree)adaptor.create(f);
            adaptor.addChild(root_0, f_tree);
            }
            char_literal75=(Token)match(input,35,FOLLOW_35_in_functionInvocation2430); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal75_tree = (CommonTree)adaptor.create(char_literal75);
            adaptor.addChild(root_0, char_literal75_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:316:29: (p= commaSeparatedExpressionList )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( ((LA45_0>=Identifier && LA45_0<=DecimalLiteral)||LA45_0==35||(LA45_0>=52 && LA45_0<=53)||LA45_0==67||(LA45_0>=70 && LA45_0<=71)) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:316:30: p= commaSeparatedExpressionList
                    {
                    pushFollow(FOLLOW_commaSeparatedExpressionList_in_functionInvocation2437);
                    p=commaSeparatedExpressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p.getTree());

                    }
                    break;

            }

            char_literal76=(Token)match(input,36,FOLLOW_36_in_functionInvocation2441); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal76_tree = (CommonTree)adaptor.create(char_literal76);
            adaptor.addChild(root_0, char_literal76_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new FunctionInvocation(pos(f),context,f.getText(),p==null?new ArrayList<Expression>():p.values);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, functionInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "functionInvocation"

    public static class objectref_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectref"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:319:1: objectref returns [Expression value] : (r1= Identifier | r2= literal | r3= parExpression );
    public final MandaraxParser.objectref_return objectref() throws RecognitionException {
        MandaraxParser.objectref_return retval = new MandaraxParser.objectref_return();
        retval.start = input.LT(1);
        int objectref_StartIndex = input.index();
        CommonTree root_0 = null;

        Token r1=null;
        MandaraxParser.literal_return r2 = null;

        MandaraxParser.parExpression_return r3 = null;


        CommonTree r1_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:320:6: (r1= Identifier | r2= literal | r3= parExpression )
            int alt46=3;
            switch ( input.LA(1) ) {
            case Identifier:
                {
                alt46=1;
                }
                break;
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 52:
            case 53:
                {
                alt46=2;
                }
                break;
            case 35:
                {
                alt46=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }

            switch (alt46) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:320:8: r1= Identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    r1=(Token)match(input,Identifier,FOLLOW_Identifier_in_objectref2478); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    r1_tree = (CommonTree)adaptor.create(r1);
                    adaptor.addChild(root_0, r1_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new Variable(pos(r1),context,r1.getText());
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:321:8: r2= literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_objectref2493);
                    r2=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r2.value;
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:322:8: r3= parExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_objectref2508);
                    r3=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r3.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r3.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, objectref_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "objectref"

    public static class castExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:325:1: castExpression returns [Expression value] : ( '(' t1= primitiveType ')' exp1= unaryExpression | '(' t2= type ')' exp2= unaryExpressionNotPlusMinus );
    public final MandaraxParser.castExpression_return castExpression() throws RecognitionException {
        MandaraxParser.castExpression_return retval = new MandaraxParser.castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal77=null;
        Token char_literal78=null;
        Token char_literal79=null;
        Token char_literal80=null;
        MandaraxParser.primitiveType_return t1 = null;

        MandaraxParser.unaryExpression_return exp1 = null;

        MandaraxParser.type_return t2 = null;

        MandaraxParser.unaryExpressionNotPlusMinus_return exp2 = null;


        CommonTree char_literal77_tree=null;
        CommonTree char_literal78_tree=null;
        CommonTree char_literal79_tree=null;
        CommonTree char_literal80_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:326:5: ( '(' t1= primitiveType ')' exp1= unaryExpression | '(' t2= type ')' exp2= unaryExpressionNotPlusMinus )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==35) ) {
                int LA47_1 = input.LA(2);

                if ( (synpred73_Mandarax()) ) {
                    alt47=1;
                }
                else if ( (true) ) {
                    alt47=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }
            switch (alt47) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:326:8: '(' t1= primitiveType ')' exp1= unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal77=(Token)match(input,35,FOLLOW_35_in_castExpression2541); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal77_tree = (CommonTree)adaptor.create(char_literal77);
                    adaptor.addChild(root_0, char_literal77_tree);
                    }
                    pushFollow(FOLLOW_primitiveType_in_castExpression2547);
                    t1=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t1.getTree());
                    char_literal78=(Token)match(input,36,FOLLOW_36_in_castExpression2549); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal78_tree = (CommonTree)adaptor.create(char_literal78);
                    adaptor.addChild(root_0, char_literal78_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_castExpression2555);
                    exp1=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new CastExpression(pos(t1.start),context,exp1.value,t1.value);
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:327:8: '(' t2= type ')' exp2= unaryExpressionNotPlusMinus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal79=(Token)match(input,35,FOLLOW_35_in_castExpression2566); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal79_tree = (CommonTree)adaptor.create(char_literal79);
                    adaptor.addChild(root_0, char_literal79_tree);
                    }
                    pushFollow(FOLLOW_type_in_castExpression2572);
                    t2=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t2.getTree());
                    char_literal80=(Token)match(input,36,FOLLOW_36_in_castExpression2574); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal80_tree = (CommonTree)adaptor.create(char_literal80);
                    adaptor.addChild(root_0, char_literal80_tree);
                    }
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression2580);
                    exp2=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exp2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new CastExpression(pos(t2.start),context,exp2.value,t2.value);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class arguments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:330:1: arguments : '(' ( commaSeparatedExpressionList )? ')' ;
    public final MandaraxParser.arguments_return arguments() throws RecognitionException {
        MandaraxParser.arguments_return retval = new MandaraxParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal81=null;
        Token char_literal83=null;
        MandaraxParser.commaSeparatedExpressionList_return commaSeparatedExpressionList82 = null;


        CommonTree char_literal81_tree=null;
        CommonTree char_literal83_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:331:5: ( '(' ( commaSeparatedExpressionList )? ')' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:331:9: '(' ( commaSeparatedExpressionList )? ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal81=(Token)match(input,35,FOLLOW_35_in_arguments2602); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal81_tree = (CommonTree)adaptor.create(char_literal81);
            adaptor.addChild(root_0, char_literal81_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:331:13: ( commaSeparatedExpressionList )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( ((LA48_0>=Identifier && LA48_0<=DecimalLiteral)||LA48_0==35||(LA48_0>=52 && LA48_0<=53)||LA48_0==67||(LA48_0>=70 && LA48_0<=71)) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:0:0: commaSeparatedExpressionList
                    {
                    pushFollow(FOLLOW_commaSeparatedExpressionList_in_arguments2604);
                    commaSeparatedExpressionList82=commaSeparatedExpressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commaSeparatedExpressionList82.getTree());

                    }
                    break;

            }

            char_literal83=(Token)match(input,36,FOLLOW_36_in_arguments2607); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal83_tree = (CommonTree)adaptor.create(char_literal83);
            adaptor.addChild(root_0, char_literal83_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    // $ANTLR start synpred41_Mandarax
    public final void synpred41_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.equalityExpression_return part = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:239:62: ( '&' part= equalityExpression )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:239:62: '&' part= equalityExpression
        {
        match(input,56,FOLLOW_56_in_synpred41_Mandarax1575); if (state.failed) return ;
        pushFollow(FOLLOW_equalityExpression_in_synpred41_Mandarax1582);
        part=equalityExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_Mandarax

    // $ANTLR start synpred50_Mandarax
    public final void synpred50_Mandarax_fragment() throws RecognitionException {   
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:268:9: ( '<' '<' )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:268:10: '<' '<'
        {
        match(input,64,FOLLOW_64_in_synpred50_Mandarax1868); if (state.failed) return ;
        match(input,64,FOLLOW_64_in_synpred50_Mandarax1870); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred50_Mandarax

    // $ANTLR start synpred51_Mandarax
    public final void synpred51_Mandarax_fragment() throws RecognitionException {   
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:271:9: ( '>' '>' '>' )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:271:10: '>' '>' '>'
        {
        match(input,65,FOLLOW_65_in_synpred51_Mandarax1904); if (state.failed) return ;
        match(input,65,FOLLOW_65_in_synpred51_Mandarax1906); if (state.failed) return ;
        match(input,65,FOLLOW_65_in_synpred51_Mandarax1908); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred51_Mandarax

    // $ANTLR start synpred52_Mandarax
    public final void synpred52_Mandarax_fragment() throws RecognitionException {   
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:276:9: ( '>' '>' )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:276:10: '>' '>'
        {
        match(input,65,FOLLOW_65_in_synpred52_Mandarax1946); if (state.failed) return ;
        match(input,65,FOLLOW_65_in_synpred52_Mandarax1948); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred52_Mandarax

    // $ANTLR start synpred61_Mandarax
    public final void synpred61_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.castExpression_return r3 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:298:9: (r3= castExpression )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:298:9: r3= castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred61_Mandarax2195);
        r3=castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred61_Mandarax

    // $ANTLR start synpred62_Mandarax
    public final void synpred62_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.functionInvocation_return r9 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:299:9: (r9= functionInvocation )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:299:9: r9= functionInvocation
        {
        pushFollow(FOLLOW_functionInvocation_in_synpred62_Mandarax2211);
        r9=functionInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred62_Mandarax

    // $ANTLR start synpred63_Mandarax
    public final void synpred63_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.methodInvocation_return r8 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:300:9: (r8= methodInvocation )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:300:9: r8= methodInvocation
        {
        pushFollow(FOLLOW_methodInvocation_in_synpred63_Mandarax2227);
        r8=methodInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred63_Mandarax

    // $ANTLR start synpred64_Mandarax
    public final void synpred64_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.propertyAccess_return r7 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:301:9: (r7= propertyAccess )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:301:9: r7= propertyAccess
        {
        pushFollow(FOLLOW_propertyAccess_in_synpred64_Mandarax2243);
        r7=propertyAccess();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred64_Mandarax

    // $ANTLR start synpred65_Mandarax
    public final void synpred65_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.objectref_return r4 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:302:9: (r4= objectref )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:302:9: r4= objectref
        {
        pushFollow(FOLLOW_objectref_in_synpred65_Mandarax2259);
        r4=objectref();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred65_Mandarax

    // $ANTLR start synpred66_Mandarax
    public final void synpred66_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.qualifiedName_return r5 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:303:9: (r5= qualifiedName )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:303:9: r5= qualifiedName
        {
        pushFollow(FOLLOW_qualifiedName_in_synpred66_Mandarax2275);
        r5=qualifiedName();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred66_Mandarax

    // $ANTLR start synpred73_Mandarax
    public final void synpred73_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.primitiveType_return t1 = null;

        MandaraxParser.unaryExpression_return exp1 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:326:8: ( '(' t1= primitiveType ')' exp1= unaryExpression )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:326:8: '(' t1= primitiveType ')' exp1= unaryExpression
        {
        match(input,35,FOLLOW_35_in_synpred73_Mandarax2541); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred73_Mandarax2547);
        t1=primitiveType();

        state._fsp--;
        if (state.failed) return ;
        match(input,36,FOLLOW_36_in_synpred73_Mandarax2549); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred73_Mandarax2555);
        exp1=unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred73_Mandarax

    // Delegated rules

    public final boolean synpred52_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA31 dfa31 = new DFA31(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA41 dfa41 = new DFA41(this);
    static final String DFA31_eotS =
        "\13\uffff";
    static final String DFA31_eofS =
        "\1\1\12\uffff";
    static final String DFA31_minS =
        "\1\35\6\uffff\1\0\3\uffff";
    static final String DFA31_maxS =
        "\1\72\6\uffff\1\0\3\uffff";
    static final String DFA31_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA31_specialS =
        "\7\uffff\1\0\3\uffff}>";
    static final String[] DFA31_transitionS = {
            "\2\1\5\uffff\1\1\2\uffff\1\1\17\uffff\1\1\1\7\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "()* loopback of 239:60: ( '&' part= equalityExpression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA31_7 = input.LA(1);

                         
                        int index31_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Mandarax()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index31_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA37_eotS =
        "\20\uffff";
    static final String DFA37_eofS =
        "\20\uffff";
    static final String DFA37_minS =
        "\1\100\1\uffff\1\101\1\4\14\uffff";
    static final String DFA37_maxS =
        "\1\101\1\uffff\1\101\1\107\14\uffff";
    static final String DFA37_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\13\3";
    static final String DFA37_specialS =
        "\1\0\2\uffff\1\1\14\uffff}>";
    static final String[] DFA37_transitionS = {
            "\1\1\1\2",
            "",
            "\1\3",
            "\1\11\1\15\1\12\1\13\1\14\32\uffff\1\10\20\uffff\1\16\1\17"+
            "\13\uffff\1\4\1\uffff\1\5\2\uffff\1\6\1\7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_eotS);
    static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_eofS);
    static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_minS);
    static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_maxS);
    static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_acceptS);
    static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_specialS);
    static final short[][] DFA37_transition;

    static {
        int numStates = DFA37_transitionS.length;
        DFA37_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA37_transition[i] = DFA.unpackEncodedString(DFA37_transitionS[i]);
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;
        }
        public String getDescription() {
            return "267:1: shiftOp returns [BinOp value] : ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA37_0 = input.LA(1);

                         
                        int index37_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA37_0==64) && (synpred50_Mandarax())) {s = 1;}

                        else if ( (LA37_0==65) ) {s = 2;}

                         
                        input.seek(index37_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA37_3 = input.LA(1);

                         
                        int index37_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA37_3==65) && (synpred51_Mandarax())) {s = 4;}

                        else if ( (LA37_3==67) && (synpred52_Mandarax())) {s = 5;}

                        else if ( (LA37_3==70) && (synpred52_Mandarax())) {s = 6;}

                        else if ( (LA37_3==71) && (synpred52_Mandarax())) {s = 7;}

                        else if ( (LA37_3==35) && (synpred52_Mandarax())) {s = 8;}

                        else if ( (LA37_3==Identifier) && (synpred52_Mandarax())) {s = 9;}

                        else if ( (LA37_3==HexLiteral) && (synpred52_Mandarax())) {s = 10;}

                        else if ( (LA37_3==OctalLiteral) && (synpred52_Mandarax())) {s = 11;}

                        else if ( (LA37_3==DecimalLiteral) && (synpred52_Mandarax())) {s = 12;}

                        else if ( (LA37_3==StringLiteral) && (synpred52_Mandarax())) {s = 13;}

                        else if ( (LA37_3==52) && (synpred52_Mandarax())) {s = 14;}

                        else if ( (LA37_3==53) && (synpred52_Mandarax())) {s = 15;}

                         
                        input.seek(index37_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 37, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA41_eotS =
        "\22\uffff";
    static final String DFA41_eofS =
        "\22\uffff";
    static final String DFA41_minS =
        "\1\4\2\uffff\10\0\7\uffff";
    static final String DFA41_maxS =
        "\1\107\2\uffff\10\0\7\uffff";
    static final String DFA41_acceptS =
        "\1\uffff\1\1\1\2\10\uffff\1\3\1\5\1\6\1\7\1\11\1\4\1\10";
    static final String DFA41_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\7\uffff}>";
    static final String[] DFA41_transitionS = {
            "\1\4\1\10\1\5\1\6\1\7\32\uffff\1\3\20\uffff\1\11\1\12\20\uffff"+
            "\1\1\1\2",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "295:1: unaryExpressionNotPlusMinus returns [Expression value] : ( '~' r1= unaryExpression | '!' r2= unaryExpression | r3= castExpression | r9= functionInvocation | r8= methodInvocation | r7= propertyAccess | r4= objectref | r5= qualifiedName | r6= parExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA41_3 = input.LA(1);

                         
                        int index41_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_Mandarax()) ) {s = 11;}

                        else if ( (synpred63_Mandarax()) ) {s = 12;}

                        else if ( (synpred64_Mandarax()) ) {s = 13;}

                        else if ( (synpred65_Mandarax()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index41_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA41_4 = input.LA(1);

                         
                        int index41_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_Mandarax()) ) {s = 16;}

                        else if ( (synpred63_Mandarax()) ) {s = 12;}

                        else if ( (synpred64_Mandarax()) ) {s = 13;}

                        else if ( (synpred65_Mandarax()) ) {s = 14;}

                        else if ( (synpred66_Mandarax()) ) {s = 17;}

                         
                        input.seek(index41_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA41_5 = input.LA(1);

                         
                        int index41_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_Mandarax()) ) {s = 12;}

                        else if ( (synpred64_Mandarax()) ) {s = 13;}

                        else if ( (synpred65_Mandarax()) ) {s = 14;}

                         
                        input.seek(index41_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA41_6 = input.LA(1);

                         
                        int index41_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_Mandarax()) ) {s = 12;}

                        else if ( (synpred64_Mandarax()) ) {s = 13;}

                        else if ( (synpred65_Mandarax()) ) {s = 14;}

                         
                        input.seek(index41_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA41_7 = input.LA(1);

                         
                        int index41_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_Mandarax()) ) {s = 12;}

                        else if ( (synpred64_Mandarax()) ) {s = 13;}

                        else if ( (synpred65_Mandarax()) ) {s = 14;}

                         
                        input.seek(index41_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA41_8 = input.LA(1);

                         
                        int index41_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_Mandarax()) ) {s = 12;}

                        else if ( (synpred64_Mandarax()) ) {s = 13;}

                        else if ( (synpred65_Mandarax()) ) {s = 14;}

                         
                        input.seek(index41_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA41_9 = input.LA(1);

                         
                        int index41_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_Mandarax()) ) {s = 12;}

                        else if ( (synpred64_Mandarax()) ) {s = 13;}

                        else if ( (synpred65_Mandarax()) ) {s = 14;}

                         
                        input.seek(index41_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA41_10 = input.LA(1);

                         
                        int index41_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_Mandarax()) ) {s = 12;}

                        else if ( (synpred64_Mandarax()) ) {s = 13;}

                        else if ( (synpred65_Mandarax()) ) {s = 14;}

                         
                        input.seek(index41_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_23_in_importDeclaration75 = new BitSet(new long[]{0x0000000001000010L});
    public static final BitSet FOLLOW_24_in_importDeclaration82 = new BitSet(new long[]{0x0000000001000010L});
    public static final BitSet FOLLOW_qualifiedName2_in_importDeclaration89 = new BitSet(new long[]{0x000000000A000000L});
    public static final BitSet FOLLOW_25_in_importDeclaration95 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_importDeclaration97 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_importDeclaration101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_packageDeclaration133 = new BitSet(new long[]{0x0000000001000010L});
    public static final BitSet FOLLOW_qualifiedName2_in_packageDeclaration138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_rule173 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_rule175 = new BitSet(new long[]{0x00300008400001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_conjunction_in_rule182 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_rule187 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_functionInvocation_in_rule193 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_rule196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_annotation217 = new BitSet(new long[]{0x0000000001000010L});
    public static final BitSet FOLLOW_qualifiedName2_in_annotation223 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_32_in_annotation225 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_StringLiteral_in_annotation231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_relationshipDefinition263 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_relationshipDefinition271 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_relationshipDefinition273 = new BitSet(new long[]{0x000FF00000000010L});
    public static final BitSet FOLLOW_variableDeclarationList_in_relationshipDefinition279 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_relationshipDefinition281 = new BitSet(new long[]{0x0000006000000000L});
    public static final BitSet FOLLOW_37_in_relationshipDefinition284 = new BitSet(new long[]{0x0000000001000010L});
    public static final BitSet FOLLOW_qualifiedNameList2_in_relationshipDefinition290 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_relationshipDefinition294 = new BitSet(new long[]{0x0000030000000010L});
    public static final BitSet FOLLOW_functionDeclarationList_in_relationshipDefinition300 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_relationshipDefinition302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_variableDeclaration337 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclaration_in_variableDeclarationList383 = new BitSet(new long[]{0x0000008000000002L});
    public static final BitSet FOLLOW_39_in_variableDeclarationList388 = new BitSet(new long[]{0x000FF00000000010L});
    public static final BitSet FOLLOW_variableDeclaration_in_variableDeclarationList394 = new BitSet(new long[]{0x0000008000000002L});
    public static final BitSet FOLLOW_visibility_in_functionDeclaration432 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_functionDeclaration438 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_functionDeclaration440 = new BitSet(new long[]{0x0000001000000010L});
    public static final BitSet FOLLOW_nameList_in_functionDeclaration446 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_functionDeclaration448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionDeclaration_in_functionDeclarationList487 = new BitSet(new long[]{0x0000008000000002L});
    public static final BitSet FOLLOW_39_in_functionDeclarationList492 = new BitSet(new long[]{0x0000030000000010L});
    public static final BitSet FOLLOW_functionDeclaration_in_functionDeclarationList498 = new BitSet(new long[]{0x0000008000000002L});
    public static final BitSet FOLLOW_40_in_visibility530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_visibility535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_constantDeclarator603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_typeName627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_type649 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_42_in_type652 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_type654 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_primitiveType_in_type667 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_42_in_type670 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_43_in_type672 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_Identifier_in_classOrInterfaceType696 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_classOrInterfaceType701 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_classOrInterfaceType707 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_44_in_primitiveType735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_primitiveType747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_primitiveType759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_primitiveType771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_primitiveType783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_primitiveType795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_primitiveType807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_primitiveType819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList845 = new BitSet(new long[]{0x0000008000000002L});
    public static final BitSet FOLLOW_39_in_qualifiedNameList848 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList850 = new BitSet(new long[]{0x0000008000000002L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName874 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_qualifiedName879 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName885 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_qualifiedName2_in_qualifiedNameList2918 = new BitSet(new long[]{0x0000008000000002L});
    public static final BitSet FOLLOW_39_in_qualifiedNameList2923 = new BitSet(new long[]{0x0000000001000010L});
    public static final BitSet FOLLOW_qualifiedName2_in_qualifiedNameList2929 = new BitSet(new long[]{0x0000008000000002L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName2956 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_qualifiedName2961 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName2967 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_Identifier_in_nameList998 = new BitSet(new long[]{0x0000008000000002L});
    public static final BitSet FOLLOW_39_in_nameList1003 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_nameList1009 = new BitSet(new long[]{0x0000008000000002L});
    public static final BitSet FOLLOW_integerLiteral_in_literal1040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal1058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_literal1074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HexLiteral_in_integerLiteral1104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OctalLiteral_in_integerLiteral1120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DecimalLiteral_in_integerLiteral1136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_booleanLiteral1165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_booleanLiteral1181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs1203 = new BitSet(new long[]{0x0000008000000002L});
    public static final BitSet FOLLOW_39_in_elementValuePairs1206 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs1208 = new BitSet(new long[]{0x0000008000000002L});
    public static final BitSet FOLLOW_Identifier_in_elementValuePair1229 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_32_in_elementValuePair1231 = new BitSet(new long[]{0x00700008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair1233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue1256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue1266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_elementValueArrayInitializer1289 = new BitSet(new long[]{0x00F00088000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer1292 = new BitSet(new long[]{0x0080008000000000L});
    public static final BitSet FOLLOW_39_in_elementValueArrayInitializer1295 = new BitSet(new long[]{0x00700008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer1297 = new BitSet(new long[]{0x0080008000000000L});
    public static final BitSet FOLLOW_39_in_elementValueArrayInitializer1304 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_55_in_elementValueArrayInitializer1308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_parExpression1337 = new BitSet(new long[]{0x00300008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_expression_in_parExpression1343 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_parExpression1345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_commaSeparatedExpressionList1383 = new BitSet(new long[]{0x0000008000000002L});
    public static final BitSet FOLLOW_39_in_commaSeparatedExpressionList1388 = new BitSet(new long[]{0x00300008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_expression_in_commaSeparatedExpressionList1394 = new BitSet(new long[]{0x0000008000000002L});
    public static final BitSet FOLLOW_expression_in_andSeparatedExpressionList1431 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_56_in_andSeparatedExpressionList1436 = new BitSet(new long[]{0x00300008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_expression_in_andSeparatedExpressionList1442 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_disjunction_in_conditionalExpression1474 = new BitSet(new long[]{0x0200000000000002L});
    public static final BitSet FOLLOW_57_in_conditionalExpression1478 = new BitSet(new long[]{0x00300008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression1484 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_conditionalExpression1486 = new BitSet(new long[]{0x00300008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression1492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_disjunction1525 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_58_in_disjunction1531 = new BitSet(new long[]{0x00300008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_conjunction_in_disjunction1537 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_equalityExpression_in_conjunction1569 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_56_in_conjunction1575 = new BitSet(new long[]{0x00300008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_equalityExpression_in_conjunction1582 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression1614 = new BitSet(new long[]{0x1800000000000002L});
    public static final BitSet FOLLOW_set_in_equalityExpression1624 = new BitSet(new long[]{0x00300008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression1636 = new BitSet(new long[]{0x1800000000000002L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression1668 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_61_in_instanceOfExpression1671 = new BitSet(new long[]{0x000FF00000000010L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression1677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression1709 = new BitSet(new long[]{0xC000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_relationalOp_in_relationalExpression1719 = new BitSet(new long[]{0x00300008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression1725 = new BitSet(new long[]{0xC000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_62_in_relationalOp1759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_relationalOp1771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_relationalOp1781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_relationalOp1793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression1823 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_shiftOp_in_shiftExpression1833 = new BitSet(new long[]{0x00300008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression1839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_shiftOp1876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_shiftOp1880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_shiftOp1914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_shiftOp1918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_shiftOp1922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_shiftOp1954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_shiftOp1958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression1997 = new BitSet(new long[]{0x0000000000000002L,0x000000000000000CL});
    public static final BitSet FOLLOW_set_in_additiveExpression2006 = new BitSet(new long[]{0x00300008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression2018 = new BitSet(new long[]{0x0000000000000002L,0x000000000000000CL});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression2049 = new BitSet(new long[]{0x0000000004000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_set_in_multiplicativeExpression2058 = new BitSet(new long[]{0x00300008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression2076 = new BitSet(new long[]{0x0000000004000002L,0x0000000000000030L});
    public static final BitSet FOLLOW_67_in_unaryExpression2108 = new BitSet(new long[]{0x00300008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression2114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression2130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_unaryExpressionNotPlusMinus2155 = new BitSet(new long[]{0x00300008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus2161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_unaryExpressionNotPlusMinus2173 = new BitSet(new long[]{0x00300008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus2179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus2195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionInvocation_in_unaryExpressionNotPlusMinus2211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodInvocation_in_unaryExpressionNotPlusMinus2227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyAccess_in_unaryExpressionNotPlusMinus2243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectref_in_unaryExpressionNotPlusMinus2259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_unaryExpressionNotPlusMinus2275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_unaryExpressionNotPlusMinus2291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectref_in_propertyAccess2324 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_propertyAccess2329 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_propertyAccess2334 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_objectref_in_methodInvocation2367 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_methodInvocation2372 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_methodInvocation2378 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_methodInvocation2380 = new BitSet(new long[]{0x00300018000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_commaSeparatedExpressionList_in_methodInvocation2386 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_methodInvocation2390 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_Identifier_in_functionInvocation2427 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_functionInvocation2430 = new BitSet(new long[]{0x00300018000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_commaSeparatedExpressionList_in_functionInvocation2437 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_functionInvocation2441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_objectref2478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_objectref2493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_objectref2508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_castExpression2541 = new BitSet(new long[]{0x000FF00000000010L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression2547 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_castExpression2549 = new BitSet(new long[]{0x00300008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression2555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_castExpression2566 = new BitSet(new long[]{0x000FF00000000010L});
    public static final BitSet FOLLOW_type_in_castExpression2572 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_castExpression2574 = new BitSet(new long[]{0x00300008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression2580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_arguments2602 = new BitSet(new long[]{0x00300018000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_commaSeparatedExpressionList_in_arguments2604 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_arguments2607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_synpred41_Mandarax1575 = new BitSet(new long[]{0x00300008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_equalityExpression_in_synpred41_Mandarax1582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_synpred50_Mandarax1868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_synpred50_Mandarax1870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_synpred51_Mandarax1904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_synpred51_Mandarax1906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_synpred51_Mandarax1908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_synpred52_Mandarax1946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_synpred52_Mandarax1948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_synpred61_Mandarax2195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionInvocation_in_synpred62_Mandarax2211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodInvocation_in_synpred63_Mandarax2227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyAccess_in_synpred64_Mandarax2243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectref_in_synpred65_Mandarax2259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_synpred66_Mandarax2275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_synpred73_Mandarax2541 = new BitSet(new long[]{0x000FF00000000010L});
    public static final BitSet FOLLOW_primitiveType_in_synpred73_Mandarax2547 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_synpred73_Mandarax2549 = new BitSet(new long[]{0x00300008000001F0L,0x00000000000000C8L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred73_Mandarax2555 = new BitSet(new long[]{0x0000000000000002L});

}