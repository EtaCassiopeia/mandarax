// $ANTLR 3.2 Sep 23, 2009 12:02:23 /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g 2010-09-04 10:33:08
 
/*
 * Copyright 2010 Jens Dietrich 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
 * Unless required by applicable law or agreed to in writing, software distributed under the 
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
 * either express or implied. See the License for the specific language governing permissions 
 * and limitations under the License.
 */
 
/**
 * Parser generated by ANTLR. The grammar is based on fragements taken from the Java 1.5 developed 
 * by Terence Parr and released under the BSD license. See http://www.antlr.org/grammar/1152141644268/Java.g
 * for details.
 * @author jens dietrich
 */ 
package org.mandarax.dsl.parser;
import org.mandarax.dsl.*;
import static org.mandarax.dsl.Utils.*;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class MandaraxParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Identifier", "StringLiteral", "HexLiteral", "OctalLiteral", "DecimalLiteral", "HexDigit", "IntegerTypeSuffix", "Exponent", "FloatTypeSuffix", "FloatingPointLiteral", "EscapeSequence", "CharacterLiteral", "UnicodeEscape", "OctalEscape", "Letter", "JavaIDDigit", "WS", "COMMENT", "LINE_COMMENT", "'import'", "'static'", "'.'", "'*'", "';'", "'relationship'", "'rel'", "'('", "')'", "','", "'public'", "'private'", "'['", "']'", "'boolean'", "'char'", "'byte'", "'short'", "'int'", "'long'", "'float'", "'double'", "'true'", "'false'", "'='", "'{'", "'}'", "'?'", "':'", "'|'", "'&'", "'=='", "'!='", "'instanceof'", "'<='", "'>='", "'<'", "'>'", "'+'", "'-'", "'/'", "'%'", "'~'", "'!'"
    };
    public static final int T__66=66;
    public static final int T__64=64;
    public static final int T__29=29;
    public static final int T__65=65;
    public static final int T__28=28;
    public static final int T__27=27;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__26=26;
    public static final int FloatTypeSuffix=12;
    public static final int T__25=25;
    public static final int OctalLiteral=7;
    public static final int T__24=24;
    public static final int T__23=23;
    public static final int CharacterLiteral=15;
    public static final int Exponent=11;
    public static final int T__61=61;
    public static final int EOF=-1;
    public static final int T__60=60;
    public static final int HexDigit=9;
    public static final int Identifier=4;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__59=59;
    public static final int COMMENT=21;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int HexLiteral=6;
    public static final int T__43=43;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int LINE_COMMENT=22;
    public static final int IntegerTypeSuffix=10;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int DecimalLiteral=8;
    public static final int StringLiteral=5;
    public static final int T__30=30;
    public static final int T__31=31;
    public static final int T__32=32;
    public static final int WS=20;
    public static final int T__33=33;
    public static final int T__34=34;
    public static final int T__35=35;
    public static final int T__36=36;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int UnicodeEscape=16;
    public static final int FloatingPointLiteral=13;
    public static final int JavaIDDigit=19;
    public static final int Letter=18;
    public static final int OctalEscape=17;
    public static final int EscapeSequence=14;

    // delegates
    // delegators


        public MandaraxParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public MandaraxParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[115+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return MandaraxParser.tokenNames; }
    public String getGrammarFileName() { return "/Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g"; }


      private Context context = new Context(); 
      private Position pos(Token token) {
      	return new Position(token.getLine(),token.getCharPositionInLine());
      }
      private Position pos(Expression expression) {
      	return expression.getPosition().clone();
      }


    public static class importDeclaration_return extends ParserRuleReturnScope {
        public ImportDeclaration value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:63:1: importDeclaration returns [ImportDeclaration value] : i= 'import' ( (s= 'static' )? ) (n= qualifiedName2 ) (w= '.' '*' )? ';' ;
    public final MandaraxParser.importDeclaration_return importDeclaration() throws RecognitionException {
        MandaraxParser.importDeclaration_return retval = new MandaraxParser.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token w=null;
        Token char_literal1=null;
        Token char_literal2=null;
        MandaraxParser.qualifiedName2_return n = null;


        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree w_tree=null;
        CommonTree char_literal1_tree=null;
        CommonTree char_literal2_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:64:5: (i= 'import' ( (s= 'static' )? ) (n= qualifiedName2 ) (w= '.' '*' )? ';' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:64:9: i= 'import' ( (s= 'static' )? ) (n= qualifiedName2 ) (w= '.' '*' )? ';'
            {
            root_0 = (CommonTree)adaptor.nil();

            i=(Token)match(input,23,FOLLOW_23_in_importDeclaration75); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:64:20: ( (s= 'static' )? )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:64:21: (s= 'static' )?
            {
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:64:23: (s= 'static' )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==24) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:0:0: s= 'static'
                    {
                    s=(Token)match(input,24,FOLLOW_24_in_importDeclaration82); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    s_tree = (CommonTree)adaptor.create(s);
                    adaptor.addChild(root_0, s_tree);
                    }

                    }
                    break;

            }


            }

            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:64:36: (n= qualifiedName2 )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:64:37: n= qualifiedName2
            {
            pushFollow(FOLLOW_qualifiedName2_in_importDeclaration89);
            n=qualifiedName2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, n.getTree());

            }

            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:64:55: (w= '.' '*' )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==25) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:64:56: w= '.' '*'
                    {
                    w=(Token)match(input,25,FOLLOW_25_in_importDeclaration95); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    w_tree = (CommonTree)adaptor.create(w);
                    adaptor.addChild(root_0, w_tree);
                    }
                    char_literal1=(Token)match(input,26,FOLLOW_26_in_importDeclaration97); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal1_tree = (CommonTree)adaptor.create(char_literal1);
                    adaptor.addChild(root_0, char_literal1_tree);
                    }

                    }
                    break;

            }

            char_literal2=(Token)match(input,27,FOLLOW_27_in_importDeclaration101); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal2_tree = (CommonTree)adaptor.create(char_literal2);
            adaptor.addChild(root_0, char_literal2_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new ImportDeclaration(pos(i),context,n.value,s!=null,w!=null);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class relationshipDefinition_return extends ParserRuleReturnScope {
        public RelationshipDefinition value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationshipDefinition"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:67:1: relationshipDefinition returns [RelationshipDefinition value] : q= ( 'relationship' | 'rel' ) ti= Identifier '(' tp= variableDeclarationList ')' queries= functionDeclarationList ;
    public final MandaraxParser.relationshipDefinition_return relationshipDefinition() throws RecognitionException {
        MandaraxParser.relationshipDefinition_return retval = new MandaraxParser.relationshipDefinition_return();
        retval.start = input.LT(1);
        int relationshipDefinition_StartIndex = input.index();
        CommonTree root_0 = null;

        Token q=null;
        Token ti=null;
        Token char_literal3=null;
        Token char_literal4=null;
        MandaraxParser.variableDeclarationList_return tp = null;

        MandaraxParser.functionDeclarationList_return queries = null;


        CommonTree q_tree=null;
        CommonTree ti_tree=null;
        CommonTree char_literal3_tree=null;
        CommonTree char_literal4_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:68:5: (q= ( 'relationship' | 'rel' ) ti= Identifier '(' tp= variableDeclarationList ')' queries= functionDeclarationList )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:68:7: q= ( 'relationship' | 'rel' ) ti= Identifier '(' tp= variableDeclarationList ')' queries= functionDeclarationList
            {
            root_0 = (CommonTree)adaptor.nil();

            q=(Token)input.LT(1);
            if ( (input.LA(1)>=28 && input.LA(1)<=29) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(q));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            ti=(Token)match(input,Identifier,FOLLOW_Identifier_in_relationshipDefinition135); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ti_tree = (CommonTree)adaptor.create(ti);
            adaptor.addChild(root_0, ti_tree);
            }
            char_literal3=(Token)match(input,30,FOLLOW_30_in_relationshipDefinition137); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal3_tree = (CommonTree)adaptor.create(char_literal3);
            adaptor.addChild(root_0, char_literal3_tree);
            }
            pushFollow(FOLLOW_variableDeclarationList_in_relationshipDefinition143);
            tp=variableDeclarationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tp.getTree());
            char_literal4=(Token)match(input,31,FOLLOW_31_in_relationshipDefinition145); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal4_tree = (CommonTree)adaptor.create(char_literal4);
            adaptor.addChild(root_0, char_literal4_tree);
            }
            pushFollow(FOLLOW_functionDeclarationList_in_relationshipDefinition151);
            queries=functionDeclarationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, queries.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new RelationshipDefinition(pos(q),context,ti.getText(),tp.value,queries.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, relationshipDefinition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationshipDefinition"

    public static class variableDeclaration_return extends ParserRuleReturnScope {
        public VariableDeclaration value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaration"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:72:1: variableDeclaration returns [VariableDeclaration value] : t= type n= Identifier ;
    public final MandaraxParser.variableDeclaration_return variableDeclaration() throws RecognitionException {
        MandaraxParser.variableDeclaration_return retval = new MandaraxParser.variableDeclaration_return();
        retval.start = input.LT(1);
        int variableDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token n=null;
        MandaraxParser.type_return t = null;


        CommonTree n_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:73:5: (t= type n= Identifier )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:73:7: t= type n= Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_variableDeclaration187);
            t=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
            n=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration193); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            n_tree = (CommonTree)adaptor.create(n);
            adaptor.addChild(root_0, n_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new VariableDeclaration(pos(t.start),context,t.value,n.getText());
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, variableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaration"

    public static class variableDeclarationList_return extends ParserRuleReturnScope {
        public List<VariableDeclaration> value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarationList"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:76:1: variableDeclarationList returns [List<VariableDeclaration> value] : part1= variableDeclaration ( ',' part2= variableDeclaration )* ;
    public final MandaraxParser.variableDeclarationList_return variableDeclarationList() throws RecognitionException {
        MandaraxParser.variableDeclarationList_return retval = new MandaraxParser.variableDeclarationList_return();
        retval.start = input.LT(1);
        int variableDeclarationList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal5=null;
        MandaraxParser.variableDeclaration_return part1 = null;

        MandaraxParser.variableDeclaration_return part2 = null;


        CommonTree char_literal5_tree=null;

        retval.value = new ArrayList<VariableDeclaration>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:78:5: (part1= variableDeclaration ( ',' part2= variableDeclaration )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:78:7: part1= variableDeclaration ( ',' part2= variableDeclaration )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_variableDeclaration_in_variableDeclarationList233);
            part1=variableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value.add(part1.value);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:78:62: ( ',' part2= variableDeclaration )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==32) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:78:63: ',' part2= variableDeclaration
            	    {
            	    char_literal5=(Token)match(input,32,FOLLOW_32_in_variableDeclarationList238); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal5_tree = (CommonTree)adaptor.create(char_literal5);
            	    adaptor.addChild(root_0, char_literal5_tree);
            	    }
            	    pushFollow(FOLLOW_variableDeclaration_in_variableDeclarationList244);
            	    part2=variableDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.add(part2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, variableDeclarationList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarationList"

    public static class functionDeclaration_return extends ParserRuleReturnScope {
        public FunctionDeclaration value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionDeclaration"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:81:1: functionDeclaration returns [FunctionDeclaration value] : v= visibility n= Identifier '(' p= nameList ')' ;
    public final MandaraxParser.functionDeclaration_return functionDeclaration() throws RecognitionException {
        MandaraxParser.functionDeclaration_return retval = new MandaraxParser.functionDeclaration_return();
        retval.start = input.LT(1);
        int functionDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token n=null;
        Token char_literal6=null;
        Token char_literal7=null;
        MandaraxParser.visibility_return v = null;

        MandaraxParser.nameList_return p = null;


        CommonTree n_tree=null;
        CommonTree char_literal6_tree=null;
        CommonTree char_literal7_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:82:5: (v= visibility n= Identifier '(' p= nameList ')' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:82:7: v= visibility n= Identifier '(' p= nameList ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_visibility_in_functionDeclaration282);
            v=visibility();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, v.getTree());
            n=(Token)match(input,Identifier,FOLLOW_Identifier_in_functionDeclaration288); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            n_tree = (CommonTree)adaptor.create(n);
            adaptor.addChild(root_0, n_tree);
            }
            char_literal6=(Token)match(input,30,FOLLOW_30_in_functionDeclaration290); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal6_tree = (CommonTree)adaptor.create(char_literal6);
            adaptor.addChild(root_0, char_literal6_tree);
            }
            pushFollow(FOLLOW_nameList_in_functionDeclaration296);
            p=nameList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p.getTree());
            char_literal7=(Token)match(input,31,FOLLOW_31_in_functionDeclaration298); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal7_tree = (CommonTree)adaptor.create(char_literal7);
            adaptor.addChild(root_0, char_literal7_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new FunctionDeclaration(pos(n),context,v.value,n.getText(),p.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, functionDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "functionDeclaration"

    public static class functionDeclarationList_return extends ParserRuleReturnScope {
        public List<FunctionDeclaration> value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionDeclarationList"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:85:1: functionDeclarationList returns [List<FunctionDeclaration> value] : part1= functionDeclaration ( ',' part2= functionDeclaration )* ;
    public final MandaraxParser.functionDeclarationList_return functionDeclarationList() throws RecognitionException {
        MandaraxParser.functionDeclarationList_return retval = new MandaraxParser.functionDeclarationList_return();
        retval.start = input.LT(1);
        int functionDeclarationList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal8=null;
        MandaraxParser.functionDeclaration_return part1 = null;

        MandaraxParser.functionDeclaration_return part2 = null;


        CommonTree char_literal8_tree=null;

        retval.value = new ArrayList<FunctionDeclaration>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:87:5: (part1= functionDeclaration ( ',' part2= functionDeclaration )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:87:7: part1= functionDeclaration ( ',' part2= functionDeclaration )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_functionDeclaration_in_functionDeclarationList337);
            part1=functionDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value.add(part1.value);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:87:62: ( ',' part2= functionDeclaration )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==32) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:87:63: ',' part2= functionDeclaration
            	    {
            	    char_literal8=(Token)match(input,32,FOLLOW_32_in_functionDeclarationList342); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal8_tree = (CommonTree)adaptor.create(char_literal8);
            	    adaptor.addChild(root_0, char_literal8_tree);
            	    }
            	    pushFollow(FOLLOW_functionDeclaration_in_functionDeclarationList348);
            	    part2=functionDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.add(part2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, functionDeclarationList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "functionDeclarationList"

    public static class visibility_return extends ParserRuleReturnScope {
        public Visibility value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "visibility"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:90:1: visibility returns [Visibility value] : ( 'public' | ( 'private' ) )? ;
    public final MandaraxParser.visibility_return visibility() throws RecognitionException {
        MandaraxParser.visibility_return retval = new MandaraxParser.visibility_return();
        retval.start = input.LT(1);
        int visibility_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal9=null;
        Token string_literal10=null;

        CommonTree string_literal9_tree=null;
        CommonTree string_literal10_tree=null;

        retval.value = Visibility.PUBLIC;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:92:6: ( ( 'public' | ( 'private' ) )? )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:92:8: ( 'public' | ( 'private' ) )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:92:8: ( 'public' | ( 'private' ) )?
            int alt5=3;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==33) ) {
                alt5=1;
            }
            else if ( (LA5_0==34) ) {
                alt5=2;
            }
            switch (alt5) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:92:9: 'public'
                    {
                    string_literal9=(Token)match(input,33,FOLLOW_33_in_visibility384); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal9_tree = (CommonTree)adaptor.create(string_literal9);
                    adaptor.addChild(root_0, string_literal9_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:92:20: ( 'private' )
                    {
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:92:20: ( 'private' )
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:92:21: 'private'
                    {
                    string_literal10=(Token)match(input,34,FOLLOW_34_in_visibility389); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal10_tree = (CommonTree)adaptor.create(string_literal10);
                    adaptor.addChild(root_0, string_literal10_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = Visibility.PRIVATE;
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, visibility_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "visibility"

    public static class expression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:96:1: expression returns [Expression value] : r= conditionalExpression ;
    public final MandaraxParser.expression_return expression() throws RecognitionException {
        MandaraxParser.expression_return retval = new MandaraxParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        CommonTree root_0 = null;

        MandaraxParser.conditionalExpression_return r = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:97:5: (r= conditionalExpression )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:97:9: r= conditionalExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conditionalExpression_in_expression436);
            r=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, r.getTree());
            if ( state.backtracking==0 ) {
              retval.value =r.value;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class constantDeclarator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclarator"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:100:1: constantDeclarator : Identifier ;
    public final MandaraxParser.constantDeclarator_return constantDeclarator() throws RecognitionException {
        MandaraxParser.constantDeclarator_return retval = new MandaraxParser.constantDeclarator_return();
        retval.start = input.LT(1);
        int constantDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token Identifier11=null;

        CommonTree Identifier11_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:101:5: ( Identifier )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:101:9: Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            Identifier11=(Token)match(input,Identifier,FOLLOW_Identifier_in_constantDeclarator457); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier11_tree = (CommonTree)adaptor.create(Identifier11);
            adaptor.addChild(root_0, Identifier11_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, constantDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclarator"

    public static class typeName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeName"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:104:1: typeName : qualifiedName ;
    public final MandaraxParser.typeName_return typeName() throws RecognitionException {
        MandaraxParser.typeName_return retval = new MandaraxParser.typeName_return();
        retval.start = input.LT(1);
        int typeName_StartIndex = input.index();
        CommonTree root_0 = null;

        MandaraxParser.qualifiedName_return qualifiedName12 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:105:5: ( qualifiedName )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:105:9: qualifiedName
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_typeName481);
            qualifiedName12=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName12.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, typeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeName"

    public static class type_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:108:1: type returns [String value] : (i= classOrInterfaceType ( '[' ']' )* | j= primitiveType ( '[' ']' )* );
    public final MandaraxParser.type_return type() throws RecognitionException {
        MandaraxParser.type_return retval = new MandaraxParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal13=null;
        Token char_literal14=null;
        Token char_literal15=null;
        Token char_literal16=null;
        MandaraxParser.classOrInterfaceType_return i = null;

        MandaraxParser.primitiveType_return j = null;


        CommonTree char_literal13_tree=null;
        CommonTree char_literal14_tree=null;
        CommonTree char_literal15_tree=null;
        CommonTree char_literal16_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:109:2: (i= classOrInterfaceType ( '[' ']' )* | j= primitiveType ( '[' ']' )* )
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==Identifier) ) {
                alt8=1;
            }
            else if ( ((LA8_0>=37 && LA8_0<=44)) ) {
                alt8=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }
            switch (alt8) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:109:4: i= classOrInterfaceType ( '[' ']' )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceType_in_type503);
                    i=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, i.getTree());
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:109:29: ( '[' ']' )*
                    loop6:
                    do {
                        int alt6=2;
                        int LA6_0 = input.LA(1);

                        if ( (LA6_0==35) ) {
                            alt6=1;
                        }


                        switch (alt6) {
                    	case 1 :
                    	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:109:30: '[' ']'
                    	    {
                    	    char_literal13=(Token)match(input,35,FOLLOW_35_in_type506); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal13_tree = (CommonTree)adaptor.create(char_literal13);
                    	    adaptor.addChild(root_0, char_literal13_tree);
                    	    }
                    	    char_literal14=(Token)match(input,36,FOLLOW_36_in_type508); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal14_tree = (CommonTree)adaptor.create(char_literal14);
                    	    adaptor.addChild(root_0, char_literal14_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop6;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                      retval.value = i.value;
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:110:4: j= primitiveType ( '[' ']' )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_type521);
                    j=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, j.getTree());
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:110:22: ( '[' ']' )*
                    loop7:
                    do {
                        int alt7=2;
                        int LA7_0 = input.LA(1);

                        if ( (LA7_0==35) ) {
                            alt7=1;
                        }


                        switch (alt7) {
                    	case 1 :
                    	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:110:23: '[' ']'
                    	    {
                    	    char_literal15=(Token)match(input,35,FOLLOW_35_in_type524); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal15_tree = (CommonTree)adaptor.create(char_literal15);
                    	    adaptor.addChild(root_0, char_literal15_tree);
                    	    }
                    	    char_literal16=(Token)match(input,36,FOLLOW_36_in_type526); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal16_tree = (CommonTree)adaptor.create(char_literal16);
                    	    adaptor.addChild(root_0, char_literal16_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop7;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                      retval.value = j.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class classOrInterfaceType_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceType"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:113:1: classOrInterfaceType returns [String value] : i= Identifier ( '.' i= Identifier )* ;
    public final MandaraxParser.classOrInterfaceType_return classOrInterfaceType() throws RecognitionException {
        MandaraxParser.classOrInterfaceType_return retval = new MandaraxParser.classOrInterfaceType_return();
        retval.start = input.LT(1);
        int classOrInterfaceType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token char_literal17=null;

        CommonTree i_tree=null;
        CommonTree char_literal17_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:114:2: (i= Identifier ( '.' i= Identifier )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:114:4: i= Identifier ( '.' i= Identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_classOrInterfaceType550); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value =i.getText();
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:114:41: ( '.' i= Identifier )*
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( (LA9_0==25) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:114:42: '.' i= Identifier
            	    {
            	    char_literal17=(Token)match(input,25,FOLLOW_25_in_classOrInterfaceType555); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal17_tree = (CommonTree)adaptor.create(char_literal17);
            	    adaptor.addChild(root_0, char_literal17_tree);
            	    }
            	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_classOrInterfaceType561); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    i_tree = (CommonTree)adaptor.create(i);
            	    adaptor.addChild(root_0, i_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value =retval.value+'.'+i.getText();
            	    }

            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, classOrInterfaceType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceType"

    public static class primitiveType_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:118:1: primitiveType returns [String value] : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
    public final MandaraxParser.primitiveType_return primitiveType() throws RecognitionException {
        MandaraxParser.primitiveType_return retval = new MandaraxParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal18=null;
        Token string_literal19=null;
        Token string_literal20=null;
        Token string_literal21=null;
        Token string_literal22=null;
        Token string_literal23=null;
        Token string_literal24=null;
        Token string_literal25=null;

        CommonTree string_literal18_tree=null;
        CommonTree string_literal19_tree=null;
        CommonTree string_literal20_tree=null;
        CommonTree string_literal21_tree=null;
        CommonTree string_literal22_tree=null;
        CommonTree string_literal23_tree=null;
        CommonTree string_literal24_tree=null;
        CommonTree string_literal25_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:119:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
            int alt10=8;
            switch ( input.LA(1) ) {
            case 37:
                {
                alt10=1;
                }
                break;
            case 38:
                {
                alt10=2;
                }
                break;
            case 39:
                {
                alt10=3;
                }
                break;
            case 40:
                {
                alt10=4;
                }
                break;
            case 41:
                {
                alt10=5;
                }
                break;
            case 42:
                {
                alt10=6;
                }
                break;
            case 43:
                {
                alt10=7;
                }
                break;
            case 44:
                {
                alt10=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:119:9: 'boolean'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal18=(Token)match(input,37,FOLLOW_37_in_primitiveType589); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal18_tree = (CommonTree)adaptor.create(string_literal18);
                    adaptor.addChild(root_0, string_literal18_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="boolean";
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:120:9: 'char'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal19=(Token)match(input,38,FOLLOW_38_in_primitiveType601); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal19_tree = (CommonTree)adaptor.create(string_literal19);
                    adaptor.addChild(root_0, string_literal19_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="char";
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:121:9: 'byte'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal20=(Token)match(input,39,FOLLOW_39_in_primitiveType613); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal20_tree = (CommonTree)adaptor.create(string_literal20);
                    adaptor.addChild(root_0, string_literal20_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="byte";
                    }

                    }
                    break;
                case 4 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:122:9: 'short'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal21=(Token)match(input,40,FOLLOW_40_in_primitiveType625); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal21_tree = (CommonTree)adaptor.create(string_literal21);
                    adaptor.addChild(root_0, string_literal21_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="short";
                    }

                    }
                    break;
                case 5 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:123:9: 'int'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal22=(Token)match(input,41,FOLLOW_41_in_primitiveType637); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal22_tree = (CommonTree)adaptor.create(string_literal22);
                    adaptor.addChild(root_0, string_literal22_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="int";
                    }

                    }
                    break;
                case 6 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:124:9: 'long'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal23=(Token)match(input,42,FOLLOW_42_in_primitiveType649); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal23_tree = (CommonTree)adaptor.create(string_literal23);
                    adaptor.addChild(root_0, string_literal23_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="boolean";
                    }

                    }
                    break;
                case 7 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:125:9: 'float'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal24=(Token)match(input,43,FOLLOW_43_in_primitiveType661); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal24_tree = (CommonTree)adaptor.create(string_literal24);
                    adaptor.addChild(root_0, string_literal24_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="long";
                    }

                    }
                    break;
                case 8 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:126:9: 'double'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal25=(Token)match(input,44,FOLLOW_44_in_primitiveType673); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal25_tree = (CommonTree)adaptor.create(string_literal25);
                    adaptor.addChild(root_0, string_literal25_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value ="double";
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class qualifiedNameList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedNameList"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:129:1: qualifiedNameList : qualifiedName ( ',' qualifiedName )* ;
    public final MandaraxParser.qualifiedNameList_return qualifiedNameList() throws RecognitionException {
        MandaraxParser.qualifiedNameList_return retval = new MandaraxParser.qualifiedNameList_return();
        retval.start = input.LT(1);
        int qualifiedNameList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal27=null;
        MandaraxParser.qualifiedName_return qualifiedName26 = null;

        MandaraxParser.qualifiedName_return qualifiedName28 = null;


        CommonTree char_literal27_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:130:5: ( qualifiedName ( ',' qualifiedName )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:130:9: qualifiedName ( ',' qualifiedName )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList699);
            qualifiedName26=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName26.getTree());
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:130:23: ( ',' qualifiedName )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==32) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:130:24: ',' qualifiedName
            	    {
            	    char_literal27=(Token)match(input,32,FOLLOW_32_in_qualifiedNameList702); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal27_tree = (CommonTree)adaptor.create(char_literal27);
            	    adaptor.addChild(root_0, char_literal27_tree);
            	    }
            	    pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList704);
            	    qualifiedName28=qualifiedName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName28.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, qualifiedNameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedNameList"

    public static class qualifiedName_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedName"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:133:1: qualifiedName returns [Expression value] : i= Identifier ( '.' j= Identifier )* ;
    public final MandaraxParser.qualifiedName_return qualifiedName() throws RecognitionException {
        MandaraxParser.qualifiedName_return retval = new MandaraxParser.qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token j=null;
        Token char_literal29=null;

        CommonTree i_tree=null;
        CommonTree j_tree=null;
        CommonTree char_literal29_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:134:2: (i= Identifier ( '.' j= Identifier )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:134:4: i= Identifier ( '.' j= Identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName728); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value =new Variable(pos(i),context,i.getText());
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:134:70: ( '.' j= Identifier )*
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==25) ) {
                    alt12=1;
                }


                switch (alt12) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:134:71: '.' j= Identifier
            	    {
            	    char_literal29=(Token)match(input,25,FOLLOW_25_in_qualifiedName733); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal29_tree = (CommonTree)adaptor.create(char_literal29);
            	    adaptor.addChild(root_0, char_literal29_tree);
            	    }
            	    j=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName739); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    j_tree = (CommonTree)adaptor.create(j);
            	    adaptor.addChild(root_0, j_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value =new MemberAccess(pos(i),context,retval.value,j.getText());
            	    }

            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, qualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName"

    public static class qualifiedName2_return extends ParserRuleReturnScope {
        public String value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedName2"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:137:1: qualifiedName2 returns [String value] : i= Identifier ( '.' j= Identifier )* ;
    public final MandaraxParser.qualifiedName2_return qualifiedName2() throws RecognitionException {
        MandaraxParser.qualifiedName2_return retval = new MandaraxParser.qualifiedName2_return();
        retval.start = input.LT(1);
        int qualifiedName2_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token j=null;
        Token char_literal30=null;

        CommonTree i_tree=null;
        CommonTree j_tree=null;
        CommonTree char_literal30_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:138:2: (i= Identifier ( '.' j= Identifier )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:138:4: i= Identifier ( '.' j= Identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName2763); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value =i.getText();
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:138:41: ( '.' j= Identifier )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==25) ) {
                    int LA13_1 = input.LA(2);

                    if ( (LA13_1==Identifier) ) {
                        alt13=1;
                    }


                }


                switch (alt13) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:138:42: '.' j= Identifier
            	    {
            	    char_literal30=(Token)match(input,25,FOLLOW_25_in_qualifiedName2768); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal30_tree = (CommonTree)adaptor.create(char_literal30);
            	    adaptor.addChild(root_0, char_literal30_tree);
            	    }
            	    j=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName2774); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    j_tree = (CommonTree)adaptor.create(j);
            	    adaptor.addChild(root_0, j_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value =retval.value+'.'+j.getText();
            	    }

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, qualifiedName2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName2"

    public static class nameList_return extends ParserRuleReturnScope {
        public List<String> value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nameList"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:142:1: nameList returns [List<String> value] : (i= Identifier ( ',' j= Identifier )* )? ;
    public final MandaraxParser.nameList_return nameList() throws RecognitionException {
        MandaraxParser.nameList_return retval = new MandaraxParser.nameList_return();
        retval.start = input.LT(1);
        int nameList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token j=null;
        Token char_literal31=null;

        CommonTree i_tree=null;
        CommonTree j_tree=null;
        CommonTree char_literal31_tree=null;

        retval.value = new ArrayList<String>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:144:2: ( (i= Identifier ( ',' j= Identifier )* )? )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:144:4: (i= Identifier ( ',' j= Identifier )* )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:144:4: (i= Identifier ( ',' j= Identifier )* )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==Identifier) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:144:5: i= Identifier ( ',' j= Identifier )*
                    {
                    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_nameList808); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i_tree = (CommonTree)adaptor.create(i);
                    adaptor.addChild(root_0, i_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.add(i.getText());
                    }
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:144:47: ( ',' j= Identifier )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==32) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:144:48: ',' j= Identifier
                    	    {
                    	    char_literal31=(Token)match(input,32,FOLLOW_32_in_nameList813); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal31_tree = (CommonTree)adaptor.create(char_literal31);
                    	    adaptor.addChild(root_0, char_literal31_tree);
                    	    }
                    	    j=(Token)match(input,Identifier,FOLLOW_Identifier_in_nameList819); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    j_tree = (CommonTree)adaptor.create(j);
                    	    adaptor.addChild(root_0, j_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      retval.value.add(j.getText());
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, nameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nameList"

    public static class literal_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:147:1: literal returns [Expression value] : (l1= integerLiteral | l4= StringLiteral | l5= booleanLiteral );
    public final MandaraxParser.literal_return literal() throws RecognitionException {
        MandaraxParser.literal_return retval = new MandaraxParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        CommonTree root_0 = null;

        Token l4=null;
        MandaraxParser.integerLiteral_return l1 = null;

        MandaraxParser.booleanLiteral_return l5 = null;


        CommonTree l4_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:148:5: (l1= integerLiteral | l4= StringLiteral | l5= booleanLiteral )
            int alt16=3;
            switch ( input.LA(1) ) {
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
                {
                alt16=1;
                }
                break;
            case StringLiteral:
                {
                alt16=2;
                }
                break;
            case 45:
            case 46:
                {
                alt16=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }

            switch (alt16) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:148:9: l1= integerLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_integerLiteral_in_literal850);
                    l1=integerLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, l1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = l1.value;
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:151:9: l4= StringLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    l4=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_literal868); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    l4_tree = (CommonTree)adaptor.create(l4);
                    adaptor.addChild(root_0, l4_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new StringLiteral(pos(l4),context,l4.getText().substring(1,l4.getText().length()-1));
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:152:9: l5= booleanLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_booleanLiteral_in_literal884);
                    l5=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, l5.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = l5.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class integerLiteral_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integerLiteral"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:156:1: integerLiteral returns [Expression value] : (hex= HexLiteral | oct= OctalLiteral | dec= DecimalLiteral );
    public final MandaraxParser.integerLiteral_return integerLiteral() throws RecognitionException {
        MandaraxParser.integerLiteral_return retval = new MandaraxParser.integerLiteral_return();
        retval.start = input.LT(1);
        int integerLiteral_StartIndex = input.index();
        CommonTree root_0 = null;

        Token hex=null;
        Token oct=null;
        Token dec=null;

        CommonTree hex_tree=null;
        CommonTree oct_tree=null;
        CommonTree dec_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:157:5: (hex= HexLiteral | oct= OctalLiteral | dec= DecimalLiteral )
            int alt17=3;
            switch ( input.LA(1) ) {
            case HexLiteral:
                {
                alt17=1;
                }
                break;
            case OctalLiteral:
                {
                alt17=2;
                }
                break;
            case DecimalLiteral:
                {
                alt17=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }

            switch (alt17) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:157:9: hex= HexLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    hex=(Token)match(input,HexLiteral,FOLLOW_HexLiteral_in_integerLiteral914); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    hex_tree = (CommonTree)adaptor.create(hex);
                    adaptor.addChild(root_0, hex_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new IntLiteral(pos(hex),context,Integer.parseInt(hex.getText().substring(2),16));
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:158:9: oct= OctalLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    oct=(Token)match(input,OctalLiteral,FOLLOW_OctalLiteral_in_integerLiteral930); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    oct_tree = (CommonTree)adaptor.create(oct);
                    adaptor.addChild(root_0, oct_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new IntLiteral(pos(oct),context,Integer.parseInt(oct.getText(),8));
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:159:9: dec= DecimalLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    dec=(Token)match(input,DecimalLiteral,FOLLOW_DecimalLiteral_in_integerLiteral946); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    dec_tree = (CommonTree)adaptor.create(dec);
                    adaptor.addChild(root_0, dec_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new IntLiteral(pos(dec),context,Integer.parseInt(dec.getText()));
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, integerLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integerLiteral"

    public static class booleanLiteral_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "booleanLiteral"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:162:1: booleanLiteral returns [Expression value] : (t= 'true' | f= 'false' );
    public final MandaraxParser.booleanLiteral_return booleanLiteral() throws RecognitionException {
        MandaraxParser.booleanLiteral_return retval = new MandaraxParser.booleanLiteral_return();
        retval.start = input.LT(1);
        int booleanLiteral_StartIndex = input.index();
        CommonTree root_0 = null;

        Token t=null;
        Token f=null;

        CommonTree t_tree=null;
        CommonTree f_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:163:5: (t= 'true' | f= 'false' )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==45) ) {
                alt18=1;
            }
            else if ( (LA18_0==46) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:163:9: t= 'true'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    t=(Token)match(input,45,FOLLOW_45_in_booleanLiteral975); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t_tree = (CommonTree)adaptor.create(t);
                    adaptor.addChild(root_0, t_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new BooleanLiteral(pos(t),context,true);
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:164:9: f= 'false'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    f=(Token)match(input,46,FOLLOW_46_in_booleanLiteral991); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    f_tree = (CommonTree)adaptor.create(f);
                    adaptor.addChild(root_0, f_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new BooleanLiteral(pos(f),context,false);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, booleanLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "booleanLiteral"

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairs"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:168:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* ;
    public final MandaraxParser.elementValuePairs_return elementValuePairs() throws RecognitionException {
        MandaraxParser.elementValuePairs_return retval = new MandaraxParser.elementValuePairs_return();
        retval.start = input.LT(1);
        int elementValuePairs_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal33=null;
        MandaraxParser.elementValuePair_return elementValuePair32 = null;

        MandaraxParser.elementValuePair_return elementValuePair34 = null;


        CommonTree char_literal33_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:169:5: ( elementValuePair ( ',' elementValuePair )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:169:9: elementValuePair ( ',' elementValuePair )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs1013);
            elementValuePair32=elementValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair32.getTree());
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:169:26: ( ',' elementValuePair )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==32) ) {
                    alt19=1;
                }


                switch (alt19) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:169:27: ',' elementValuePair
            	    {
            	    char_literal33=(Token)match(input,32,FOLLOW_32_in_elementValuePairs1016); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal33_tree = (CommonTree)adaptor.create(char_literal33);
            	    adaptor.addChild(root_0, char_literal33_tree);
            	    }
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs1018);
            	    elementValuePair34=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair34.getTree());

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, elementValuePairs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePairs"

    public static class elementValuePair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePair"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:172:1: elementValuePair : Identifier '=' elementValue ;
    public final MandaraxParser.elementValuePair_return elementValuePair() throws RecognitionException {
        MandaraxParser.elementValuePair_return retval = new MandaraxParser.elementValuePair_return();
        retval.start = input.LT(1);
        int elementValuePair_StartIndex = input.index();
        CommonTree root_0 = null;

        Token Identifier35=null;
        Token char_literal36=null;
        MandaraxParser.elementValue_return elementValue37 = null;


        CommonTree Identifier35_tree=null;
        CommonTree char_literal36_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:173:5: ( Identifier '=' elementValue )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:173:9: Identifier '=' elementValue
            {
            root_0 = (CommonTree)adaptor.nil();

            Identifier35=(Token)match(input,Identifier,FOLLOW_Identifier_in_elementValuePair1039); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier35_tree = (CommonTree)adaptor.create(Identifier35);
            adaptor.addChild(root_0, Identifier35_tree);
            }
            char_literal36=(Token)match(input,47,FOLLOW_47_in_elementValuePair1041); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal36_tree = (CommonTree)adaptor.create(char_literal36);
            adaptor.addChild(root_0, char_literal36_tree);
            }
            pushFollow(FOLLOW_elementValue_in_elementValuePair1043);
            elementValue37=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue37.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, elementValuePair_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePair"

    public static class elementValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValue"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:176:1: elementValue : ( conditionalExpression | elementValueArrayInitializer );
    public final MandaraxParser.elementValue_return elementValue() throws RecognitionException {
        MandaraxParser.elementValue_return retval = new MandaraxParser.elementValue_return();
        retval.start = input.LT(1);
        int elementValue_StartIndex = input.index();
        CommonTree root_0 = null;

        MandaraxParser.conditionalExpression_return conditionalExpression38 = null;

        MandaraxParser.elementValueArrayInitializer_return elementValueArrayInitializer39 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:177:5: ( conditionalExpression | elementValueArrayInitializer )
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( ((LA20_0>=Identifier && LA20_0<=DecimalLiteral)||LA20_0==30||(LA20_0>=45 && LA20_0<=46)||LA20_0==62||(LA20_0>=65 && LA20_0<=66)) ) {
                alt20=1;
            }
            else if ( (LA20_0==48) ) {
                alt20=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }
            switch (alt20) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:177:9: conditionalExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_conditionalExpression_in_elementValue1066);
                    conditionalExpression38=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression38.getTree());

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:178:9: elementValueArrayInitializer
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue1076);
                    elementValueArrayInitializer39=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValueArrayInitializer39.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, elementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValue"

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayInitializer"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:181:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' ;
    public final MandaraxParser.elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        MandaraxParser.elementValueArrayInitializer_return retval = new MandaraxParser.elementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int elementValueArrayInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal40=null;
        Token char_literal42=null;
        Token char_literal44=null;
        Token char_literal45=null;
        MandaraxParser.elementValue_return elementValue41 = null;

        MandaraxParser.elementValue_return elementValue43 = null;


        CommonTree char_literal40_tree=null;
        CommonTree char_literal42_tree=null;
        CommonTree char_literal44_tree=null;
        CommonTree char_literal45_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:182:5: ( '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:182:9: '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal40=(Token)match(input,48,FOLLOW_48_in_elementValueArrayInitializer1099); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal40_tree = (CommonTree)adaptor.create(char_literal40);
            adaptor.addChild(root_0, char_literal40_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:182:13: ( elementValue ( ',' elementValue )* )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( ((LA22_0>=Identifier && LA22_0<=DecimalLiteral)||LA22_0==30||(LA22_0>=45 && LA22_0<=46)||LA22_0==48||LA22_0==62||(LA22_0>=65 && LA22_0<=66)) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:182:14: elementValue ( ',' elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer1102);
                    elementValue41=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue41.getTree());
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:182:27: ( ',' elementValue )*
                    loop21:
                    do {
                        int alt21=2;
                        int LA21_0 = input.LA(1);

                        if ( (LA21_0==32) ) {
                            int LA21_1 = input.LA(2);

                            if ( ((LA21_1>=Identifier && LA21_1<=DecimalLiteral)||LA21_1==30||(LA21_1>=45 && LA21_1<=46)||LA21_1==48||LA21_1==62||(LA21_1>=65 && LA21_1<=66)) ) {
                                alt21=1;
                            }


                        }


                        switch (alt21) {
                    	case 1 :
                    	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:182:28: ',' elementValue
                    	    {
                    	    char_literal42=(Token)match(input,32,FOLLOW_32_in_elementValueArrayInitializer1105); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal42_tree = (CommonTree)adaptor.create(char_literal42);
                    	    adaptor.addChild(root_0, char_literal42_tree);
                    	    }
                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer1107);
                    	    elementValue43=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue43.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop21;
                        }
                    } while (true);


                    }
                    break;

            }

            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:182:49: ( ',' )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==32) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:182:50: ','
                    {
                    char_literal44=(Token)match(input,32,FOLLOW_32_in_elementValueArrayInitializer1114); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal44_tree = (CommonTree)adaptor.create(char_literal44);
                    adaptor.addChild(root_0, char_literal44_tree);
                    }

                    }
                    break;

            }

            char_literal45=(Token)match(input,49,FOLLOW_49_in_elementValueArrayInitializer1118); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal45_tree = (CommonTree)adaptor.create(char_literal45);
            adaptor.addChild(root_0, char_literal45_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, elementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayInitializer"

    public static class parExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:187:1: parExpression returns [Expression value] : '(' expr= expression ')' ;
    public final MandaraxParser.parExpression_return parExpression() throws RecognitionException {
        MandaraxParser.parExpression_return retval = new MandaraxParser.parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal46=null;
        Token char_literal47=null;
        MandaraxParser.expression_return expr = null;


        CommonTree char_literal46_tree=null;
        CommonTree char_literal47_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:188:5: ( '(' expr= expression ')' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:188:9: '(' expr= expression ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal46=(Token)match(input,30,FOLLOW_30_in_parExpression1147); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal46_tree = (CommonTree)adaptor.create(char_literal46);
            adaptor.addChild(root_0, char_literal46_tree);
            }
            pushFollow(FOLLOW_expression_in_parExpression1153);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr.getTree());
            char_literal47=(Token)match(input,31,FOLLOW_31_in_parExpression1155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal47_tree = (CommonTree)adaptor.create(char_literal47);
            adaptor.addChild(root_0, char_literal47_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = expr.value;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, parExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class expressionList_return extends ParserRuleReturnScope {
        public List<Expression> values;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:191:1: expressionList returns [List<Expression> values] : e1= expression ( ',' e2= expression )* ;
    public final MandaraxParser.expressionList_return expressionList() throws RecognitionException {
        MandaraxParser.expressionList_return retval = new MandaraxParser.expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal48=null;
        MandaraxParser.expression_return e1 = null;

        MandaraxParser.expression_return e2 = null;


        CommonTree char_literal48_tree=null;

        retval.values = new ArrayList<Expression>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:193:5: (e1= expression ( ',' e2= expression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:193:9: e1= expression ( ',' e2= expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList1193);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e1.getTree());
            if ( state.backtracking==0 ) {
              retval.values.add(e1.value);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:193:50: ( ',' e2= expression )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==32) ) {
                    alt24=1;
                }


                switch (alt24) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:193:51: ',' e2= expression
            	    {
            	    char_literal48=(Token)match(input,32,FOLLOW_32_in_expressionList1198); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal48_tree = (CommonTree)adaptor.create(char_literal48);
            	    adaptor.addChild(root_0, char_literal48_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_expressionList1204);
            	    e2=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, e2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.values.add(e2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, expressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:204:1: conditionalExpression returns [Expression value] : r1= disjunction ( '?' r2= expression ':' r3= expression )? ;
    public final MandaraxParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        MandaraxParser.conditionalExpression_return retval = new MandaraxParser.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal49=null;
        Token char_literal50=null;
        MandaraxParser.disjunction_return r1 = null;

        MandaraxParser.expression_return r2 = null;

        MandaraxParser.expression_return r3 = null;


        CommonTree char_literal49_tree=null;
        CommonTree char_literal50_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:205:5: (r1= disjunction ( '?' r2= expression ':' r3= expression )? )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:205:9: r1= disjunction ( '?' r2= expression ':' r3= expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_disjunction_in_conditionalExpression1248);
            r1=disjunction();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, r1.getTree());
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:205:26: ( '?' r2= expression ':' r3= expression )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==50) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:205:28: '?' r2= expression ':' r3= expression
                    {
                    char_literal49=(Token)match(input,50,FOLLOW_50_in_conditionalExpression1252); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal49_tree = (CommonTree)adaptor.create(char_literal49);
                    adaptor.addChild(root_0, char_literal49_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression1258);
                    r2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r2.getTree());
                    char_literal50=(Token)match(input,51,FOLLOW_51_in_conditionalExpression1260); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal50_tree = (CommonTree)adaptor.create(char_literal50);
                    adaptor.addChild(root_0, char_literal50_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression1266);
                    r3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r3.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              retval.value =(r2==null)?r1.value:new ConditionalExpression(pos(r1.value),context,r1.value,r2.value,r3.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class disjunction_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "disjunction"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:208:1: disjunction returns [Expression value] : part1= conjunction ( '|' part= conjunction )* ;
    public final MandaraxParser.disjunction_return disjunction() throws RecognitionException {
        MandaraxParser.disjunction_return retval = new MandaraxParser.disjunction_return();
        retval.start = input.LT(1);
        int disjunction_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal51=null;
        MandaraxParser.conjunction_return part1 = null;

        MandaraxParser.conjunction_return part = null;


        CommonTree char_literal51_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:209:5: (part1= conjunction ( '|' part= conjunction )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:209:9: part1= conjunction ( '|' part= conjunction )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_conjunction_in_disjunction1299);
            part1=conjunction();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:209:53: ( '|' part= conjunction )*
            loop26:
            do {
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==52) ) {
                    alt26=1;
                }


                switch (alt26) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:209:55: '|' part= conjunction
            	    {
            	    char_literal51=(Token)match(input,52,FOLLOW_52_in_disjunction1305); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal51_tree = (CommonTree)adaptor.create(char_literal51);
            	    adaptor.addChild(root_0, char_literal51_tree);
            	    }
            	    pushFollow(FOLLOW_conjunction_in_disjunction1311);
            	    part=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,BinOp.OR,retval.value,part.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, disjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "disjunction"

    public static class conjunction_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:212:1: conjunction returns [Expression value] : part1= equalityExpression ( '&' part= equalityExpression )* ;
    public final MandaraxParser.conjunction_return conjunction() throws RecognitionException {
        MandaraxParser.conjunction_return retval = new MandaraxParser.conjunction_return();
        retval.start = input.LT(1);
        int conjunction_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal52=null;
        MandaraxParser.equalityExpression_return part1 = null;

        MandaraxParser.equalityExpression_return part = null;


        CommonTree char_literal52_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:213:5: (part1= equalityExpression ( '&' part= equalityExpression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:213:9: part1= equalityExpression ( '&' part= equalityExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_equalityExpression_in_conjunction1343);
            part1=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:213:60: ( '&' part= equalityExpression )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==53) ) {
                    alt27=1;
                }


                switch (alt27) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:213:62: '&' part= equalityExpression
            	    {
            	    char_literal52=(Token)match(input,53,FOLLOW_53_in_conjunction1349); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal52_tree = (CommonTree)adaptor.create(char_literal52);
            	    adaptor.addChild(root_0, char_literal52_tree);
            	    }
            	    pushFollow(FOLLOW_equalityExpression_in_conjunction1356);
            	    part=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,BinOp.AND,retval.value,part.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, conjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:216:1: equalityExpression returns [Expression value] : part1= instanceOfExpression (op= ( '==' | '!=' ) part2= instanceOfExpression )* ;
    public final MandaraxParser.equalityExpression_return equalityExpression() throws RecognitionException {
        MandaraxParser.equalityExpression_return retval = new MandaraxParser.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token op=null;
        MandaraxParser.instanceOfExpression_return part1 = null;

        MandaraxParser.instanceOfExpression_return part2 = null;


        CommonTree op_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:217:5: (part1= instanceOfExpression (op= ( '==' | '!=' ) part2= instanceOfExpression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:217:9: part1= instanceOfExpression (op= ( '==' | '!=' ) part2= instanceOfExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression1388);
            part1=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value =part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:217:60: (op= ( '==' | '!=' ) part2= instanceOfExpression )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( ((LA28_0>=54 && LA28_0<=55)) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:217:62: op= ( '==' | '!=' ) part2= instanceOfExpression
            	    {
            	    op=(Token)input.LT(1);
            	    if ( (input.LA(1)>=54 && input.LA(1)<=55) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(op));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression1410);
            	    part2=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value =new BinaryExpression(pos(part1.value),context,binOpForName(op.getText()),retval.value,part2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:220:1: instanceOfExpression returns [Expression value] : part= relationalExpression ( 'instanceof' t= type )? ;
    public final MandaraxParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        MandaraxParser.instanceOfExpression_return retval = new MandaraxParser.instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal53=null;
        MandaraxParser.relationalExpression_return part = null;

        MandaraxParser.type_return t = null;


        CommonTree string_literal53_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:221:5: (part= relationalExpression ( 'instanceof' t= type )? )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:221:9: part= relationalExpression ( 'instanceof' t= type )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression1442);
            part=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:221:37: ( 'instanceof' t= type )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==56) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:221:38: 'instanceof' t= type
                    {
                    string_literal53=(Token)match(input,56,FOLLOW_56_in_instanceOfExpression1445); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal53_tree = (CommonTree)adaptor.create(string_literal53);
                    adaptor.addChild(root_0, string_literal53_tree);
                    }
                    pushFollow(FOLLOW_type_in_instanceOfExpression1451);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              retval.value = (t==null)?part.value:new InstanceOfExpression(pos(part.value),context,part.value,t.value);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:224:1: relationalExpression returns [Expression value] : part1= shiftExpression (op= relationalOp part2= shiftExpression )* ;
    public final MandaraxParser.relationalExpression_return relationalExpression() throws RecognitionException {
        MandaraxParser.relationalExpression_return retval = new MandaraxParser.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        MandaraxParser.shiftExpression_return part1 = null;

        MandaraxParser.relationalOp_return op = null;

        MandaraxParser.shiftExpression_return part2 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:225:5: (part1= shiftExpression (op= relationalOp part2= shiftExpression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:225:9: part1= shiftExpression (op= relationalOp part2= shiftExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_shiftExpression_in_relationalExpression1483);
            part1=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value =part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:225:55: (op= relationalOp part2= shiftExpression )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( ((LA30_0>=57 && LA30_0<=60)) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:225:57: op= relationalOp part2= shiftExpression
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_relationalExpression1493);
            	    op=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op.getTree());
            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression1499);
            	    part2=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,op.value,retval.value,part2.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class relationalOp_return extends ParserRuleReturnScope {
        public BinOp value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalOp"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:229:1: relationalOp returns [BinOp value] : ( '<=' | '>=' | '<' | '>' );
    public final MandaraxParser.relationalOp_return relationalOp() throws RecognitionException {
        MandaraxParser.relationalOp_return retval = new MandaraxParser.relationalOp_return();
        retval.start = input.LT(1);
        int relationalOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token string_literal54=null;
        Token string_literal55=null;
        Token char_literal56=null;
        Token char_literal57=null;

        CommonTree string_literal54_tree=null;
        CommonTree string_literal55_tree=null;
        CommonTree char_literal56_tree=null;
        CommonTree char_literal57_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:230:5: ( '<=' | '>=' | '<' | '>' )
            int alt31=4;
            switch ( input.LA(1) ) {
            case 57:
                {
                alt31=1;
                }
                break;
            case 58:
                {
                alt31=2;
                }
                break;
            case 59:
                {
                alt31=3;
                }
                break;
            case 60:
                {
                alt31=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }

            switch (alt31) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:230:9: '<='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal54=(Token)match(input,57,FOLLOW_57_in_relationalOp1533); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal54_tree = (CommonTree)adaptor.create(string_literal54);
                    adaptor.addChild(root_0, string_literal54_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.LTE;
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:231:9: '>='
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    string_literal55=(Token)match(input,58,FOLLOW_58_in_relationalOp1545); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal55_tree = (CommonTree)adaptor.create(string_literal55);
                    adaptor.addChild(root_0, string_literal55_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.GTE;
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:232:7: '<'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal56=(Token)match(input,59,FOLLOW_59_in_relationalOp1555); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal56_tree = (CommonTree)adaptor.create(char_literal56);
                    adaptor.addChild(root_0, char_literal56_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.LT;
                    }

                    }
                    break;
                case 4 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:233:9: '>'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal57=(Token)match(input,60,FOLLOW_60_in_relationalOp1567); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal57_tree = (CommonTree)adaptor.create(char_literal57);
                    adaptor.addChild(root_0, char_literal57_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.GT;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, relationalOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalOp"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:237:1: shiftExpression returns [Expression value] : part1= additiveExpression (op= shiftOp part= additiveExpression )? ;
    public final MandaraxParser.shiftExpression_return shiftExpression() throws RecognitionException {
        MandaraxParser.shiftExpression_return retval = new MandaraxParser.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        MandaraxParser.additiveExpression_return part1 = null;

        MandaraxParser.shiftOp_return op = null;

        MandaraxParser.additiveExpression_return part = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:238:5: (part1= additiveExpression (op= shiftOp part= additiveExpression )? )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:238:9: part1= additiveExpression (op= shiftOp part= additiveExpression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_shiftExpression1597);
            part1=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:238:60: (op= shiftOp part= additiveExpression )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==59) ) {
                int LA32_1 = input.LA(2);

                if ( (LA32_1==59) ) {
                    alt32=1;
                }
            }
            else if ( (LA32_0==60) ) {
                int LA32_2 = input.LA(2);

                if ( (LA32_2==60) ) {
                    alt32=1;
                }
            }
            switch (alt32) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:238:62: op= shiftOp part= additiveExpression
                    {
                    pushFollow(FOLLOW_shiftOp_in_shiftExpression1607);
                    op=shiftOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op.getTree());
                    pushFollow(FOLLOW_additiveExpression_in_shiftExpression1613);
                    part=additiveExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new BinaryExpression(pos(part1.value),context,op.value,retval.value,part.value);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class shiftOp_return extends ParserRuleReturnScope {
        public BinOp value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftOp"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:241:1: shiftOp returns [BinOp value] : ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?);
    public final MandaraxParser.shiftOp_return shiftOp() throws RecognitionException {
        MandaraxParser.shiftOp_return retval = new MandaraxParser.shiftOp_return();
        retval.start = input.LT(1);
        int shiftOp_StartIndex = input.index();
        CommonTree root_0 = null;

        Token t1=null;
        Token t2=null;
        Token t3=null;

        CommonTree t1_tree=null;
        CommonTree t2_tree=null;
        CommonTree t3_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:242:5: ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?)
            int alt33=3;
            alt33 = dfa33.predict(input);
            switch (alt33) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:242:9: ( '<' '<' )=>t1= '<' t2= '<' {...}?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    t1=(Token)match(input,59,FOLLOW_59_in_shiftOp1650); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (CommonTree)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,59,FOLLOW_59_in_shiftOp1654); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (CommonTree)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() && \n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.SHIFT_LL;
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:245:9: ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    t1=(Token)match(input,60,FOLLOW_60_in_shiftOp1688); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (CommonTree)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,60,FOLLOW_60_in_shiftOp1692); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (CommonTree)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    t3=(Token)match(input,60,FOLLOW_60_in_shiftOp1696); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t3_tree = (CommonTree)adaptor.create(t3);
                    adaptor.addChild(root_0, t3_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() && 
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() && \n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() && \n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.SHIFT_RRR;
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:250:9: ( '>' '>' )=>t1= '>' t2= '>' {...}?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    t1=(Token)match(input,60,FOLLOW_60_in_shiftOp1728); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (CommonTree)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,60,FOLLOW_60_in_shiftOp1732); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (CommonTree)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() && \n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = BinOp.SHIFT_RR;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, shiftOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftOp"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:256:1: additiveExpression returns [Expression value] : part1= multiplicativeExpression (op= ( '+' | '-' ) part= multiplicativeExpression )* ;
    public final MandaraxParser.additiveExpression_return additiveExpression() throws RecognitionException {
        MandaraxParser.additiveExpression_return retval = new MandaraxParser.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token op=null;
        MandaraxParser.multiplicativeExpression_return part1 = null;

        MandaraxParser.multiplicativeExpression_return part = null;


        CommonTree op_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:257:5: (part1= multiplicativeExpression (op= ( '+' | '-' ) part= multiplicativeExpression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:257:8: part1= multiplicativeExpression (op= ( '+' | '-' ) part= multiplicativeExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression1771);
            part1=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:257:64: (op= ( '+' | '-' ) part= multiplicativeExpression )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( ((LA34_0>=61 && LA34_0<=62)) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:257:66: op= ( '+' | '-' ) part= multiplicativeExpression
            	    {
            	    op=(Token)input.LT(1);
            	    if ( (input.LA(1)>=61 && input.LA(1)<=62) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(op));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression1792);
            	    part=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,binOpForName(op.getText()),retval.value,part.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:260:1: multiplicativeExpression returns [Expression value] : part1= unaryExpression (op= ( '*' | '/' | '%' ) part= unaryExpression )* ;
    public final MandaraxParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        MandaraxParser.multiplicativeExpression_return retval = new MandaraxParser.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token op=null;
        MandaraxParser.unaryExpression_return part1 = null;

        MandaraxParser.unaryExpression_return part = null;


        CommonTree op_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:261:5: (part1= unaryExpression (op= ( '*' | '/' | '%' ) part= unaryExpression )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:261:8: part1= unaryExpression (op= ( '*' | '/' | '%' ) part= unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression1823);
            part1=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = part1.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:261:56: (op= ( '*' | '/' | '%' ) part= unaryExpression )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==26||(LA35_0>=63 && LA35_0<=64)) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:261:58: op= ( '*' | '/' | '%' ) part= unaryExpression
            	    {
            	    op=(Token)input.LT(1);
            	    if ( input.LA(1)==26||(input.LA(1)>=63 && input.LA(1)<=64) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(op));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression1850);
            	    part=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, part.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value = new BinaryExpression(pos(part1.value),context,binOpForName(op.getText()),retval.value,part.value);
            	    }

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:264:1: unaryExpression returns [Expression value] : ( '-' part1= unaryExpression | part2= unaryExpressionNotPlusMinus );
    public final MandaraxParser.unaryExpression_return unaryExpression() throws RecognitionException {
        MandaraxParser.unaryExpression_return retval = new MandaraxParser.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal58=null;
        MandaraxParser.unaryExpression_return part1 = null;

        MandaraxParser.unaryExpressionNotPlusMinus_return part2 = null;


        CommonTree char_literal58_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:265:5: ( '-' part1= unaryExpression | part2= unaryExpressionNotPlusMinus )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==62) ) {
                alt36=1;
            }
            else if ( ((LA36_0>=Identifier && LA36_0<=DecimalLiteral)||LA36_0==30||(LA36_0>=45 && LA36_0<=46)||(LA36_0>=65 && LA36_0<=66)) ) {
                alt36=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;
            }
            switch (alt36) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:265:9: '-' part1= unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal58=(Token)match(input,62,FOLLOW_62_in_unaryExpression1882); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal58_tree = (CommonTree)adaptor.create(char_literal58);
                    adaptor.addChild(root_0, char_literal58_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression1888);
                    part1=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, part1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new UnaryExpression(pos(part1.value),context,UnOp.MINUS,part1.value);
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:266:9: part2= unaryExpressionNotPlusMinus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression1904);
                    part2=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, part2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = part2.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:269:1: unaryExpressionNotPlusMinus returns [Expression value] : ( '~' r1= unaryExpression | '!' r2= unaryExpression | r3= castExpression | r9= functionInvocation | r8= methodInvocation | r7= propertyAccess | r4= objectref | r5= qualifiedName | r6= parExpression );
    public final MandaraxParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        MandaraxParser.unaryExpressionNotPlusMinus_return retval = new MandaraxParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal59=null;
        Token char_literal60=null;
        MandaraxParser.unaryExpression_return r1 = null;

        MandaraxParser.unaryExpression_return r2 = null;

        MandaraxParser.castExpression_return r3 = null;

        MandaraxParser.functionInvocation_return r9 = null;

        MandaraxParser.methodInvocation_return r8 = null;

        MandaraxParser.propertyAccess_return r7 = null;

        MandaraxParser.objectref_return r4 = null;

        MandaraxParser.qualifiedName_return r5 = null;

        MandaraxParser.parExpression_return r6 = null;


        CommonTree char_literal59_tree=null;
        CommonTree char_literal60_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:270:5: ( '~' r1= unaryExpression | '!' r2= unaryExpression | r3= castExpression | r9= functionInvocation | r8= methodInvocation | r7= propertyAccess | r4= objectref | r5= qualifiedName | r6= parExpression )
            int alt37=9;
            alt37 = dfa37.predict(input);
            switch (alt37) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:270:9: '~' r1= unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal59=(Token)match(input,65,FOLLOW_65_in_unaryExpressionNotPlusMinus1929); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal59_tree = (CommonTree)adaptor.create(char_literal59);
                    adaptor.addChild(root_0, char_literal59_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus1935);
                    r1=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new UnaryExpression(pos(r1.value),context,UnOp.COMPL,r1.value);
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:271:9: '!' r2= unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal60=(Token)match(input,66,FOLLOW_66_in_unaryExpressionNotPlusMinus1947); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal60_tree = (CommonTree)adaptor.create(char_literal60);
                    adaptor.addChild(root_0, char_literal60_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus1953);
                    r2=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new UnaryExpression(pos(r2.value),context,UnOp.NOT,r2.value);
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:272:9: r3= castExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus1969);
                    r3=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r3.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r3.value;
                    }

                    }
                    break;
                case 4 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:273:9: r9= functionInvocation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_functionInvocation_in_unaryExpressionNotPlusMinus1985);
                    r9=functionInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r9.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r9.value;
                    }

                    }
                    break;
                case 5 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:274:9: r8= methodInvocation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_methodInvocation_in_unaryExpressionNotPlusMinus2001);
                    r8=methodInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r8.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r8.value;
                    }

                    }
                    break;
                case 6 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:275:9: r7= propertyAccess
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_propertyAccess_in_unaryExpressionNotPlusMinus2017);
                    r7=propertyAccess();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r7.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r7.value;
                    }

                    }
                    break;
                case 7 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:276:9: r4= objectref
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_objectref_in_unaryExpressionNotPlusMinus2033);
                    r4=objectref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r4.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r4.value;
                    }

                    }
                    break;
                case 8 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:277:9: r5= qualifiedName
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_qualifiedName_in_unaryExpressionNotPlusMinus2049);
                    r5=qualifiedName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r5.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r5.value;
                    }

                    }
                    break;
                case 9 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:278:9: r6= parExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_unaryExpressionNotPlusMinus2065);
                    r6=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r6.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r6.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class propertyAccess_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyAccess"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:281:1: propertyAccess returns [Expression value] : o= objectref ( '.' i= Identifier )* ;
    public final MandaraxParser.propertyAccess_return propertyAccess() throws RecognitionException {
        MandaraxParser.propertyAccess_return retval = new MandaraxParser.propertyAccess_return();
        retval.start = input.LT(1);
        int propertyAccess_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token char_literal61=null;
        MandaraxParser.objectref_return o = null;


        CommonTree i_tree=null;
        CommonTree char_literal61_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:282:5: (o= objectref ( '.' i= Identifier )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:282:9: o= objectref ( '.' i= Identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_objectref_in_propertyAccess2098);
            o=objectref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, o.getTree());
            if ( state.backtracking==0 ) {
              retval.value = o.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:282:43: ( '.' i= Identifier )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( (LA38_0==25) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:282:44: '.' i= Identifier
            	    {
            	    char_literal61=(Token)match(input,25,FOLLOW_25_in_propertyAccess2103); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal61_tree = (CommonTree)adaptor.create(char_literal61);
            	    adaptor.addChild(root_0, char_literal61_tree);
            	    }
            	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_propertyAccess2108); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    i_tree = (CommonTree)adaptor.create(i);
            	    adaptor.addChild(root_0, i_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value = new MemberAccess(pos(o.value),context,retval.value,i.getText());
            	    }

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, propertyAccess_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "propertyAccess"

    public static class methodInvocation_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodInvocation"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:285:1: methodInvocation returns [Expression value] : o= objectref ( '.' i= Identifier '(' (p= expressionList )? ')' )* ;
    public final MandaraxParser.methodInvocation_return methodInvocation() throws RecognitionException {
        MandaraxParser.methodInvocation_return retval = new MandaraxParser.methodInvocation_return();
        retval.start = input.LT(1);
        int methodInvocation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token i=null;
        Token char_literal62=null;
        Token char_literal63=null;
        Token char_literal64=null;
        MandaraxParser.objectref_return o = null;

        MandaraxParser.expressionList_return p = null;


        CommonTree i_tree=null;
        CommonTree char_literal62_tree=null;
        CommonTree char_literal63_tree=null;
        CommonTree char_literal64_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:286:5: (o= objectref ( '.' i= Identifier '(' (p= expressionList )? ')' )* )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:286:9: o= objectref ( '.' i= Identifier '(' (p= expressionList )? ')' )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_objectref_in_methodInvocation2141);
            o=objectref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, o.getTree());
            if ( state.backtracking==0 ) {
              retval.value = o.value;
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:286:43: ( '.' i= Identifier '(' (p= expressionList )? ')' )*
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==25) ) {
                    alt40=1;
                }


                switch (alt40) {
            	case 1 :
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:286:44: '.' i= Identifier '(' (p= expressionList )? ')'
            	    {
            	    char_literal62=(Token)match(input,25,FOLLOW_25_in_methodInvocation2146); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal62_tree = (CommonTree)adaptor.create(char_literal62);
            	    adaptor.addChild(root_0, char_literal62_tree);
            	    }
            	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_methodInvocation2152); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    i_tree = (CommonTree)adaptor.create(i);
            	    adaptor.addChild(root_0, i_tree);
            	    }
            	    char_literal63=(Token)match(input,30,FOLLOW_30_in_methodInvocation2154); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal63_tree = (CommonTree)adaptor.create(char_literal63);
            	    adaptor.addChild(root_0, char_literal63_tree);
            	    }
            	    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:286:66: (p= expressionList )?
            	    int alt39=2;
            	    int LA39_0 = input.LA(1);

            	    if ( ((LA39_0>=Identifier && LA39_0<=DecimalLiteral)||LA39_0==30||(LA39_0>=45 && LA39_0<=46)||LA39_0==62||(LA39_0>=65 && LA39_0<=66)) ) {
            	        alt39=1;
            	    }
            	    switch (alt39) {
            	        case 1 :
            	            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:286:67: p= expressionList
            	            {
            	            pushFollow(FOLLOW_expressionList_in_methodInvocation2160);
            	            p=expressionList();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p.getTree());

            	            }
            	            break;

            	    }

            	    char_literal64=(Token)match(input,31,FOLLOW_31_in_methodInvocation2164); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal64_tree = (CommonTree)adaptor.create(char_literal64);
            	    adaptor.addChild(root_0, char_literal64_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.value = new MemberAccess(pos(o.value),context,retval.value,i.getText(),p==null?new ArrayList<Expression>():p.values);
            	    }

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, methodInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodInvocation"

    public static class functionInvocation_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "functionInvocation"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:289:1: functionInvocation returns [Expression value] : f= Identifier '(' (p= expressionList )? ')' ;
    public final MandaraxParser.functionInvocation_return functionInvocation() throws RecognitionException {
        MandaraxParser.functionInvocation_return retval = new MandaraxParser.functionInvocation_return();
        retval.start = input.LT(1);
        int functionInvocation_StartIndex = input.index();
        CommonTree root_0 = null;

        Token f=null;
        Token char_literal65=null;
        Token char_literal66=null;
        MandaraxParser.expressionList_return p = null;


        CommonTree f_tree=null;
        CommonTree char_literal65_tree=null;
        CommonTree char_literal66_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:290:5: (f= Identifier '(' (p= expressionList )? ')' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:290:9: f= Identifier '(' (p= expressionList )? ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            f=(Token)match(input,Identifier,FOLLOW_Identifier_in_functionInvocation2201); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            f_tree = (CommonTree)adaptor.create(f);
            adaptor.addChild(root_0, f_tree);
            }
            char_literal65=(Token)match(input,30,FOLLOW_30_in_functionInvocation2204); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal65_tree = (CommonTree)adaptor.create(char_literal65);
            adaptor.addChild(root_0, char_literal65_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:290:29: (p= expressionList )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( ((LA41_0>=Identifier && LA41_0<=DecimalLiteral)||LA41_0==30||(LA41_0>=45 && LA41_0<=46)||LA41_0==62||(LA41_0>=65 && LA41_0<=66)) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:290:30: p= expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_functionInvocation2211);
                    p=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p.getTree());

                    }
                    break;

            }

            char_literal66=(Token)match(input,31,FOLLOW_31_in_functionInvocation2215); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal66_tree = (CommonTree)adaptor.create(char_literal66);
            adaptor.addChild(root_0, char_literal66_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new FunctionInvocation(pos(f),context,f.getText(),p==null?new ArrayList<Expression>():p.values);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, functionInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "functionInvocation"

    public static class objectref_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "objectref"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:293:1: objectref returns [Expression value] : (r1= Identifier | r2= literal | r3= parExpression );
    public final MandaraxParser.objectref_return objectref() throws RecognitionException {
        MandaraxParser.objectref_return retval = new MandaraxParser.objectref_return();
        retval.start = input.LT(1);
        int objectref_StartIndex = input.index();
        CommonTree root_0 = null;

        Token r1=null;
        MandaraxParser.literal_return r2 = null;

        MandaraxParser.parExpression_return r3 = null;


        CommonTree r1_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:294:6: (r1= Identifier | r2= literal | r3= parExpression )
            int alt42=3;
            switch ( input.LA(1) ) {
            case Identifier:
                {
                alt42=1;
                }
                break;
            case StringLiteral:
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
            case 45:
            case 46:
                {
                alt42=2;
                }
                break;
            case 30:
                {
                alt42=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;
            }

            switch (alt42) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:294:8: r1= Identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    r1=(Token)match(input,Identifier,FOLLOW_Identifier_in_objectref2252); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    r1_tree = (CommonTree)adaptor.create(r1);
                    adaptor.addChild(root_0, r1_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new Variable(pos(r1),context,r1.getText());
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:295:8: r2= literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_objectref2267);
                    r2=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r2.value;
                    }

                    }
                    break;
                case 3 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:296:8: r3= parExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_objectref2282);
                    r3=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, r3.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = r3.value;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, objectref_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "objectref"

    public static class castExpression_return extends ParserRuleReturnScope {
        public Expression value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpression"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:299:1: castExpression returns [Expression value] : ( '(' t1= primitiveType ')' exp1= unaryExpression | '(' t2= type ')' exp2= unaryExpressionNotPlusMinus );
    public final MandaraxParser.castExpression_return castExpression() throws RecognitionException {
        MandaraxParser.castExpression_return retval = new MandaraxParser.castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal67=null;
        Token char_literal68=null;
        Token char_literal69=null;
        Token char_literal70=null;
        MandaraxParser.primitiveType_return t1 = null;

        MandaraxParser.unaryExpression_return exp1 = null;

        MandaraxParser.type_return t2 = null;

        MandaraxParser.unaryExpressionNotPlusMinus_return exp2 = null;


        CommonTree char_literal67_tree=null;
        CommonTree char_literal68_tree=null;
        CommonTree char_literal69_tree=null;
        CommonTree char_literal70_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:300:5: ( '(' t1= primitiveType ')' exp1= unaryExpression | '(' t2= type ')' exp2= unaryExpressionNotPlusMinus )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==30) ) {
                int LA43_1 = input.LA(2);

                if ( (synpred69_Mandarax()) ) {
                    alt43=1;
                }
                else if ( (true) ) {
                    alt43=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:300:8: '(' t1= primitiveType ')' exp1= unaryExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal67=(Token)match(input,30,FOLLOW_30_in_castExpression2315); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal67_tree = (CommonTree)adaptor.create(char_literal67);
                    adaptor.addChild(root_0, char_literal67_tree);
                    }
                    pushFollow(FOLLOW_primitiveType_in_castExpression2321);
                    t1=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t1.getTree());
                    char_literal68=(Token)match(input,31,FOLLOW_31_in_castExpression2323); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal68_tree = (CommonTree)adaptor.create(char_literal68);
                    adaptor.addChild(root_0, char_literal68_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_castExpression2329);
                    exp1=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exp1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new CastExpression(pos(t1.start),context,exp1.value,t1.value);
                    }

                    }
                    break;
                case 2 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:301:8: '(' t2= type ')' exp2= unaryExpressionNotPlusMinus
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    char_literal69=(Token)match(input,30,FOLLOW_30_in_castExpression2340); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal69_tree = (CommonTree)adaptor.create(char_literal69);
                    adaptor.addChild(root_0, char_literal69_tree);
                    }
                    pushFollow(FOLLOW_type_in_castExpression2346);
                    t2=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t2.getTree());
                    char_literal70=(Token)match(input,31,FOLLOW_31_in_castExpression2348); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal70_tree = (CommonTree)adaptor.create(char_literal70);
                    adaptor.addChild(root_0, char_literal70_tree);
                    }
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression2354);
                    exp2=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exp2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new CastExpression(pos(t2.start),context,exp2.value,t2.value);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class arguments_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:304:1: arguments : '(' ( expressionList )? ')' ;
    public final MandaraxParser.arguments_return arguments() throws RecognitionException {
        MandaraxParser.arguments_return retval = new MandaraxParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        CommonTree root_0 = null;

        Token char_literal71=null;
        Token char_literal73=null;
        MandaraxParser.expressionList_return expressionList72 = null;


        CommonTree char_literal71_tree=null;
        CommonTree char_literal73_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:305:5: ( '(' ( expressionList )? ')' )
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:305:9: '(' ( expressionList )? ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            char_literal71=(Token)match(input,30,FOLLOW_30_in_arguments2376); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal71_tree = (CommonTree)adaptor.create(char_literal71);
            adaptor.addChild(root_0, char_literal71_tree);
            }
            // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:305:13: ( expressionList )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( ((LA44_0>=Identifier && LA44_0<=DecimalLiteral)||LA44_0==30||(LA44_0>=45 && LA44_0<=46)||LA44_0==62||(LA44_0>=65 && LA44_0<=66)) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:0:0: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments2378);
                    expressionList72=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList72.getTree());

                    }
                    break;

            }

            char_literal73=(Token)match(input,31,FOLLOW_31_in_arguments2381); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal73_tree = (CommonTree)adaptor.create(char_literal73);
            adaptor.addChild(root_0, char_literal73_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    // $ANTLR start synpred46_Mandarax
    public final void synpred46_Mandarax_fragment() throws RecognitionException {   
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:242:9: ( '<' '<' )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:242:10: '<' '<'
        {
        match(input,59,FOLLOW_59_in_synpred46_Mandarax1642); if (state.failed) return ;
        match(input,59,FOLLOW_59_in_synpred46_Mandarax1644); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred46_Mandarax

    // $ANTLR start synpred47_Mandarax
    public final void synpred47_Mandarax_fragment() throws RecognitionException {   
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:245:9: ( '>' '>' '>' )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:245:10: '>' '>' '>'
        {
        match(input,60,FOLLOW_60_in_synpred47_Mandarax1678); if (state.failed) return ;
        match(input,60,FOLLOW_60_in_synpred47_Mandarax1680); if (state.failed) return ;
        match(input,60,FOLLOW_60_in_synpred47_Mandarax1682); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred47_Mandarax

    // $ANTLR start synpred48_Mandarax
    public final void synpred48_Mandarax_fragment() throws RecognitionException {   
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:250:9: ( '>' '>' )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:250:10: '>' '>'
        {
        match(input,60,FOLLOW_60_in_synpred48_Mandarax1720); if (state.failed) return ;
        match(input,60,FOLLOW_60_in_synpred48_Mandarax1722); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred48_Mandarax

    // $ANTLR start synpred57_Mandarax
    public final void synpred57_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.castExpression_return r3 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:272:9: (r3= castExpression )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:272:9: r3= castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred57_Mandarax1969);
        r3=castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred57_Mandarax

    // $ANTLR start synpred58_Mandarax
    public final void synpred58_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.functionInvocation_return r9 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:273:9: (r9= functionInvocation )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:273:9: r9= functionInvocation
        {
        pushFollow(FOLLOW_functionInvocation_in_synpred58_Mandarax1985);
        r9=functionInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred58_Mandarax

    // $ANTLR start synpred59_Mandarax
    public final void synpred59_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.methodInvocation_return r8 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:274:9: (r8= methodInvocation )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:274:9: r8= methodInvocation
        {
        pushFollow(FOLLOW_methodInvocation_in_synpred59_Mandarax2001);
        r8=methodInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred59_Mandarax

    // $ANTLR start synpred60_Mandarax
    public final void synpred60_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.propertyAccess_return r7 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:275:9: (r7= propertyAccess )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:275:9: r7= propertyAccess
        {
        pushFollow(FOLLOW_propertyAccess_in_synpred60_Mandarax2017);
        r7=propertyAccess();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred60_Mandarax

    // $ANTLR start synpred61_Mandarax
    public final void synpred61_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.objectref_return r4 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:276:9: (r4= objectref )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:276:9: r4= objectref
        {
        pushFollow(FOLLOW_objectref_in_synpred61_Mandarax2033);
        r4=objectref();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred61_Mandarax

    // $ANTLR start synpred62_Mandarax
    public final void synpred62_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.qualifiedName_return r5 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:277:9: (r5= qualifiedName )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:277:9: r5= qualifiedName
        {
        pushFollow(FOLLOW_qualifiedName_in_synpred62_Mandarax2049);
        r5=qualifiedName();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred62_Mandarax

    // $ANTLR start synpred69_Mandarax
    public final void synpred69_Mandarax_fragment() throws RecognitionException {   
        MandaraxParser.primitiveType_return t1 = null;

        MandaraxParser.unaryExpression_return exp1 = null;


        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:300:8: ( '(' t1= primitiveType ')' exp1= unaryExpression )
        // /Users/jbdietri/development/take/workspace/mandarax/grammar/Mandarax.g:300:8: '(' t1= primitiveType ')' exp1= unaryExpression
        {
        match(input,30,FOLLOW_30_in_synpred69_Mandarax2315); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred69_Mandarax2321);
        t1=primitiveType();

        state._fsp--;
        if (state.failed) return ;
        match(input,31,FOLLOW_31_in_synpred69_Mandarax2323); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred69_Mandarax2329);
        exp1=unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred69_Mandarax

    // Delegated rules

    public final boolean synpred59_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_Mandarax() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_Mandarax_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA33 dfa33 = new DFA33(this);
    protected DFA37 dfa37 = new DFA37(this);
    static final String DFA33_eotS =
        "\20\uffff";
    static final String DFA33_eofS =
        "\20\uffff";
    static final String DFA33_minS =
        "\1\73\1\uffff\1\74\1\4\14\uffff";
    static final String DFA33_maxS =
        "\1\74\1\uffff\1\74\1\102\14\uffff";
    static final String DFA33_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\13\3";
    static final String DFA33_specialS =
        "\1\1\2\uffff\1\0\14\uffff}>";
    static final String[] DFA33_transitionS = {
            "\1\1\1\2",
            "",
            "\1\3",
            "\1\11\1\15\1\12\1\13\1\14\25\uffff\1\10\16\uffff\1\16\1\17"+
            "\15\uffff\1\4\1\uffff\1\5\2\uffff\1\6\1\7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
    static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
    static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
    static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
    static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
    static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
    static final short[][] DFA33_transition;

    static {
        int numStates = DFA33_transitionS.length;
        DFA33_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = DFA33_eot;
            this.eof = DFA33_eof;
            this.min = DFA33_min;
            this.max = DFA33_max;
            this.accept = DFA33_accept;
            this.special = DFA33_special;
            this.transition = DFA33_transition;
        }
        public String getDescription() {
            return "241:1: shiftOp returns [BinOp value] : ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_3 = input.LA(1);

                         
                        int index33_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA33_3==60) && (synpred47_Mandarax())) {s = 4;}

                        else if ( (LA33_3==62) && (synpred48_Mandarax())) {s = 5;}

                        else if ( (LA33_3==65) && (synpred48_Mandarax())) {s = 6;}

                        else if ( (LA33_3==66) && (synpred48_Mandarax())) {s = 7;}

                        else if ( (LA33_3==30) && (synpred48_Mandarax())) {s = 8;}

                        else if ( (LA33_3==Identifier) && (synpred48_Mandarax())) {s = 9;}

                        else if ( (LA33_3==HexLiteral) && (synpred48_Mandarax())) {s = 10;}

                        else if ( (LA33_3==OctalLiteral) && (synpred48_Mandarax())) {s = 11;}

                        else if ( (LA33_3==DecimalLiteral) && (synpred48_Mandarax())) {s = 12;}

                        else if ( (LA33_3==StringLiteral) && (synpred48_Mandarax())) {s = 13;}

                        else if ( (LA33_3==45) && (synpred48_Mandarax())) {s = 14;}

                        else if ( (LA33_3==46) && (synpred48_Mandarax())) {s = 15;}

                         
                        input.seek(index33_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA33_0 = input.LA(1);

                         
                        int index33_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA33_0==59) && (synpred46_Mandarax())) {s = 1;}

                        else if ( (LA33_0==60) ) {s = 2;}

                         
                        input.seek(index33_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA37_eotS =
        "\22\uffff";
    static final String DFA37_eofS =
        "\22\uffff";
    static final String DFA37_minS =
        "\1\4\2\uffff\10\0\7\uffff";
    static final String DFA37_maxS =
        "\1\102\2\uffff\10\0\7\uffff";
    static final String DFA37_acceptS =
        "\1\uffff\1\1\1\2\10\uffff\1\3\1\5\1\6\1\7\1\11\1\4\1\10";
    static final String DFA37_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\7\uffff}>";
    static final String[] DFA37_transitionS = {
            "\1\4\1\10\1\5\1\6\1\7\25\uffff\1\3\16\uffff\1\11\1\12\22\uffff"+
            "\1\1\1\2",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_eotS);
    static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_eofS);
    static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_minS);
    static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_maxS);
    static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_acceptS);
    static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_specialS);
    static final short[][] DFA37_transition;

    static {
        int numStates = DFA37_transitionS.length;
        DFA37_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA37_transition[i] = DFA.unpackEncodedString(DFA37_transitionS[i]);
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;
        }
        public String getDescription() {
            return "269:1: unaryExpressionNotPlusMinus returns [Expression value] : ( '~' r1= unaryExpression | '!' r2= unaryExpression | r3= castExpression | r9= functionInvocation | r8= methodInvocation | r7= propertyAccess | r4= objectref | r5= qualifiedName | r6= parExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA37_3 = input.LA(1);

                         
                        int index37_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_Mandarax()) ) {s = 11;}

                        else if ( (synpred59_Mandarax()) ) {s = 12;}

                        else if ( (synpred60_Mandarax()) ) {s = 13;}

                        else if ( (synpred61_Mandarax()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index37_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA37_4 = input.LA(1);

                         
                        int index37_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_Mandarax()) ) {s = 16;}

                        else if ( (synpred59_Mandarax()) ) {s = 12;}

                        else if ( (synpred60_Mandarax()) ) {s = 13;}

                        else if ( (synpred61_Mandarax()) ) {s = 14;}

                        else if ( (synpred62_Mandarax()) ) {s = 17;}

                         
                        input.seek(index37_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA37_5 = input.LA(1);

                         
                        int index37_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_Mandarax()) ) {s = 12;}

                        else if ( (synpred60_Mandarax()) ) {s = 13;}

                        else if ( (synpred61_Mandarax()) ) {s = 14;}

                         
                        input.seek(index37_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA37_6 = input.LA(1);

                         
                        int index37_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_Mandarax()) ) {s = 12;}

                        else if ( (synpred60_Mandarax()) ) {s = 13;}

                        else if ( (synpred61_Mandarax()) ) {s = 14;}

                         
                        input.seek(index37_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA37_7 = input.LA(1);

                         
                        int index37_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_Mandarax()) ) {s = 12;}

                        else if ( (synpred60_Mandarax()) ) {s = 13;}

                        else if ( (synpred61_Mandarax()) ) {s = 14;}

                         
                        input.seek(index37_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA37_8 = input.LA(1);

                         
                        int index37_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_Mandarax()) ) {s = 12;}

                        else if ( (synpred60_Mandarax()) ) {s = 13;}

                        else if ( (synpred61_Mandarax()) ) {s = 14;}

                         
                        input.seek(index37_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA37_9 = input.LA(1);

                         
                        int index37_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_Mandarax()) ) {s = 12;}

                        else if ( (synpred60_Mandarax()) ) {s = 13;}

                        else if ( (synpred61_Mandarax()) ) {s = 14;}

                         
                        input.seek(index37_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA37_10 = input.LA(1);

                         
                        int index37_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_Mandarax()) ) {s = 12;}

                        else if ( (synpred60_Mandarax()) ) {s = 13;}

                        else if ( (synpred61_Mandarax()) ) {s = 14;}

                         
                        input.seek(index37_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 37, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_23_in_importDeclaration75 = new BitSet(new long[]{0x0000000001000010L});
    public static final BitSet FOLLOW_24_in_importDeclaration82 = new BitSet(new long[]{0x0000000001000010L});
    public static final BitSet FOLLOW_qualifiedName2_in_importDeclaration89 = new BitSet(new long[]{0x000000000A000000L});
    public static final BitSet FOLLOW_25_in_importDeclaration95 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_importDeclaration97 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_27_in_importDeclaration101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_relationshipDefinition127 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_relationshipDefinition135 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_relationshipDefinition137 = new BitSet(new long[]{0x00001FE000000010L});
    public static final BitSet FOLLOW_variableDeclarationList_in_relationshipDefinition143 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_31_in_relationshipDefinition145 = new BitSet(new long[]{0x0000000600000010L});
    public static final BitSet FOLLOW_functionDeclarationList_in_relationshipDefinition151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_variableDeclaration187 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclaration_in_variableDeclarationList233 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_32_in_variableDeclarationList238 = new BitSet(new long[]{0x00001FE000000010L});
    public static final BitSet FOLLOW_variableDeclaration_in_variableDeclarationList244 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_visibility_in_functionDeclaration282 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_functionDeclaration288 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_functionDeclaration290 = new BitSet(new long[]{0x0000000080000010L});
    public static final BitSet FOLLOW_nameList_in_functionDeclaration296 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_31_in_functionDeclaration298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionDeclaration_in_functionDeclarationList337 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_32_in_functionDeclarationList342 = new BitSet(new long[]{0x0000000600000010L});
    public static final BitSet FOLLOW_functionDeclaration_in_functionDeclarationList348 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_33_in_visibility384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_visibility389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_constantDeclarator457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_typeName481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_type503 = new BitSet(new long[]{0x0000000800000002L});
    public static final BitSet FOLLOW_35_in_type506 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_type508 = new BitSet(new long[]{0x0000000800000002L});
    public static final BitSet FOLLOW_primitiveType_in_type521 = new BitSet(new long[]{0x0000000800000002L});
    public static final BitSet FOLLOW_35_in_type524 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_type526 = new BitSet(new long[]{0x0000000800000002L});
    public static final BitSet FOLLOW_Identifier_in_classOrInterfaceType550 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_classOrInterfaceType555 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_classOrInterfaceType561 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_37_in_primitiveType589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_primitiveType601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_primitiveType613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_primitiveType625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_primitiveType637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_primitiveType649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_primitiveType661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_primitiveType673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList699 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_32_in_qualifiedNameList702 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList704 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName728 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_qualifiedName733 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName739 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName2763 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_qualifiedName2768 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName2774 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_Identifier_in_nameList808 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_32_in_nameList813 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_nameList819 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_integerLiteral_in_literal850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_literal884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HexLiteral_in_integerLiteral914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OctalLiteral_in_integerLiteral930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DecimalLiteral_in_integerLiteral946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_booleanLiteral975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_booleanLiteral991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs1013 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_32_in_elementValuePairs1016 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs1018 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_Identifier_in_elementValuePair1039 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_47_in_elementValuePair1041 = new BitSet(new long[]{0x40016000400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair1043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue1066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue1076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_elementValueArrayInitializer1099 = new BitSet(new long[]{0x40036001400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer1102 = new BitSet(new long[]{0x0002000100000000L});
    public static final BitSet FOLLOW_32_in_elementValueArrayInitializer1105 = new BitSet(new long[]{0x40016000400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer1107 = new BitSet(new long[]{0x0002000100000000L});
    public static final BitSet FOLLOW_32_in_elementValueArrayInitializer1114 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_elementValueArrayInitializer1118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_parExpression1147 = new BitSet(new long[]{0x40006000400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_expression_in_parExpression1153 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_31_in_parExpression1155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList1193 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_32_in_expressionList1198 = new BitSet(new long[]{0x40006000400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_expression_in_expressionList1204 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_disjunction_in_conditionalExpression1248 = new BitSet(new long[]{0x0004000000000002L});
    public static final BitSet FOLLOW_50_in_conditionalExpression1252 = new BitSet(new long[]{0x40006000400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression1258 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_conditionalExpression1260 = new BitSet(new long[]{0x40006000400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression1266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_disjunction1299 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_52_in_disjunction1305 = new BitSet(new long[]{0x40006000400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_conjunction_in_disjunction1311 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_equalityExpression_in_conjunction1343 = new BitSet(new long[]{0x0020000000000002L});
    public static final BitSet FOLLOW_53_in_conjunction1349 = new BitSet(new long[]{0x40006000400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_equalityExpression_in_conjunction1356 = new BitSet(new long[]{0x0020000000000002L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression1388 = new BitSet(new long[]{0x00C0000000000002L});
    public static final BitSet FOLLOW_set_in_equalityExpression1398 = new BitSet(new long[]{0x40006000400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression1410 = new BitSet(new long[]{0x00C0000000000002L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression1442 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_56_in_instanceOfExpression1445 = new BitSet(new long[]{0x00001FE000000010L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression1451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression1483 = new BitSet(new long[]{0x1E00000000000002L});
    public static final BitSet FOLLOW_relationalOp_in_relationalExpression1493 = new BitSet(new long[]{0x40006000400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression1499 = new BitSet(new long[]{0x1E00000000000002L});
    public static final BitSet FOLLOW_57_in_relationalOp1533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_relationalOp1545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_relationalOp1555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_relationalOp1567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression1597 = new BitSet(new long[]{0x1800000000000002L});
    public static final BitSet FOLLOW_shiftOp_in_shiftExpression1607 = new BitSet(new long[]{0x40006000400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression1613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_shiftOp1650 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_shiftOp1654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_shiftOp1688 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_60_in_shiftOp1692 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_60_in_shiftOp1696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_shiftOp1728 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_60_in_shiftOp1732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression1771 = new BitSet(new long[]{0x6000000000000002L});
    public static final BitSet FOLLOW_set_in_additiveExpression1780 = new BitSet(new long[]{0x40006000400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression1792 = new BitSet(new long[]{0x6000000000000002L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression1823 = new BitSet(new long[]{0x8000000004000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_multiplicativeExpression1832 = new BitSet(new long[]{0x40006000400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression1850 = new BitSet(new long[]{0x8000000004000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_62_in_unaryExpression1882 = new BitSet(new long[]{0x40006000400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression1888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression1904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_unaryExpressionNotPlusMinus1929 = new BitSet(new long[]{0x40006000400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus1935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_unaryExpressionNotPlusMinus1947 = new BitSet(new long[]{0x40006000400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus1953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus1969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionInvocation_in_unaryExpressionNotPlusMinus1985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodInvocation_in_unaryExpressionNotPlusMinus2001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyAccess_in_unaryExpressionNotPlusMinus2017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectref_in_unaryExpressionNotPlusMinus2033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_unaryExpressionNotPlusMinus2049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_unaryExpressionNotPlusMinus2065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectref_in_propertyAccess2098 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_propertyAccess2103 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_propertyAccess2108 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_objectref_in_methodInvocation2141 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_methodInvocation2146 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_methodInvocation2152 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_methodInvocation2154 = new BitSet(new long[]{0x40006000C00001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_expressionList_in_methodInvocation2160 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_31_in_methodInvocation2164 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_Identifier_in_functionInvocation2201 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_functionInvocation2204 = new BitSet(new long[]{0x40006000C00001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_expressionList_in_functionInvocation2211 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_31_in_functionInvocation2215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_objectref2252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_objectref2267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_objectref2282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_castExpression2315 = new BitSet(new long[]{0x00001FE000000010L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression2321 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_31_in_castExpression2323 = new BitSet(new long[]{0x40006000400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression2329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_castExpression2340 = new BitSet(new long[]{0x00001FE000000010L});
    public static final BitSet FOLLOW_type_in_castExpression2346 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_31_in_castExpression2348 = new BitSet(new long[]{0x40006000400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression2354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_arguments2376 = new BitSet(new long[]{0x40006000C00001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_expressionList_in_arguments2378 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_31_in_arguments2381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_synpred46_Mandarax1642 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_synpred46_Mandarax1644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_synpred47_Mandarax1678 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_60_in_synpred47_Mandarax1680 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_60_in_synpred47_Mandarax1682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_synpred48_Mandarax1720 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_60_in_synpred48_Mandarax1722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_synpred57_Mandarax1969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionInvocation_in_synpred58_Mandarax1985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodInvocation_in_synpred59_Mandarax2001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyAccess_in_synpred60_Mandarax2017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectref_in_synpred61_Mandarax2033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_synpred62_Mandarax2049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_synpred69_Mandarax2315 = new BitSet(new long[]{0x00001FE000000010L});
    public static final BitSet FOLLOW_primitiveType_in_synpred69_Mandarax2321 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_31_in_synpred69_Mandarax2323 = new BitSet(new long[]{0x40006000400001F0L,0x0000000000000006L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred69_Mandarax2329 = new BitSet(new long[]{0x0000000000000002L});

}