// example based on the UServ product derby
// the original rule set is Copyright of the Business Rules Forum
// see also http://www.businessrulesforum.com/2005_Product_Derby.pdf
@@dc:creator=Jens Dietrich
@@dc:date=2007-09-12
import example.nz.org.take.compiler.userv.domainmodel.*;
var Car car
var Driver driver,client
var Policy policy
var java.lang.String category 
var int x
ref java.util.Collection HighTheftProbabilityAutoList
ref int CurrentYear,NextYear
// queries
@take.compilerhint.class=PotentialTheftRating
@take.compilerhint.slots=car,rating
@take.compilerhint.method=getPotenialTheftRating
query potentialTheftRating[in,out]
@take.compilerhint.class=PotentialOccupantInjuryRating
@take.compilerhint.slots=car,rating
@take.compilerhint.method=getPotentialOccupantInjuryRating
query potentialOccupantInjuryRating[in,out]
@take.compilerhint.class=AutoEligibility
@take.compilerhint.slots=car,value
@take.compilerhint.method=getAutoEligibility
query autoEligibility[in,out] 
@take.compilerhint.class=DriverCategory
@take.compilerhint.slots=driver,category
@take.compilerhint.method=getDriverCategory
query driverCategory[in,out] 
@take.compilerhint.class=DriverEligibility
@take.compilerhint.slots=driver
@take.compilerhint.method=getDriverEligibility
query isEligible[in] 
@take.compilerhint.class=HighRiskDriver
@take.compilerhint.slots=driver
@take.compilerhint.method=isHighRiskDriver
query isHighRiskDriver[in] 
@take.compilerhint.class=TrainedDriver
@take.compilerhint.slots=driver
@take.compilerhint.method=hasTrainingCertification
query hasTrainingCertification[in] 
@take.compilerhint.class=PolicyEligibilityScore
@take.compilerhint.slots=car,driver,score
@take.compilerhint.method=getPolicyEligibilityScore
query policyEligibilityScore[in,in,out]
@take.compilerhint.class=InsuranceEligibility
@take.compilerhint.slots=car,driver,status
@take.compilerhint.method=getPolicyEligibility
query insuranceEligibility[in,in,out] 
@take.compilerhint.class=LongTermClient
@take.compilerhint.slots=driver
@take.compilerhint.method=isLongTermClient
query isLongTermClient[in]
@take.compilerhint.class=BasePremium
@take.compilerhint.slots=car,premium
@take.compilerhint.method=getBasePremium
query basePremium[in,out]
@take.compilerhint.class=AdditionalPremium
@take.compilerhint.slots=policy,car,premium
@take.compilerhint.method=getAdditionalPremium
query additionalPremium[in,in,out]
@take.compilerhint.class=AdditionalDriverPremium
@take.compilerhint.slots=driver,premium
@take.compilerhint.method=getAdditionalDriverPremium
query additionalDriverPremium[in,out]
@take.compilerhint.class=PremiumDiscount
@take.compilerhint.slots=car,discount
@take.compilerhint.method=getPremiumDiscount
query premiumDiscount[in,out]
// aggregations
aggregation eligibilityScore = sum x policyEligibilityScore[car,driver,x]



@category=Driver Premiums Rule Set
@description=If a High Risk Driver, then increase premium by $1,000.
DP_08: if isHighRiskDriver[driver] then additionalDriverPremium[driver,1000]
@category=Driver Premiums Rule Set
@description=Raise the premium by $ 150 per accident.
// remark1 - added prerequisite, otherwise there will be an additional driver premium of 0 for clients without accidents
// remark2 - the scripting of the mathematical function in the rule head is rather clumsy, this will be changed in a future version
DP_09: if driver.numberOfAccidentsInvolvedIn>0 then additionalDriverPremium[driver,150*driver.numberOfAccidentsInvolvedIn]
// Market Discounts Rule Set
@category=Market Discounts Rule Set
@description=If a preferred client, lower the premium by $250.
MSD_01: if isPreferred[client] then additionalDriverPremium[client,-250]
@category=Market Discounts Rule Set
@description=If an elite client, then lower the premium by $500.
MSD_02: if isElite[client] then additionalDriverPremium[client,-500]
