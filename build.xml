<?xml version="1.0"?>
<!--
/*
 * Copyright 2010 Jens Dietrich Licensed under the GNU AFFERO GENERAL PUBLIC LICENSE, Version 3
 * (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/agpl.html Unless required by applicable law
 * or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
 -->
	
<project name="take" default="jar">
	<property name="name" value="mandarax-compiler"/>
	<property name="version" value="1.0.1"/>
	<property name="debug" value="on"/>
	<property name="src.dir" value="src"/>
	<property name="classes.dir" value="classes"/>
	<property name="docs.dir" value="docs"/>
	<property name="lib.dir" value="lib"/>
	<property name="config.dir" value="misc"/>
	<property name="build.dir" value="build"/>
	<property name="build.classes" value="${build.dir}/classes"/>
	<property name="build.lib" value="${build.dir}/lib"/>
	<property name="build.tmp" value="${build.dir}/tmp"/>
	<property name="build.doc" value="${build.dir}/doc"/>
	<property name="build.main.jar" value="${build.lib}/${name}-${version}"/>
	<property name="build.main.jar" value="${build.lib}/${name}-${version}"/>
	<property name="build.script.jar" value="${build.lib}/${name}-script-${version}"/>
	<property name="build.rt.jar" value="${build.lib}/${name}-rt-${version}"/>
	<property name="build.test.jar" value="${build.lib}/${name}-tests-${version}"/>
	<property name="qareports.dir" value="qa"/>
	<property name="report.junit" value="${qareports.dir}/junit"/>
	<property name="report.jdepend" value="${qareports.dir}/jdepend"/>
	<property name="compiler.jar" value="${build.lib}/${name}-${version}"/>
	<property name="tests.jar" value="${build.lib}/${name}-tests-${version}"/>
	<property name="userv.jar" value="${build.lib}/userv-${version}"/>
	<property name="rt.jar" value="${build.lib}/${name}-rt-${version}"/>
	
	<path id="build.classpath">
        <fileset dir="lib">
            <include name="**/*.jar" />
        </fileset>
        <fileset dir="tools">
            <include name="**/*.jar" />
        </fileset>
    </path>
	
	<path id="sources">
		<dirset dir="${.}">
		  <include name="src/java"/>
		  <include name="src/testcases"/>
		  <include name="src-generated/testcases"/>
		  <include name="src/userv"/>
		</dirset>
    </path>
	
	<property name="build" value="./build"/>
	<property name="classes" value="${build}/classes"/>
<!-- Prepare the output directories-->	
<target name="prepare" description="Prepare the build directories">
	<mkdir dir="${build.dir}"/>
	<mkdir dir="${build.classes}"/>
	<mkdir dir="${build.lib}"/>
	<mkdir dir="${build.tmp}"/>
	<mkdir dir="${build.doc}"/>
	<mkdir dir="${report.junit}"/>
	<mkdir dir="${report.jdepend}"/>
</target>
<!-- Compiles the classes -->	
<target name="compile" depends="prepare" description="Compile the whole project">
	<javac destdir="${build.classes}" 
        debug="${debug}" 
        deprecation="on"
        optimize="off"
		srcdir="src/java;src/testcases;src-generated/testcases;src/userv"
        classpathref="build.classpath"
	/>
	<!-- copy mvel templates and relationship definitions -->
    <copy todir="${build.classes}">
	    <fileset dir="src/java">
	      	<include name="**/*.mv"/>
	    	<include name="**/*.rel"/>
	    </fileset>
	    <fileset dir="src/testcases">
	    	<include name="**/*.rel"/>
	    </fileset>
	    <fileset dir="src/userv">
	    	<include name="**/*.rel"/>
	    </fileset>
	</copy>

</target>

<!-- Tests the project, using JUnit tests -->
<target name="tests" depends="compile" description="Tests the project">
		<junit printsummary="yes" haltonfailure="no" fork="yes">
		<classpath>
			<pathelement location="${build.classes}"/>
	        <fileset dir="lib">
	            <include name="**/*.jar" />
	        </fileset>						
		</classpath>
		<formatter type="xml"/>
		<test todir="${report.junit}" name="test.org.mandarax.dsl.TestSuiteAll"/>
		<test todir="${report.junit}" name="test.org.mandarax.compiler.TestSuiteAll"/>
		<test todir="${report.junit}" name="test.org.mandarax.examples.userv.UservTestCases"/>
	</junit>
	<!-- report -->
	<junitreport todir="${report.junit}">
	  <fileset dir="${report.junit}">
	    <include name="TEST-*.xml"/>
	  </fileset>
	  <report format="frames" todir="${report.junit}"/>
	</junitreport>
</target>
	
<!-- build the jars -->
<target name="jar" depends="tests" description="Creates the jar file">
  	<tstamp>
    	<format property="today" pattern="ddMMyyhhmm"/>
  	</tstamp>
	
	<!-- parser and compiler -->
	<filter token="TITLE" value="${name}: API, DSL and reference compiler"/>
	<filter token="VERSION" value="${version}"/>
	<filter token="VENDOR" value="Jens Dietrich, Massey University"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/manifest.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${compiler.jar}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="org/**/*.*"
		excludes="org/mandarax/examples/**/*.*,org/mandarax/rt/**/*.*,test/**/*.*,"
	/>
	
	
	<!-- runtime -->
	<filter token="TITLE" value="${name} runtime library"/>
	<filter token="VERSION" value="${version}"/>
	<filter token="VENDOR" value="Jens Dietrich, Massey University"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/manifest.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${rt.jar}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="org/mandarax/rt/**/*.*"
	/>
	
	
	<!-- userv -->
	<filter token="TITLE" value="${name} userv example application"/>
	<filter token="VERSION" value="${version}"/>
	<filter token="VENDOR" value="Jens Dietrich, Massey University"/>
	<filter token="MAIN" value="org.mandarax.examples.userv.app.Main"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/userv.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${userv.jar}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="org/mandarax/examples/userv/**/*.*"
	/>
	
	<!-- tests -->
	<filter token="TITLE" value="${name} JUnit test cases"/>
	<filter token="VERSION" value="${version}"/>
	<filter token="VENDOR" value="Jens Dietrich, Massey University"/>
	<delete file="${build.tmp}/manifest.mf"/>
	<copy file="${config.dir}/manifest.mf" tofile="${build.tmp}/manifest.mf" filtering="yes"/>
	<jar jarfile="${tests.jar}.jar" 
		manifest="${build.tmp}/manifest.mf" 
		basedir="${build.classes}"
		includes="test/**/*.*"
	/>
	
</target>
	
	
<!-- dependency analysis -->	
<target name="jdepend" depends="compile" description="Dependency analysis">
	  <jdepend format="xml" outputfile="${report.jdepend}/jdepend-report.xml">
	      <exclude name="java.*"/>
	      <exclude name="javax.*"/>
	  	  <exclude name="test.*"/>
		  <classespath>
			<pathelement location="${build.classes}"/>			
		  </classespath>
	  	<classpath location="${build.classes}" />
	  </jdepend>

	  <style basedir="${report.jdepend}" destdir="${report.jdepend}"
	         includes="jdepend-report.xml" 
	         style="tools/jdepend.xsl" />
</target>
	
<!-- build release -->	
<target name="release" depends="clean,jar,jdepend" description="Build release">
	  <zip destfile="${build.dir}/${name}-${version}.zip">
	    <zipfileset dir="${build.lib}" prefix="lib"/>
	  	<zipfileset dir="${lib.dir}" prefix="lib-required"/>
	    <zipfileset dir="src/java" prefix="src/java"/>
	  	<zipfileset dir="src/testcases" prefix="src/testcases"/>
	  	<zipfileset dir="src/userv" prefix="src/userv"/>
	  	<zipfileset dir="src-generated/testcases" prefix="src-generated/testcases"/>
	    <zipfileset dir="${qareports.dir}" prefix="qa"/>
	  	<zipfileset file="misc/license.txt" prefix=""/>
	  </zip>
</target>
	
<!-- clean up -->	
<target name="clean">
	<delete dir = "${qareports}"/>
	<delete dir = "${classes}"/>
	<delete dir = "${build}"/>
</target>

</project>